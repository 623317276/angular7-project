(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ant-design-palettes'), require('@angular/common'), require('@angular/common/http'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ant-design/icons-angular', ['exports', 'ant-design-palettes', '@angular/common', '@angular/common/http', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ant-design'] = global['ant-design'] || {}, global['ant-design']['icons-angular'] = {}),global.antDesignPalettes,global.ng.common,global.ng.common.http,global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,antDesignPalettes,common,http,core,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} message
     * @return {?}
     */
    function printErr(message) {
        console.error("[@ant-design/icons-angular]: " + message + ".");
    }
    /**
     * @param {?} message
     * @return {?}
     */
    function printWarn(message) {
        console.warn("[@ant-design/icons-angular]: " + message + ".");
    }
    /**
     * Use ant-design-palettes to generate a secondary color.
     * @param {?} primaryColor
     * @return {?}
     */
    function getSecondaryColor(primaryColor) {
        return antDesignPalettes.generate(primaryColor)[0];
    }
    /**
     * Append a theme suffix to a type.
     * @param {?} name
     * @param {?} theme
     * @return {?}
     */
    function withSuffix(name, theme) {
        switch (theme) {
            case 'fill':
                return name + "-fill";
            case 'outline':
                return name + "-o";
            case 'twotone':
                return name + "-twotone";
            default:
                throw new TypeError("Unknown theme type: " + theme + ", name: " + name);
        }
    }
    /**
     * @param {?} name
     * @param {?} theme
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    function withSuffixAndColor(name, theme, pri, sec) {
        return withSuffix(name, theme) + "-" + pri + "-" + sec;
    }
    /**
     * @param {?} abbr
     * @return {?}
     */
    function mapAbbrToTheme(abbr) {
        return abbr === 'o' ? 'outline' : ((abbr));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function alreadyHasAThemeSuffix(name) {
        return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');
    }
    /**
     * @param {?} target
     * @return {?}
     */
    function isIconDefinition(target) {
        return (typeof target === 'object' &&
            typeof target.name === 'string' &&
            typeof target.theme === 'string' &&
            // IconDefinition.icon could be a SVG: We render SVG only once (the first time a icon is used)
            // and return a copy every time after that.
            (target.icon instanceof SVGElement || typeof target.icon === 'string'));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function getIconDefinitionFromAbbr(str) {
        /** @type {?} */
        var arr = str.split('-');
        /** @type {?} */
        var theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
        /** @type {?} */
        var name = arr.join('-');
        return (({
            name: name,
            theme: theme,
            icon: ''
        }));
    }
    /**
     * @param {?} svg
     * @return {?}
     */
    function cloneSVG(svg) {
        return ((svg.cloneNode(true)));
    }
    /**
     * @param {?} raw
     * @return {?}
     */
    function replaceFillColor(raw) {
        return raw
            .replace(/['"]#333['"]/g, '"primaryColor"')
            .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
            .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
            .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var IconService = (function () {
        function IconService(_rendererFactory, _handler, _document) {
            this._rendererFactory = _rendererFactory;
            this._handler = _handler;
            this._document = _document;
            this.defaultTheme = 'outline';
            /**
             * Register icons.
             */
            this._svgDefinitions = new Map();
            /**
             * Register rendered (with color) SVG icons.
             */
            this._svgCachedDefinitions = new Map();
            /**
             * Default color settings.
             */
            this._twoToneColorPalette = {
                primaryColor: '#333333',
                secondaryColor: '#E6E6E6'
            };
            /**
             * A url prefix so users can determine a static asset root.
             */
            this._assetsSource = '';
            /**
             * To note whether a request to an icon is under processing.
             */
            this._httpQueue = new Map();
            this._renderer = this._rendererFactory.createRenderer(null, null);
            if (this._handler) {
                this._http = new http.HttpClient(this._handler);
            }
        }
        Object.defineProperty(IconService.prototype, "twoToneColor", {
            get: /**
             * @return {?}
             */ function () {
                return ((__assign({}, this._twoToneColorPalette))); // Make a copy to avoid unexpected changes.
            },
            set: /**
             * @param {?} __0
             * @return {?}
             */ function (_a) {
                var primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
                if (primaryColor && typeof primaryColor === 'string' && typeof secondaryColor === 'string' || typeof secondaryColor === 'undefined') {
                    this._twoToneColorPalette.primaryColor = primaryColor;
                    this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} prefix
         * @return {?}
         */
        IconService.prototype.changeAssetsSource = /**
         * @param {?} prefix
         * @return {?}
         */
            function (prefix) {
                this._assetsSource = prefix.endsWith('/') ? prefix : prefix + '/';
            };
        /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param icons
         */
        /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param {...?} icons
         * @return {?}
         */
        IconService.prototype.addIcon = /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param {...?} icons
         * @return {?}
         */
            function () {
                var icons = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    icons[_i] = arguments[_i];
                }
                this._addIconLiteral.apply(this, __spread(icons));
            };
        /**
         * Register icon.
         * @param icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         */
        /**
         * Register icon.
         * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         * @return {?}
         */
        IconService.prototype._addIconLiteral = /**
         * Register icon.
         * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         * @return {?}
         */
            function () {
                var _this = this;
                var icons = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    icons[_i] = arguments[_i];
                }
                icons.forEach(function (icon) {
                    _this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
                });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        IconService.prototype._get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._svgDefinitions.get(key) || null;
            };
        /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         */
        /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         * @param {?} url
         * @return {?}
         */
        IconService.prototype._getFromRemote = /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (this._http) {
                    /** @type {?} */
                    var task = this._httpQueue.get(url);
                    /** @type {?} */
                    var ob = void 0;
                    if (task) {
                        ob = task.ob;
                    }
                    else {
                        ob = this._createObservableRequest(url);
                        task = { ob: ob };
                        this._httpQueue.set(url, task);
                    }
                    return ob;
                }
                else {
                    printWarn('You need to import HttpClient module to use dynamic importing');
                    return rxjs.of(null);
                }
            };
        /**
         * @param {?} url
         * @return {?}
         */
        IconService.prototype._createObservableRequest = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                var _this = this;
                /** @type {?} */
                var icon = getIconDefinitionFromAbbr(url);
                return this._http.get(this._assetsSource + "assets/" + icon.theme + "/" + icon.name + ".svg", { responseType: 'text' }).pipe(operators.share(), // Use `share` so if multi directives request the same icon, HTTP request would only be fired once.
                operators.tap(function () { return _this._httpQueue.delete(url); }), operators.map(function (svgString) {
                    icon.icon = svgString;
                    _this._addIconLiteral(icon);
                    return icon;
                }), operators.catchError(function () {
                    printErr("the icon " + url + " does not exist in your assets folder");
                    _this._httpQueue.delete(url);
                    return rxjs.of(null);
                }));
            };
        /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon dynamically, that would be async,
         * so we provided a unified interface here.
         */
        /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon dynamically, that would be async,
         * so we provided a unified interface here.
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
        IconService.prototype.getRenderedContent = /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon dynamically, that would be async,
         * so we provided a unified interface here.
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
            function (icon, twoToneColor) {
                var _this = this;
                /** @type {?} */
                var definitionOrNull = isIconDefinition(icon)
                    ? ((icon))
                    : this._get(((icon)));
                /** @type {?} */
                var $icon = definitionOrNull ? rxjs.of(definitionOrNull) : this._getFromRemote(((icon)));
                return $icon.pipe(operators.map(function (i) {
                    if (i) {
                        return _this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
                    }
                    else {
                        printErr("the icon " + icon + " does not exist or is not registered");
                        return null;
                    }
                }));
            };
        /**
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
        IconService.prototype._loadSVGFromCacheOrCreateNew = /**
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
            function (icon, twoToneColor) {
                /** @type {?} */
                var svg;
                /** @type {?} */
                var pri = twoToneColor || this._twoToneColorPalette.primaryColor;
                /** @type {?} */
                var sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
                /** @type {?} */
                var key = withSuffixAndColor(icon.name, icon.theme, pri, sec);
                /** @type {?} */
                var cached = this._svgCachedDefinitions.get(key);
                // If this icon is used before, there should be a copy in cachedDefinitions, just copy it.
                // Otherwise, generate one from string or SVG element, and cache it.
                if (!cached) {
                    svg = this._setSVGAttribute(this._colorizeSVGIcon(typeof icon.icon === 'string' ? this._createSVGElementFromString(icon.icon) : icon.icon, icon.theme === 'twotone', pri, sec));
                    this._svgCachedDefinitions.set(key, ((__assign({}, icon, { icon: svg }))));
                }
                else {
                    svg = cached.icon;
                }
                return cloneSVG(svg);
            };
        /**
         * @param {?} str
         * @return {?}
         */
        IconService.prototype._createSVGElementFromString = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var colorParsed = replaceFillColor(str);
                /** @type {?} */
                var div = this._document.createElement('div');
                div.innerHTML = colorParsed;
                /** @type {?} */
                var svg = div.querySelector('svg');
                if (!svg) {
                    throw Error('<svg> tag not found');
                }
                return svg;
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        IconService.prototype._setSVGAttribute = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                this._renderer.setAttribute(svg, 'width', '1em');
                this._renderer.setAttribute(svg, 'height', '1em');
                return svg;
            };
        /**
         * @param {?} svg
         * @param {?} twotone
         * @param {?} pri
         * @param {?} sec
         * @return {?}
         */
        IconService.prototype._colorizeSVGIcon = /**
         * @param {?} svg
         * @param {?} twotone
         * @param {?} pri
         * @param {?} sec
         * @return {?}
         */
            function (svg, twotone, pri, sec) {
                if (twotone) {
                    /** @type {?} */
                    var children = svg.childNodes;
                    /** @type {?} */
                    var length_1 = children.length;
                    for (var i = 0; i < length_1; i++) {
                        /** @type {?} */
                        var child = ((children[i]));
                        if (child.getAttribute('fill') === 'secondaryColor') {
                            this._renderer.setAttribute(child, 'fill', sec);
                        }
                        else {
                            this._renderer.setAttribute(child, 'fill', pri);
                        }
                    }
                }
                this._renderer.setAttribute(svg, 'fill', 'currentColor');
                return svg;
            };
        /**
         * @return {?}
         */
        IconService.prototype.clear = /**
         * @return {?}
         */
            function () {
                this._svgDefinitions.clear();
            };
        IconService.ctorParameters = function () {
            return [
                { type: core.RendererFactory2 },
                { type: http.HttpBackend, decorators: [{ type: core.Optional }] },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        return IconService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Developers use this component to render an SVG element.
     */
    var IconDirective = (function () {
        function IconDirective(_iconService, _elementRef, _renderer) {
            this._iconService = _iconService;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
        }
        /**
         * Render an icon with given type and theme. Return an SVG element for extra behaviors (extended by child classes).
         */
        /**
         * Render an icon with given type and theme. Return an SVG element for extra behaviors (extended by child classes).
         * @return {?}
         */
        IconDirective.prototype._changeIcon = /**
         * Render an icon with given type and theme. Return an SVG element for extra behaviors (extended by child classes).
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (!_this.type) {
                        _this._clearSVGElement();
                    }
                    else {
                        _this._iconService.getRenderedContent(_this._parseIcon(_this.type, _this.theme), _this.twoToneColor)
                            .subscribe(function (svg) {
                            if (svg) {
                                _this._setSVGElement(svg);
                                resolve(((svg)));
                            }
                            else {
                                reject(null);
                            }
                        });
                    }
                });
            };
        /**
         * Parse an icon's type.
         */
        /**
         * Parse an icon's type.
         * @param {?} type
         * @param {?} theme
         * @return {?}
         */
        IconDirective.prototype._parseIcon = /**
         * Parse an icon's type.
         * @param {?} type
         * @param {?} theme
         * @return {?}
         */
            function (type, theme) {
                if (isIconDefinition(type)) {
                    return type;
                }
                else {
                    if (alreadyHasAThemeSuffix(type)) {
                        if (!!theme) {
                            printErr("'type' " + type + " already gets a theme inside so 'theme' " + theme + " would be ignored");
                        }
                        return type;
                    }
                    else {
                        return withSuffix(type, theme || this._iconService.defaultTheme);
                    }
                }
            };
        /**
         * Render an SVG element into the directive after removing other icons.
         */
        /**
         * Render an SVG element into the directive after removing other icons.
         * @param {?} svg
         * @return {?}
         */
        IconDirective.prototype._setSVGElement = /**
         * Render an SVG element into the directive after removing other icons.
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                /** @type {?} */
                var self = this._elementRef.nativeElement;
                this._clearSVGElement();
                this._renderer.appendChild(self, svg);
            };
        /**
         * @return {?}
         */
        IconDirective.prototype._clearSVGElement = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this._elementRef.nativeElement;
                /** @type {?} */
                var children = self.childNodes;
                /** @type {?} */
                var childCount = children.length;
                for (var i = childCount - 1; i >= 0; i--) {
                    /** @type {?} */
                    var child = ((children[i]));
                    if (child.tagName.toLowerCase() === 'svg') {
                        this._renderer.removeChild(self, child);
                    }
                }
            };
        /**
         * @return {?}
         */
        IconDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this._changeIcon().then(function () {
                });
            };
        IconDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[antIcon]'
                    },] }
        ];
        IconDirective.ctorParameters = function () {
            return [
                { type: IconService },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        IconDirective.propDecorators = {
            type: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            twoToneColor: [{ type: core.Input }]
        };
        return IconDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var IconModule = (function () {
        function IconModule() {
        }
        IconModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [IconDirective],
                        declarations: [IconDirective],
                        providers: [IconService]
                    },] }
        ];
        return IconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    // This icon file is generated by build/generate.ts
    // tslint:disable
    /** @type {?} */
    var manifest = {
        fill: [
            'account-book',
            'alert',
            'alipay-square',
            'alipay-circle',
            'amazon-circle',
            'aliwangwang',
            'amazon-square',
            'android',
            'apple',
            'api',
            'appstore',
            'audio',
            'backward',
            'bank',
            'behance-circle',
            'behance-square',
            'bell',
            'box-plot',
            'book',
            'build',
            'bulb',
            'calculator',
            'calendar',
            'caret-down',
            'camera',
            'car',
            'caret-left',
            'caret-right',
            'carry-out',
            'caret-up',
            'check-circle',
            'check-square',
            'ci-circle',
            'chrome',
            'close-circle',
            'clock-circle',
            'code-sandbox-circle',
            'cloud',
            'code-sandbox-square',
            'close-square',
            'code',
            'codepen-circle',
            'codepen-square',
            'compass',
            'control',
            'contacts',
            'container',
            'copy',
            'credit-card',
            'crown',
            'customer-service',
            'copyright-circle',
            'dashboard',
            'diff',
            'delete',
            'database',
            'dingtalk-circle',
            'dingtalk-square',
            'dollar-circle',
            'dislike',
            'down-circle',
            'dribbble-square',
            'dribbble-circle',
            'dropbox-circle',
            'down-square',
            'dropbox-square',
            'edit',
            'euro-circle',
            'exclamation-circle',
            'experiment',
            'environment',
            'eye',
            'facebook',
            'fast-backward',
            'fast-forward',
            'file-add',
            'file-excel',
            'file-exclamation',
            'file-image',
            'file-markdown',
            'file-ppt',
            'file-pdf',
            'file-text',
            'file-word',
            'file-unknown',
            'file',
            'file-zip',
            'filter',
            'fire',
            'flag',
            'folder-add',
            'folder-open',
            'folder',
            'forward',
            'frown',
            'funnel-plot',
            'fund',
            'gift',
            'github',
            'golden',
            'gitlab',
            'google-circle',
            'google-square',
            'google-plus-square',
            'hdd',
            'google-plus-circle',
            'heart',
            'highlight',
            'home',
            'html5',
            'hourglass',
            'ie-circle',
            'idcard',
            'ie-square',
            'info-circle',
            'insurance',
            'instagram',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'like',
            'linkedin',
            'lock',
            'mail',
            'medicine-box',
            'medium-circle',
            'medium-square',
            'message',
            'meh',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'phone',
            'pay-circle',
            'picture',
            'pie-chart',
            'play-circle',
            'play-square',
            'plus-circle',
            'plus-square',
            'pound-circle',
            'printer',
            'profile',
            'project',
            'property-safety',
            'pushpin',
            'qq-circle',
            'question-circle',
            'read',
            'reconciliation',
            'qq-square',
            'reddit-circle',
            'red-envelope',
            'reddit-square',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'security-scan',
            'setting',
            'shopping',
            'save',
            'shop',
            'sketch-square',
            'skype',
            'skin',
            'sketch-circle',
            'slack-circle',
            'sliders',
            'slack-square',
            'snippets',
            'smile',
            'sound',
            'star',
            'step-backward',
            'step-forward',
            'stop',
            'switcher',
            'tags',
            'tag',
            'tablet',
            'taobao-circle',
            'thunderbolt',
            'taobao-square',
            'trademark-circle',
            'twitter-circle',
            'trophy',
            'tool',
            'twitter-square',
            'up-circle',
            'up-square',
            'unlock',
            'usb',
            'video-camera',
            'warning',
            'wallet',
            'weibo-circle',
            'wechat',
            'weibo-square',
            'windows',
            'yahoo',
            'yuque',
            'youtube',
            'zhihu-circle',
            'zhihu-square'
        ],
        outline: [
            'account-book',
            'alert',
            'alipay-circle',
            'aliwangwang',
            'android',
            'apple',
            'api',
            'appstore',
            'audio',
            'backward',
            'bank',
            'behance-square',
            'bell',
            'box-plot',
            'book',
            'build',
            'bulb',
            'calculator',
            'calendar',
            'caret-down',
            'camera',
            'car',
            'caret-left',
            'caret-right',
            'carry-out',
            'caret-up',
            'check-circle',
            'check-square',
            'chrome',
            'close-circle',
            'clock-circle',
            'cloud',
            'close-square',
            'code',
            'codepen-circle',
            'compass',
            'control',
            'contacts',
            'container',
            'copy',
            'credit-card',
            'crown',
            'customer-service',
            'dashboard',
            'diff',
            'delete',
            'database',
            'dislike',
            'down-circle',
            'dribbble-square',
            'down-square',
            'edit',
            'exclamation-circle',
            'experiment',
            'environment',
            'eye',
            'facebook',
            'fast-backward',
            'fast-forward',
            'file-add',
            'file-excel',
            'file-exclamation',
            'file-image',
            'file-markdown',
            'file-ppt',
            'file-pdf',
            'file-text',
            'file-word',
            'file-unknown',
            'file',
            'file-zip',
            'filter',
            'fire',
            'flag',
            'folder-add',
            'folder-open',
            'folder',
            'forward',
            'frown',
            'funnel-plot',
            'fund',
            'gift',
            'github',
            'gitlab',
            'hdd',
            'heart',
            'highlight',
            'home',
            'html5',
            'hourglass',
            'idcard',
            'info-circle',
            'insurance',
            'instagram',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'like',
            'linkedin',
            'lock',
            'mail',
            'medicine-box',
            'message',
            'meh',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'phone',
            'pay-circle',
            'picture',
            'pie-chart',
            'play-circle',
            'play-square',
            'plus-circle',
            'plus-square',
            'printer',
            'profile',
            'project',
            'property-safety',
            'pushpin',
            'question-circle',
            'read',
            'reconciliation',
            'red-envelope',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'security-scan',
            'setting',
            'shopping',
            'save',
            'shop',
            'skype',
            'skin',
            'sliders',
            'slack-square',
            'snippets',
            'smile',
            'sound',
            'star',
            'step-backward',
            'step-forward',
            'stop',
            'switcher',
            'tags',
            'tag',
            'tablet',
            'taobao-circle',
            'thunderbolt',
            'trophy',
            'tool',
            'up-circle',
            'up-square',
            'unlock',
            'usb',
            'video-camera',
            'warning',
            'wallet',
            'weibo-circle',
            'wechat',
            'weibo-square',
            'windows',
            'yahoo',
            'yuque',
            'youtube',
            'alibaba',
            'align-center',
            'align-left',
            'align-right',
            'alipay',
            'aliyun',
            'amazon',
            'ant-design',
            'ant-cloud',
            'apartment',
            'area-chart',
            'arrow-down',
            'arrow-right',
            'arrow-up',
            'arrows-alt',
            'audit',
            'arrow-left',
            'bar-chart',
            'barcode',
            'bars',
            'behance',
            'bg-colors',
            'block',
            'bold',
            'border-bottom',
            'border-horizontal',
            'border-inner',
            'border-left',
            'border-outer',
            'border-right',
            'border-top',
            'border-verticle',
            'border',
            'branches',
            'check',
            'ci',
            'close',
            'cloud-download',
            'cloud-server',
            'cloud-sync',
            'cloud-upload',
            'cluster',
            'code-sandbox',
            'codepen',
            'coffee',
            'colum-height',
            'column-width',
            'copyright',
            'dash',
            'deployment-unit',
            'desktop',
            'dingding',
            'disconnect',
            'dollar',
            'double-left',
            'dot-chart',
            'double-right',
            'down',
            'download',
            'drag',
            'dribbble',
            'ellipsis',
            'dropbox',
            'enter',
            'exception',
            'euro',
            'exclamation',
            'export',
            'fall',
            'file-done',
            'file-jpg',
            'file-search',
            'file-protect',
            'file-sync',
            'font-colors',
            'fork',
            'form',
            'font-size',
            'fullscreen-exit',
            'fullscreen',
            'gateway',
            'gold',
            'global',
            'google-plus',
            'google',
            'heat-map',
            'ie',
            'import',
            'inbox',
            'info',
            'issues-close',
            'key',
            'italic',
            'laptop',
            'left',
            'line-chart',
            'line-height',
            'line',
            'link',
            'loading-3-quarters',
            'loading',
            'login',
            'logout',
            'man',
            'medium-workmark',
            'medium',
            'menu-fold',
            'menu-unfold',
            'menu',
            'minus',
            'monitor',
            'mr',
            'number',
            'paper-clip',
            'ordered-list',
            'pause',
            'percentage',
            'pic-center',
            'pic-right',
            'pic-left',
            'plus',
            'pound',
            'poweroff',
            'qq',
            'qrcode',
            'question',
            'radar-chart',
            'radius-bottomleft',
            'radius-bottomright',
            'radius-setting',
            'radius-upleft',
            'radius-upright',
            'reddit',
            'redo',
            'reload-time',
            'reload',
            'retweet',
            'right',
            'robot',
            'rise',
            'rollback',
            'safety',
            'scan',
            'scissor',
            'search',
            'select',
            'shake',
            'share-alt',
            'shopping-cart',
            'shrink',
            'sketch',
            'slack',
            'small-dash',
            'sort-ascending',
            'solution',
            'sort-descending',
            'stock',
            'strikethrough',
            'swap-right',
            'swap-left',
            'swap',
            'sync',
            'table',
            'taobao',
            'team',
            'to-top',
            'trademark',
            'transaction',
            'underline',
            'twitter',
            'undo',
            'unordered-list',
            'up',
            'upload',
            'user-add',
            'user-delete',
            'user',
            'usergroup-add',
            'usergroup-delete',
            'vertical-align-bottom',
            'vertical-align-middle',
            'vertical-align-top',
            'vertical-left',
            'vertical-right',
            'weibo',
            'wifi',
            'woman',
            'zhihu',
            'zoom-out',
            'zoom-in'
        ],
        twotone: [
            'account-book',
            'alert',
            'api',
            'appstore',
            'audio',
            'bank',
            'bell',
            'box-plot',
            'book',
            'build',
            'bulb',
            'calculator',
            'camera',
            'car',
            'carry-out',
            'check-circle',
            'check-square',
            'close-circle',
            'clock-circle',
            'cloud',
            'close-square',
            'code',
            'compass',
            'control',
            'contacts',
            'container',
            'copy',
            'credit-card',
            'crown',
            'customer-service',
            'dashboard',
            'diff',
            'delete',
            'database',
            'dislike',
            'down-circle',
            'down-square',
            'edit',
            'exclamation-circle',
            'experiment',
            'environment',
            'eye',
            'file-add',
            'file-excel',
            'file-exclamation',
            'file-image',
            'file-markdown',
            'file-ppt',
            'file-pdf',
            'file-text',
            'file-word',
            'file-unknown',
            'file',
            'file-zip',
            'filter',
            'fire',
            'flag',
            'folder-add',
            'folder-open',
            'folder',
            'frown',
            'funnel-plot',
            'fund',
            'gift',
            'hdd',
            'heart',
            'highlight',
            'home',
            'html5',
            'hourglass',
            'idcard',
            'info-circle',
            'insurance',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'like',
            'lock',
            'mail',
            'medicine-box',
            'message',
            'meh',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'phone',
            'picture',
            'pie-chart',
            'play-circle',
            'play-square',
            'plus-circle',
            'plus-square',
            'pound-circle',
            'printer',
            'profile',
            'project',
            'property-safety',
            'pushpin',
            'question-circle',
            'reconciliation',
            'red-envelope',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'security-scan',
            'setting',
            'shopping',
            'save',
            'shop',
            'skin',
            'sliders',
            'snippets',
            'smile',
            'sound',
            'star',
            'stop',
            'switcher',
            'tags',
            'tag',
            'tablet',
            'thunderbolt',
            'trademark-circle',
            'trophy',
            'tool',
            'up-circle',
            'up-square',
            'unlock',
            'usb',
            'video-camera',
            'warning',
            'wallet',
            'ci',
            'copyright',
            'dollar',
            'euro',
            'gold',
            'canlendar'
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.IconModule = IconModule;
    exports.IconService = IconService;
    exports.IconDirective = IconDirective;
    exports.printErr = printErr;
    exports.printWarn = printWarn;
    exports.getSecondaryColor = getSecondaryColor;
    exports.withSuffix = withSuffix;
    exports.withSuffixAndColor = withSuffixAndColor;
    exports.mapAbbrToTheme = mapAbbrToTheme;
    exports.alreadyHasAThemeSuffix = alreadyHasAThemeSuffix;
    exports.isIconDefinition = isIconDefinition;
    exports.getIconDefinitionFromAbbr = getIconDefinitionFromAbbr;
    exports.cloneSVG = cloneSVG;
    exports.replaceFillColor = replaceFillColor;
    exports.manifest = manifest;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,