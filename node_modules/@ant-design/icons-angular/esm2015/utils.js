/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { generate as generateColor } from 'ant-design-palettes';
/**
 * @param {?} message
 * @return {?}
 */
export function printErr(message) {
    console.error(`[@ant-design/icons-angular]: ${message}.`);
}
/**
 * @param {?} message
 * @return {?}
 */
export function printWarn(message) {
    console.warn(`[@ant-design/icons-angular]: ${message}.`);
}
/**
 * Use ant-design-palettes to generate a secondary color.
 * @param {?} primaryColor
 * @return {?}
 */
export function getSecondaryColor(primaryColor) {
    return generateColor(primaryColor)[0];
}
/**
 * Append a theme suffix to a type.
 * @param {?} name
 * @param {?} theme
 * @return {?}
 */
export function withSuffix(name, theme) {
    switch (theme) {
        case 'fill':
            return `${name}-fill`;
        case 'outline':
            return `${name}-o`;
        case 'twotone':
            return `${name}-twotone`;
        default:
            throw new TypeError(`Unknown theme type: ${theme}, name: ${name}`);
    }
}
/**
 * @param {?} name
 * @param {?} theme
 * @param {?} pri
 * @param {?} sec
 * @return {?}
 */
export function withSuffixAndColor(name, theme, pri, sec) {
    return `${withSuffix(name, theme)}-${pri}-${sec}`;
}
/**
 * @param {?} abbr
 * @return {?}
 */
export function mapAbbrToTheme(abbr) {
    return abbr === 'o' ? 'outline' : (/** @type {?} */ (abbr));
}
/**
 * @param {?} name
 * @return {?}
 */
export function alreadyHasAThemeSuffix(name) {
    return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');
}
/**
 * @param {?} target
 * @return {?}
 */
export function isIconDefinition(target) {
    return (typeof target === 'object' &&
        typeof target.name === 'string' &&
        typeof target.theme === 'string' &&
        // IconDefinition.icon could be a SVG: We render SVG only once (the first time a icon is used)
        // and return a copy every time after that.
        (target.icon instanceof SVGElement || typeof target.icon === 'string'));
}
/**
 * @param {?} str
 * @return {?}
 */
export function getIconDefinitionFromAbbr(str) {
    /** @type {?} */
    const arr = str.split('-');
    /** @type {?} */
    const theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
    /** @type {?} */
    const name = arr.join('-');
    return (/** @type {?} */ ({
        name,
        theme,
        icon: ''
    }));
}
/**
 * @param {?} svg
 * @return {?}
 */
export function cloneSVG(svg) {
    return (/** @type {?} */ (svg.cloneNode(true)));
}
/**
 * @param {?} raw
 * @return {?}
 */
export function replaceFillColor(raw) {
    return raw
        .replace(/['"]#333['"]/g, '"primaryColor"')
        .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
        .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
        .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLElBQUksYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBR2hFLE1BQU0sbUJBQW1CLE9BQWU7SUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUM1RCxDQUFDOzs7OztBQUVELE1BQU0sb0JBQW9CLE9BQWU7SUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUMzRCxDQUFDOzs7Ozs7QUFLRCxNQUFNLDRCQUE0QixZQUFvQjtJQUNwRCxNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7Ozs7Ozs7QUFLRCxNQUFNLHFCQUFxQixJQUFZLEVBQUUsS0FBZ0I7SUFDdkQsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNkLEtBQUssTUFBTTtZQUNULE1BQU0sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDO1FBQ3hCLEtBQUssU0FBUztZQUNaLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO1FBQ3JCLEtBQUssU0FBUztZQUNaLE1BQU0sQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDO1FBQzNCO1lBQ0UsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsS0FBSyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsQ0FBQztBQUNILENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSw2QkFBNkIsSUFBWSxFQUFFLEtBQWdCLEVBQUUsR0FBVyxFQUFFLEdBQVc7SUFDekYsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDcEQsQ0FBQzs7Ozs7QUFFRCxNQUFNLHlCQUF5QixJQUFZO0lBQ3pDLE1BQU0sQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLG1CQUFBLElBQUksRUFBYSxDQUFDO0FBQ3RELENBQUM7Ozs7O0FBRUQsTUFBTSxpQ0FBaUMsSUFBWTtJQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEYsQ0FBQzs7Ozs7QUFFRCxNQUFNLDJCQUEyQixNQUFXO0lBQzFDLE1BQU0sQ0FBQyxDQUNMLE9BQU8sTUFBTSxLQUFLLFFBQVE7UUFDMUIsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVE7UUFDL0IsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFFBQVE7UUFDaEMsOEZBQThGO1FBQzlGLDJDQUEyQztRQUMzQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksVUFBVSxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FDdkUsQ0FBQztBQUNKLENBQUM7Ozs7O0FBRUQsTUFBTSxvQ0FBb0MsR0FBVzs7VUFDN0MsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztVQUNwQixLQUFLLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O1VBQ3hELElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUUxQixNQUFNLENBQUMsbUJBQUE7UUFDTCxJQUFJO1FBQ0osS0FBSztRQUNMLElBQUksRUFBRSxFQUFFO0tBQ1QsRUFBa0IsQ0FBQztBQUN0QixDQUFDOzs7OztBQUVELE1BQU0sbUJBQW1CLEdBQWU7SUFDdEMsTUFBTSxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQWMsQ0FBQztBQUMzQyxDQUFDOzs7OztBQUVELE1BQU0sMkJBQTJCLEdBQVc7SUFDMUMsTUFBTSxDQUFDLEdBQUc7U0FDUCxPQUFPLENBQUMsZUFBZSxFQUFFLGdCQUFnQixDQUFDO1NBQzFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQztTQUMvQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUM7U0FDL0MsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDckQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyYXRlIGFzIGdlbmVyYXRlQ29sb3IgfSBmcm9tICdhbnQtZGVzaWduLXBhbGV0dGVzJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBUaGVtZVR5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50RXJyKG1lc3NhZ2U6IHN0cmluZykge1xuICBjb25zb2xlLmVycm9yKGBbQGFudC1kZXNpZ24vaWNvbnMtYW5ndWxhcl06ICR7bWVzc2FnZX0uYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFdhcm4obWVzc2FnZTogc3RyaW5nKSB7XG4gIGNvbnNvbGUud2FybihgW0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXJdOiAke21lc3NhZ2V9LmApO1xufVxuXG4vKipcbiAqIFVzZSBhbnQtZGVzaWduLXBhbGV0dGVzIHRvIGdlbmVyYXRlIGEgc2Vjb25kYXJ5IGNvbG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gZ2VuZXJhdGVDb2xvcihwcmltYXJ5Q29sb3IpWzBdO1xufVxuXG4vKipcbiAqIEFwcGVuZCBhIHRoZW1lIHN1ZmZpeCB0byBhIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU3VmZml4KG5hbWU6IHN0cmluZywgdGhlbWU6IFRoZW1lVHlwZSk6IHN0cmluZyB7XG4gIHN3aXRjaCAodGhlbWUpIHtcbiAgICBjYXNlICdmaWxsJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS1maWxsYDtcbiAgICBjYXNlICdvdXRsaW5lJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS1vYDtcbiAgICBjYXNlICd0d290b25lJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS10d290b25lYDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5rbm93biB0aGVtZSB0eXBlOiAke3RoZW1lfSwgbmFtZTogJHtuYW1lfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU3VmZml4QW5kQ29sb3IobmFtZTogc3RyaW5nLCB0aGVtZTogVGhlbWVUeXBlLCBwcmk6IHN0cmluZywgc2VjOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7d2l0aFN1ZmZpeChuYW1lLCB0aGVtZSl9LSR7cHJpfS0ke3NlY31gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwQWJiclRvVGhlbWUoYWJicjogc3RyaW5nKTogVGhlbWVUeXBlIHtcbiAgcmV0dXJuIGFiYnIgPT09ICdvJyA/ICdvdXRsaW5lJyA6IGFiYnIgYXMgVGhlbWVUeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxyZWFkeUhhc0FUaGVtZVN1ZmZpeChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIG5hbWUuZW5kc1dpdGgoJy1maWxsJykgfHwgbmFtZS5lbmRzV2l0aCgnLW8nKSB8fCBuYW1lLmVuZHNXaXRoKCctdHdvdG9uZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJY29uRGVmaW5pdGlvbih0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyBJY29uRGVmaW5pdGlvbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0Lm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgdHlwZW9mIHRhcmdldC50aGVtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAvLyBJY29uRGVmaW5pdGlvbi5pY29uIGNvdWxkIGJlIGEgU1ZHOiBXZSByZW5kZXIgU1ZHIG9ubHkgb25jZSAodGhlIGZpcnN0IHRpbWUgYSBpY29uIGlzIHVzZWQpXG4gICAgLy8gYW5kIHJldHVybiBhIGNvcHkgZXZlcnkgdGltZSBhZnRlciB0aGF0LlxuICAgICh0YXJnZXQuaWNvbiBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgfHwgdHlwZW9mIHRhcmdldC5pY29uID09PSAnc3RyaW5nJylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEljb25EZWZpbml0aW9uRnJvbUFiYnIoc3RyOiBzdHJpbmcpOiBJY29uRGVmaW5pdGlvbiB7XG4gIGNvbnN0IGFyciA9IHN0ci5zcGxpdCgnLScpO1xuICBjb25zdCB0aGVtZSA9IG1hcEFiYnJUb1RoZW1lKGFyci5zcGxpY2UoYXJyLmxlbmd0aCAtIDEsIDEpWzBdKTtcbiAgY29uc3QgbmFtZSA9IGFyci5qb2luKCctJyk7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIHRoZW1lLFxuICAgIGljb246ICcnXG4gIH0gYXMgSWNvbkRlZmluaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVNWRyhzdmc6IFNWR0VsZW1lbnQpOiBTVkdFbGVtZW50IHtcbiAgcmV0dXJuIHN2Zy5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHRWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VGaWxsQ29sb3IocmF3OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcmF3XG4gICAgLnJlcGxhY2UoL1snXCJdIzMzM1snXCJdL2csICdcInByaW1hcnlDb2xvclwiJylcbiAgICAucmVwbGFjZSgvWydcIl0jRTZFNkU2WydcIl0vZywgJ1wic2Vjb25kYXJ5Q29sb3JcIicpXG4gICAgLnJlcGxhY2UoL1snXCJdI0Q5RDlEOVsnXCJdL2csICdcInNlY29uZGFyeUNvbG9yXCInKVxuICAgIC5yZXBsYWNlKC9bJ1wiXSNEOEQ4RDhbJ1wiXS9nLCAnXCJzZWNvbmRhcnlDb2xvclwiJyk7XG59XG4iXX0=