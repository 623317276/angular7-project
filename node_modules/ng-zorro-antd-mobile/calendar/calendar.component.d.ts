import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import PropsType from './calendar.props.component';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
export { PropsType };
export interface StateType {
    showTimePicker: boolean;
    timePickerTitle?: string;
    startDate?: Date;
    endDate?: Date;
    disConfirmBtn?: boolean;
    clientHight?: number;
}
export declare class CalendarComponent implements OnInit, OnDestroy {
    private _localeProviderService;
    isShow: boolean;
    contentAnimateClass: string;
    maskAnimateClass: string;
    showClear: boolean;
    props: PropsType;
    state: StateType;
    private _unsubscribe$;
    private _enterDirection;
    locale: any;
    defaultTimeValue: any;
    prefixCls: any;
    enterDirection: any;
    visible: any;
    getDateExtra: any;
    defaultDate: any;
    minDate: any;
    maxDate: any;
    pickTime: any;
    type: any;
    showShortcut: any;
    rowSize: any;
    infinite: any;
    defaultValue: any;
    onSelect: any;
    onCancel: EventEmitter<any>;
    onConfirm: EventEmitter<any>;
    onSelectHasDisableDate: EventEmitter<any>;
    class: string;
    constructor(_localeProviderService: LocaleProviderService);
    receiveProps(nextProps: PropsType): void;
    showAnimation(): void;
    hideAnimation(): void;
    selectDate: (date: Date, useDateTime?: boolean, oldState?: {
        startDate?: Date;
        endDate?: Date;
    }, props?: PropsType) => StateType;
    onSelectedDate: (date: Date) => void;
    triggerSelectHasDisableDate: (date: Date[]) => void;
    onClose: () => void;
    triggerConfirm: () => void;
    triggerCancel(): void;
    triggerClear: () => void;
    onTimeChange: (date: Date) => void;
    shortcutSelect: (startDate: Date, endDate: Date, props?: PropsType) => void;
    setClientHeight: (height: number) => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
}
