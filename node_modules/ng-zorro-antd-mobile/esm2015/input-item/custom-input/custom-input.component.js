/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewEncapsulation, HostBinding, NgZone } from '@angular/core';
import { CustomInputService } from './custom-input.service';
export class CustomInput {
    /**
     * @param {?} _ref
     * @param {?} _customInputService
     * @param {?} _ngZone
     */
    constructor(_ref, _customInputService, _ngZone) {
        this._ref = _ref;
        this._customInputService = _customInputService;
        this._ngZone = _ngZone;
        this.keyboardPrefixCls = 'am-number-keyboard';
        this.focus = false;
        this._value = '';
        this._defaultValue = '';
        this._placeholder = '';
        this._editable = true;
        this._disabled = false;
        this._setFocus = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.clsFakeContainer = true;
        this.inputFocus = () => {
            this.removeBlurListener();
            /** @type {?} */
            const focus = this.focus;
            if (!focus || this._setFocus) {
                this.onInputFocus();
            }
            setTimeout(() => {
                this.addBlurListener();
            }, 50);
        };
        this.doBlur = ev => {
            /** @type {?} */
            const value = this._value;
            /** @type {?} */
            let parentFound = false;
            /** @type {?} */
            let isInput = false;
            /** @type {?} */
            let isKeyboard = false;
            /** @type {?} */
            let isClear = false;
            /** @type {?} */
            let target = ev.target;
            while (target && target !== null && !parentFound) {
                if (target === this._ref.nativeElement) {
                    parentFound = true;
                }
                if (target.localName === 'custominput') {
                    isInput = true;
                }
                if (target.localName === 'customkeyboard') {
                    isKeyboard = true;
                }
                if (target.className.indexOf('am-input-clear') >= 0) {
                    isClear = true;
                }
                target = target.parentElement;
            }
            // 当点击目标是本身的时候，获取焦点、不隐藏keyboard
            // 当点击目标不是本身但是其他的custom-input时，失去焦点、不隐藏keyboard
            // 当点击目标是keyboard时，不失去焦点，不隐藏keyboard
            if (parentFound) {
                this.focus = true;
            }
            else if (isInput) {
                this._setFocus = false;
                this.focus = false;
                this.onBlur.emit(this._value);
            }
            if (this.focus && isKeyboard) {
                this.focus = true;
                this.onKeyboardClick(CustomInputService.clickValue);
            }
            if (!parentFound && !isInput && !isKeyboard && !isClear && !this._setFocus) {
                this.focus = false;
                this._setFocus = false;
                this.onBlur.emit(this._value);
                CustomInputService.hideKeyboard();
            }
            this.setFakeInputCls();
        };
        this.removeBlurListener = () => {
            document.removeEventListener('click', this.doBlur, false);
        };
        this.addBlurListener = () => {
            document.addEventListener('click', this.doBlur, false);
        };
        this.onInputBlur = value => {
            this.focus = false;
            this.setFakeInputCls();
            this.onBlur.emit(this._value);
            CustomInputService.hideKeyboard();
        };
        this.onInputFocus = () => {
            this.onFocus.emit(this._value);
            this.focus = true;
            this._setFocus = false;
            this.setFakeInputCls();
            setTimeout(() => {
                CustomInputService.showKeyboard();
            }, 100);
        };
        this.setFakeInputCls = () => {
            this.fakeInputCls = {
                [`fake-input`]: true,
                ['fake-input-disabled']: this._disabled,
                ['focus']: this.focus
            };
        };
        this.setContainerCls = () => {
            this.clsFakeContainerLeft = this._moneyKeyboardAlign === 'left';
        };
        this.onKeyboardClick = keyboardItemValue => {
            /** @type {?} */
            let valueAfterChange;
            // 删除键
            if (keyboardItemValue === 'delete') {
                valueAfterChange = this._value.substring(0, this._value.length - 1);
                this.onChange.emit(valueAfterChange);
                // 确认键
            }
            else if (keyboardItemValue === 'confirm') {
                valueAfterChange = this._value;
                this.onChange.emit(valueAfterChange);
                this.onInputBlur(this._value);
                // 收起键
            }
            else if (keyboardItemValue === 'hide') {
                valueAfterChange = this._value;
                this.onInputBlur(valueAfterChange);
            }
            else {
                if (this._maxLength !== undefined &&
                    +this._maxLength >= 0 &&
                    (this._value + keyboardItemValue).length > this._maxLength) {
                    valueAfterChange = (this._value + keyboardItemValue).substr(0, this._maxLength);
                    this.onChange.emit(valueAfterChange);
                }
                else {
                    valueAfterChange = this._value + keyboardItemValue;
                    this.onChange.emit(valueAfterChange);
                }
            }
            this._ngZone.run(() => {
                this._value = valueAfterChange;
            });
        };
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (typeof v === undefined || v === null) {
            this._value = '';
        }
        else if (this._maxLength !== undefined && this._maxLength >= 0) {
            this._value = v.substr(0, this._maxLength);
        }
        else {
            this._value = v;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this._defaultValue = value;
        this._value = this._defaultValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxLength(value) {
        this._maxLength = value;
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set editable(value) {
        this._editable = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set moneyKeyboardAlign(value) {
        this._moneyKeyboardAlign = value;
        this.setContainerCls();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setFocus(value) {
        if (value) {
            this._setFocus = value.focus;
            if (this._setFocus) {
                this.inputFocus();
            }
        }
    }
    /**
     * @return {?}
     */
    onFakeInputClick() {
        if (this._preventKeyboard) {
            return;
        }
        this.inputFocus();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._preventKeyboard = this._disabled || !this._editable;
        this.setFakeInputCls();
        this.setContainerCls();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeBlurListener();
        if (CustomInputService) {
            CustomInputService.hideKeyboard();
            CustomInputService.compRef = null;
        }
        /** @type {?} */
        const container = document.querySelector(`#${this.keyboardPrefixCls}-container`);
        if (container) {
            container.remove();
        }
    }
}
CustomInput.decorators = [
    { type: Component, args: [{
                selector: 'CustomInput',
                template: "<div *ngIf=\"value===''\" class=\"fake-input-placeholder\">\n  {{placeholder}}\n</div>\n<div [ngClass]=\"fakeInputCls\" (click)=\"onFakeInputClick()\">\n  {{value}}\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [CustomInputService]
            }] }
];
/** @nocollapse */
CustomInput.ctorParameters = () => [
    { type: ElementRef },
    { type: CustomInputService },
    { type: NgZone }
];
CustomInput.propDecorators = {
    value: [{ type: Input }],
    defaultValue: [{ type: Input }],
    maxLength: [{ type: Input }],
    placeholder: [{ type: Input }],
    editable: [{ type: Input }],
    disabled: [{ type: Input }],
    moneyKeyboardAlign: [{ type: Input }],
    setFocus: [{ type: Input }],
    onChange: [{ type: Output }],
    onBlur: [{ type: Output }],
    onFocus: [{ type: Output }],
    clsFakeContainer: [{ type: HostBinding, args: ['class.fake-input-container',] }],
    clsFakeContainerLeft: [{ type: HostBinding, args: ['class.fake-input-container-left',] }]
};
if (false) {
    /** @type {?} */
    CustomInput.prototype.keyboardPrefixCls;
    /** @type {?} */
    CustomInput.prototype.fakeInputCls;
    /** @type {?} */
    CustomInput.prototype.focus;
    /** @type {?} */
    CustomInput.prototype._value;
    /** @type {?} */
    CustomInput.prototype._defaultValue;
    /** @type {?} */
    CustomInput.prototype._placeholder;
    /** @type {?} */
    CustomInput.prototype._maxLength;
    /** @type {?} */
    CustomInput.prototype._editable;
    /** @type {?} */
    CustomInput.prototype._disabled;
    /** @type {?} */
    CustomInput.prototype._setFocus;
    /** @type {?} */
    CustomInput.prototype._preventKeyboard;
    /** @type {?} */
    CustomInput.prototype._moneyKeyboardAlign;
    /** @type {?} */
    CustomInput.prototype.onChange;
    /** @type {?} */
    CustomInput.prototype.onBlur;
    /** @type {?} */
    CustomInput.prototype.onFocus;
    /** @type {?} */
    CustomInput.prototype.clsFakeContainer;
    /** @type {?} */
    CustomInput.prototype.clsFakeContainerLeft;
    /** @type {?} */
    CustomInput.prototype.inputFocus;
    /** @type {?} */
    CustomInput.prototype.doBlur;
    /** @type {?} */
    CustomInput.prototype.removeBlurListener;
    /** @type {?} */
    CustomInput.prototype.addBlurListener;
    /** @type {?} */
    CustomInput.prototype.onInputBlur;
    /** @type {?} */
    CustomInput.prototype.onInputFocus;
    /** @type {?} */
    CustomInput.prototype.setFakeInputCls;
    /** @type {?} */
    CustomInput.prototype.setContainerCls;
    /** @type {?} */
    CustomInput.prototype.onKeyboardClick;
    /** @type {?} */
    CustomInput.prototype._ref;
    /** @type {?} */
    CustomInput.prototype._customInputService;
    /** @type {?} */
    CustomInput.prototype._ngZone;
}

//# sourceMappingURL=data:application/json;base64,