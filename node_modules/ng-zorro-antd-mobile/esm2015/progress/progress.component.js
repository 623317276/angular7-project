/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
/** @typedef {?} */
var PositionType;
export { PositionType };
export class ProgressComponent {
    constructor() {
        this.prefixCls = 'am-progress';
        this._percent = 0;
        this._exceedance = false;
        this.unfilled = true;
        this.position = 'fixed';
        this.barStyle = {};
        this.max = 100;
        this.outer = true;
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percent(value) {
        this._percent = value;
        if (value > 100) {
            this._exceedance = true;
        }
        else {
            this._exceedance = false;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.percent;
    }
    /**
     * @return {?}
     */
    get fixOuter() {
        return 'fixed' === this.position;
    }
    /**
     * @return {?}
     */
    get hideOuter() {
        return !this.unfilled && !this._exceedance;
    }
    /**
     * @return {?}
     */
    get exceedance() {
        return this._exceedance;
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'Progress, nzm-progress',
                template: "<div class=\"{{prefixCls}}-bar\" [ngStyle]=\"barStyle\" [style.width.%]=\"percent\"></div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ProgressComponent.ctorParameters = () => [];
ProgressComponent.propDecorators = {
    unfilled: [{ type: Input }],
    position: [{ type: Input }],
    barStyle: [{ type: Input }],
    percent: [{ type: Input }],
    max: [{ type: HostBinding, args: ['attr.max',] }],
    value: [{ type: HostBinding, args: ['attr.value',] }],
    outer: [{ type: HostBinding, args: ['class.am-progress-outer',] }],
    fixOuter: [{ type: HostBinding, args: ['class.am-progress-fixed-outer',] }],
    hideOuter: [{ type: HostBinding, args: ['class.am-progress-hide-outer',] }],
    exceedance: [{ type: HostBinding, args: ['class.am-progress-exceedance',] }]
};
if (false) {
    /** @type {?} */
    ProgressComponent.prototype.prefixCls;
    /** @type {?} */
    ProgressComponent.prototype._percent;
    /** @type {?} */
    ProgressComponent.prototype._exceedance;
    /** @type {?} */
    ProgressComponent.prototype.unfilled;
    /** @type {?} */
    ProgressComponent.prototype.position;
    /** @type {?} */
    ProgressComponent.prototype.barStyle;
    /** @type {?} */
    ProgressComponent.prototype.max;
    /** @type {?} */
    ProgressComponent.prototype.outer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJwcm9ncmVzcy9wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVFqRixNQUFNO0lBOENKO3lCQTdDb0IsYUFBYTt3QkFFTixDQUFDOzJCQUNHLEtBQUs7d0JBR2hCLElBQUk7d0JBRUMsT0FBTzt3QkFFYixFQUFFO21CQWVQLEdBQUc7cUJBTUEsSUFBSTtLQWNMOzs7O0lBbENoQixJQUNJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDdEI7Ozs7O0lBQ0QsSUFBSSxPQUFPLENBQUMsS0FBYTtRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUN6QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDMUI7S0FDRjs7OztJQUlELElBQ0ksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUNyQjs7OztJQUdELElBQ0ksUUFBUTtRQUNWLE9BQU8sT0FBTyxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDbEM7Ozs7SUFDRCxJQUNJLFNBQVM7UUFDWCxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDNUM7Ozs7SUFDRCxJQUNJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDekI7OztZQWpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsc0dBQXdDO2dCQUN4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN0Qzs7Ozs7dUJBT0UsS0FBSzt1QkFFTCxLQUFLO3VCQUVMLEtBQUs7c0JBRUwsS0FBSztrQkFhTCxXQUFXLFNBQUMsVUFBVTtvQkFFdEIsV0FBVyxTQUFDLFlBQVk7b0JBSXhCLFdBQVcsU0FBQyx5QkFBeUI7dUJBRXJDLFdBQVcsU0FBQywrQkFBK0I7d0JBSTNDLFdBQVcsU0FBQyw4QkFBOEI7eUJBSTFDLFdBQVcsU0FBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCB0eXBlIFBvc2l0aW9uVHlwZSA9ICdub3JtYWwnIHwgJ2ZpeGVkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnUHJvZ3Jlc3MsIG56bS1wcm9ncmVzcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9ncmVzcy5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NDb21wb25lbnQge1xuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbS1wcm9ncmVzcyc7XG5cbiAgcHJpdmF0ZSBfcGVyY2VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfZXhjZWVkYW5jZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIHVuZmlsbGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KClcbiAgcG9zaXRpb246IFBvc2l0aW9uVHlwZSA9ICdmaXhlZCc7XG4gIEBJbnB1dCgpXG4gIGJhclN0eWxlOiBvYmplY3QgPSB7fTtcbiAgQElucHV0KClcbiAgZ2V0IHBlcmNlbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcGVyY2VudDtcbiAgfVxuICBzZXQgcGVyY2VudCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcGVyY2VudCA9IHZhbHVlO1xuICAgIGlmICh2YWx1ZSA+IDEwMCkge1xuICAgICAgdGhpcy5fZXhjZWVkYW5jZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2V4Y2VlZGFuY2UgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIubWF4JylcbiAgbWF4OiBudW1iZXIgPSAxMDA7XG4gIEBIb3N0QmluZGluZygnYXR0ci52YWx1ZScpXG4gIGdldCB2YWx1ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBlcmNlbnQ7XG4gIH1cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1wcm9ncmVzcy1vdXRlcicpXG4gIG91dGVyOiBib29sZWFuID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1wcm9ncmVzcy1maXhlZC1vdXRlcicpXG4gIGdldCBmaXhPdXRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gJ2ZpeGVkJyA9PT0gdGhpcy5wb3NpdGlvbjtcbiAgfVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXByb2dyZXNzLWhpZGUtb3V0ZXInKVxuICBnZXQgaGlkZU91dGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy51bmZpbGxlZCAmJiAhdGhpcy5fZXhjZWVkYW5jZTtcbiAgfVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXByb2dyZXNzLWV4Y2VlZGFuY2UnKVxuICBnZXQgZXhjZWVkYW5jZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZXhjZWVkYW5jZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge31cbn1cbiJdfQ==