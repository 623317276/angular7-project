/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
export class SwipeAction {
    constructor() {
        this.prefixCls = 'am-swipe';
        this.wrapCls = {};
        this._swiping = false;
        this._openedLeft = false;
        this._openedRight = false;
        this.left = [];
        this.right = [];
        this.autoClose = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onCloseSwipe = () => {
            if (!(this._openedLeft || this._openedRight)) {
                return;
            }
            this.close();
        };
        this.onTouchStart = e => {
            this._startX = e.changedTouches[0].clientX;
            this._swiping = true;
        };
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this.wrapCls = {
            [this.prefixCls]: true,
            [`${this.prefixCls}-swiping`]: this._swiping
        };
    }
    /**
     * @return {?}
     */
    close() {
        if (this._openedLeft || this._openedRight) {
            this.onClose.emit();
        }
        this.setBtnStyle(0);
        this._openedLeft = false;
        this._openedRight = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setBtnStyle(value) {
        /** @type {?} */
        const limit = value > 0 ? this._btnsLeftWidth : -this._btnsRightWidth;
        /** @type {?} */
        const contentLeft = this.getContentEasing(value, limit);
        this.content.nativeElement.style.left = `${contentLeft}px`;
        this.cover.nativeElement.style.display = Math.abs(value) > 0 ? 'block' : 'none';
        this.cover.nativeElement.style.left = `${contentLeft}px`;
    }
    /**
     * @param {?} value
     * @param {?} limit
     * @return {?}
     */
    getContentEasing(value, limit) {
        return Math.abs(value) - Math.abs(limit) > 0 ? limit : value;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchMove(e) {
        /** @type {?} */
        const deltaX = e.changedTouches[0].clientX - this._startX;
        e.preventDefault();
        this._needShowRight = deltaX < 0 && this.right.length > 0;
        this._needShowLeft = deltaX > 0 && this.left.length > 0;
        if (this.leftBtnRef) {
            this.leftBtnRef.nativeElement.style.visibility = this._needShowRight ? 'hidden' : 'visible';
        }
        if (this.rightBtnRef) {
            this.rightBtnRef.nativeElement.style.visibility = this._needShowLeft ? 'hidden' : 'visible';
        }
        this.setBtnStyle(deltaX);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchEnd(e) {
        /** @type {?} */
        const deltaX = e.changedTouches[0].clientX - this._startX;
        /** @type {?} */
        const needOpenRight = this._needShowRight && Math.abs(deltaX) > this._btnsRightWidth / 2;
        /** @type {?} */
        const needOpenLeft = this._needShowLeft && Math.abs(deltaX) > this._btnsLeftWidth / 2;
        if (needOpenRight) {
            this.doOpenRight();
        }
        else if (needOpenLeft) {
            this.doOpenLeft();
        }
        else {
            this.close();
        }
        this._swiping = false;
        this._needShowLeft = false;
        this._needShowRight = false;
    }
    /**
     * @return {?}
     */
    doOpenLeft() {
        this.open(this._btnsLeftWidth, true, false);
    }
    /**
     * @return {?}
     */
    doOpenRight() {
        this.open(-this._btnsRightWidth, false, true);
    }
    /**
     * @param {?} ev
     * @param {?} btn
     * @return {?}
     */
    onBtnClick(ev, btn) {
        /** @type {?} */
        const onPress = btn.onPress;
        if (onPress) {
            onPress(ev);
        }
        if (this.autoClose) {
            this.close();
        }
    }
    /**
     * @param {?} value
     * @param {?} openedLeft
     * @param {?} openedRight
     * @return {?}
     */
    open(value, openedLeft, openedRight) {
        this.onOpen.emit();
        this._openedLeft = openedLeft;
        this._openedRight = openedRight;
        this.setBtnStyle(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._btnsLeftWidth = this.leftBtnRef ? this.leftBtnRef.nativeElement.offsetWidth : 0;
        this._btnsRightWidth = this.rightBtnRef ? this.rightBtnRef.nativeElement.offsetWidth : 0;
        document.body.addEventListener('touchstart', this.onCloseSwipe, true);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        document.body.removeEventListener('touchstart', this.onCloseSwipe, true);
    }
}
SwipeAction.decorators = [
    { type: Component, args: [{
                selector: 'SwipeAction, nzm-swipe-action',
                template: "<div *ngIf=\"(left.length != 0 || right.length != 0) && !disabled\" [ngClass]=\"wrapCls\">\n  <div class=\"{{prefixCls}}-cover\" #coverRef></div>\n  <div *ngIf=\"left && left.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-left\"\n       #leftBtnRef>\n    <div *ngFor=\"let btn of left\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\">\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"right && right.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-right\"\n       #rightBtnRef>\n    <div *ngFor=\"let btn of right\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\"\n         >\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div class=\"{{prefixCls}}-content\"\n       #contentRef\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\">\n    <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n  </div>\n</div>\n<div *ngIf=\"!((left.length != 0 || right.length != 0) && !disabled)\"\n     class=\"{{prefixCls}}-content\"\n     #contentRef>\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</div>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SwipeAction.ctorParameters = () => [];
SwipeAction.propDecorators = {
    leftBtnRef: [{ type: ViewChild, args: ['leftBtnRef',] }],
    rightBtnRef: [{ type: ViewChild, args: ['rightBtnRef',] }],
    content: [{ type: ViewChild, args: ['contentRef',] }],
    cover: [{ type: ViewChild, args: ['coverRef',] }],
    left: [{ type: Input }],
    right: [{ type: Input }],
    autoClose: [{ type: Input }],
    disabled: [{ type: Input }],
    onOpen: [{ type: Output }],
    onClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SwipeAction.prototype.prefixCls;
    /** @type {?} */
    SwipeAction.prototype.wrapCls;
    /** @type {?} */
    SwipeAction.prototype._swiping;
    /** @type {?} */
    SwipeAction.prototype._openedLeft;
    /** @type {?} */
    SwipeAction.prototype._openedRight;
    /** @type {?} */
    SwipeAction.prototype._btnsLeftWidth;
    /** @type {?} */
    SwipeAction.prototype._btnsRightWidth;
    /** @type {?} */
    SwipeAction.prototype._needShowLeft;
    /** @type {?} */
    SwipeAction.prototype._needShowRight;
    /** @type {?} */
    SwipeAction.prototype._startX;
    /** @type {?} */
    SwipeAction.prototype.leftBtnRef;
    /** @type {?} */
    SwipeAction.prototype.rightBtnRef;
    /** @type {?} */
    SwipeAction.prototype.content;
    /** @type {?} */
    SwipeAction.prototype.cover;
    /** @type {?} */
    SwipeAction.prototype.left;
    /** @type {?} */
    SwipeAction.prototype.right;
    /** @type {?} */
    SwipeAction.prototype.autoClose;
    /** @type {?} */
    SwipeAction.prototype.disabled;
    /** @type {?} */
    SwipeAction.prototype.onOpen;
    /** @type {?} */
    SwipeAction.prototype.onClose;
    /** @type {?} */
    SwipeAction.prototype.onCloseSwipe;
    /** @type {?} */
    SwipeAction.prototype.onTouchStart;
}

//# sourceMappingURL=data:application/json;base64,