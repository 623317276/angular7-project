/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { takeUntil } from 'rxjs/operators';
export class MenuComponent {
    /**
     * @param {?} _localeProviderService
     */
    constructor(_localeProviderService) {
        this._localeProviderService = _localeProviderService;
        this.prefixCls = 'am-menu';
        this.subMenuPrefixCls = 'am-sub-menu';
        this.radioPrefixCls = 'am-radio';
        this.multiSelectMenuBtnsCls = 'am-multi-select-btns';
        this.menuSelectContanerPrefixCls = 'am-menu-select-container';
        this.locale = {};
        this._data = [];
        this._unsubscribe$ = new Subject();
        this.level = 2;
        this.value = [];
        this.height = document.documentElement.clientHeight / 2;
        this.multiSelect = false;
        this.onChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onCancel = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        this.initData();
    }
    /**
     * @return {?}
     */
    onMenuOk() {
        this.onOk.emit(this.value);
    }
    /**
     * @return {?}
     */
    onMenuCancel() {
        this.onCancel.emit();
    }
    /**
     * @return {?}
     */
    getNewFsv() {
        /** @type {?} */
        let firstValue = '';
        if (this.value && this.value.length) {
            firstValue = /** @type {?} */ (this.value[0]);
        }
        else if (this._data && this._data.length && !this._data[0].isLeaf) {
            firstValue = this._data[0].value;
        }
        return firstValue;
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onClickFirstLevelItem(dataItem) {
        this.firstLevelSelectValue = dataItem.value;
        if (dataItem.isLeaf && this.onChange) {
            this.onChange.emit([dataItem.value]);
        }
        this.initData();
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onClickSubMenuItem(dataItem) {
        this.value = this.getSelectValue(dataItem);
        this.initData();
        setTimeout(() => {
            this.onChange.emit(this.value);
        }, 300);
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    getSelectValue(dataItem) {
        if (this.multiSelect) {
            if (this.value && this.value.length > 0) {
                if (this.level === 2 && this.value[0] !== this.firstLevelSelectValue) {
                    return [this.firstLevelSelectValue, [dataItem.value]];
                }
                else {
                    if (this.level == 1) {
                        /** @type {?} */
                        const chosenValues = Array.from(this.value);
                        /** @type {?} */
                        const existIndex = chosenValues.indexOf(dataItem.value);
                        if (existIndex === -1) {
                            chosenValues.push(dataItem.value);
                        }
                        else {
                            chosenValues.splice(existIndex, 1);
                        }
                        return chosenValues;
                    }
                    else {
                        /** @type {?} */
                        const chosenValues = Array.from(this.value[1]);
                        /** @type {?} */
                        const existIndex = chosenValues.indexOf(dataItem.value);
                        if (existIndex === -1) {
                            chosenValues.push(dataItem.value);
                        }
                        else {
                            chosenValues.splice(existIndex, 1);
                        }
                        return [this.firstLevelSelectValue, chosenValues];
                    }
                }
            }
            else {
                return this.level === 2 ? [this.firstLevelSelectValue, [dataItem.value]] : [dataItem.value];
            }
        }
        return this.level === 2 ? [this.firstLevelSelectValue, dataItem.value] : [dataItem.value];
    }
    /**
     * @return {?}
     */
    initData() {
        this.subMenuData = this._data;
        if (this.level === 2) {
            /** @type {?} */
            let parent = this._data;
            if (this.firstLevelSelectValue && this.firstLevelSelectValue !== '') {
                parent = this._data.filter(dataItem => dataItem.value === this.firstLevelSelectValue);
            }
            if (parent[0] && parent[0].children && parent[0].isLeaf !== true) {
                this.subMenuData = parent[0].children;
            }
            else {
                this.subMenuData = [];
            }
        }
        /** @type {?} */
        let subValue = (this.value && this.value.length > 0 && [...this.value]) || [];
        if (this.level === 2 && subValue.length > 1) {
            subValue.shift();
            if (this.multiSelect) {
                subValue = /** @type {?} */ (subValue[0]);
            }
        }
        this.subSelInitItem = this.subMenuData.filter(dataItem => subValue.indexOf(dataItem.value) !== -1).map(item => {
            return item.value;
        });
        /** @type {?} */
        const parentValue = this.value && this.value.length > 1 && this.level === 2 ? this.value[0] : null;
        this.showSelect = true;
        if (this.level === 2 && parentValue !== this.firstLevelSelectValue) {
            this.showSelect = false;
        }
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    getClass(dataItem) {
        return this.dataItemSelected(dataItem) ? this.prefixCls + '-selected' : '';
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    dataItemSelected(dataItem) {
        return dataItem.value === this.firstLevelSelectValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(_ => {
            this.locale = this._localeProviderService.getLocaleSubObj('Menu');
        });
        this.firstLevelSelectValue = this.getNewFsv();
        this.heightStyle = {
            height: this.height + 'px'
        };
        this.initData();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    }
}
MenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'Menu, nzm-menu',
                template: "<Flex class=\"{{prefixCls}}\"\n      [ngStyle]=\"heightStyle\"\n      [direction]=\"'column'\"\n      [align]=\"'stretch'\"\n>\n  <Flex class=\"{{menuSelectContanerPrefixCls}}\" [align]=\"'start'\">\n    <FlexItem *ngIf=\"level == 2\">\n      <List role=\"tablist\">\n        <ListItem role=\"tab\"\n                  *ngFor=\"let dataItem of data, let i = index\"\n                  [className]=\"getClass(dataItem)\"\n                  (click)=\"onClickFirstLevelItem(dataItem)\"\n        >\n          {{dataItem.label}}\n        </ListItem>\n      </List>\n    </FlexItem>\n\n    <FlexItem role=\"tabpanel\" aria-hidden=\"false\" class=\"{{menuSelectContanerPrefixCls}}-submenu\">\n      <SubMenu [subMenuPrefixCls]=\"subMenuPrefixCls\"\n               [radioPrefixCls]=\"radioPrefixCls\"\n               [subMenuData]=\"subMenuData\"\n               [selItem]=\"subSelInitItem\"\n               [showSelect]=\"showSelect\"\n               [multiSelect]=\"multiSelect\"\n               (onSel)=\"onClickSubMenuItem($event)\">\n      </SubMenu>\n    </FlexItem>\n  </Flex>\n\n  <div *ngIf=\"multiSelect\" class=\"{{multiSelectMenuBtnsCls}}\">\n    <a Button\n       [className]=\"'am-multi-select-btns-btn'\"\n       [inline]=\"true\"\n       (onClick)=\"onMenuCancel()\"\n    >\n      {{locale.cancelText}}\n    </a>\n    <a Button\n       [className]=\"'am-multi-select-btns-btn'\"\n       [inline]=\"true\" [type]=\"'primary'\"\n       (onClick)=\"onMenuOk()\"\n    >\n      {{locale.okText}}\n    </a>\n  </div>\n</Flex>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
MenuComponent.ctorParameters = () => [
    { type: LocaleProviderService }
];
MenuComponent.propDecorators = {
    data: [{ type: Input }],
    level: [{ type: Input }],
    value: [{ type: Input }],
    height: [{ type: Input }],
    multiSelect: [{ type: Input }],
    onChange: [{ type: Output }],
    onOk: [{ type: Output }],
    onCancel: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MenuComponent.prototype.prefixCls;
    /** @type {?} */
    MenuComponent.prototype.subMenuPrefixCls;
    /** @type {?} */
    MenuComponent.prototype.radioPrefixCls;
    /** @type {?} */
    MenuComponent.prototype.multiSelectMenuBtnsCls;
    /** @type {?} */
    MenuComponent.prototype.menuSelectContanerPrefixCls;
    /** @type {?} */
    MenuComponent.prototype.firstLevelSelectValue;
    /** @type {?} */
    MenuComponent.prototype.heightStyle;
    /** @type {?} */
    MenuComponent.prototype.subMenuData;
    /** @type {?} */
    MenuComponent.prototype.showSelect;
    /** @type {?} */
    MenuComponent.prototype.subSelInitItem;
    /** @type {?} */
    MenuComponent.prototype.locale;
    /** @type {?} */
    MenuComponent.prototype._data;
    /** @type {?} */
    MenuComponent.prototype._unsubscribe$;
    /** @type {?} */
    MenuComponent.prototype.level;
    /** @type {?} */
    MenuComponent.prototype.value;
    /** @type {?} */
    MenuComponent.prototype.height;
    /** @type {?} */
    MenuComponent.prototype.multiSelect;
    /** @type {?} */
    MenuComponent.prototype.onChange;
    /** @type {?} */
    MenuComponent.prototype.onOk;
    /** @type {?} */
    MenuComponent.prototype.onCancel;
    /** @type {?} */
    MenuComponent.prototype._localeProviderService;
}

//# sourceMappingURL=data:application/json;base64,