/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, EventEmitter, } from '@angular/core';
export class SubMenuComponent {
    constructor() {
        this.prefixCls = 'am-sub-menu';
        this.onSel = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get subMenuPrefixCls() {
        return this._subMenuPrefixCls;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set subMenuPrefixCls(v) {
        this._subMenuPrefixCls = v;
    }
    /**
     * @return {?}
     */
    get radioPrefixCls() {
        return this._radioPrefixCls;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set radioPrefixCls(v) {
        this._radioPrefixCls = v;
    }
    /**
     * @return {?}
     */
    get subMenuData() {
        return this._subMenuData;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set subMenuData(v) {
        this._subMenuData = v;
    }
    /**
     * @return {?}
     */
    get showSelect() {
        return this._showSelect;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set showSelect(v) {
        this._showSelect = v;
    }
    /**
     * @return {?}
     */
    get selItem() {
        return this._selItem;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set selItem(v) {
        this._selItem = v;
    }
    /**
     * @return {?}
     */
    get multiSelect() {
        return this._multiSelect;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set multiSelect(v) {
        this._multiSelect = v;
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onClick(dataItem) {
        this.onSel.emit(dataItem);
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    selected(dataItem) {
        return this._showSelect && (this._selItem.length > 0 && this._selItem.indexOf(dataItem.value) !== -1);
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    getClass(dataItem) {
        /** @type {?} */
        let name = this._radioPrefixCls + '-item ';
        name += this.selected(dataItem) ? this._subMenuPrefixCls + '-item-selected' : '';
        name += dataItem.disabled ? this._subMenuPrefixCls + '-item-disabled' : '';
        return name;
    }
}
SubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'SubMenu, nzm-sub-menu',
                template: "<List class=\"{{subMenuPrefixCls}}\" style=\"padding: 0\">\n  <ListItem *ngFor=\"let dataItem of subMenuData; let i = index;\"\n            key=\"i\"\n            [className]=\"getClass(dataItem)\"\n            [extra]=\"extra\"\n  >\n    {{dataItem.label}}\n\n    <ng-template #extra>\n      <label Radio\n             *ngIf=\"!multiSelect\"\n             [checked]=\"selected(dataItem)\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n      <label Checkbox\n             *ngIf=\"multiSelect\"\n             [checked]=\"selected(dataItem)\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n    </ng-template>\n  </ListItem>\n</List>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SubMenuComponent.ctorParameters = () => [];
SubMenuComponent.propDecorators = {
    onSel: [{ type: Output }],
    subMenuPrefixCls: [{ type: Input }],
    radioPrefixCls: [{ type: Input }],
    subMenuData: [{ type: Input }],
    showSelect: [{ type: Input }],
    selItem: [{ type: Input }],
    multiSelect: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SubMenuComponent.prototype.prefixCls;
    /** @type {?} */
    SubMenuComponent.prototype._subMenuPrefixCls;
    /** @type {?} */
    SubMenuComponent.prototype._radioPrefixCls;
    /** @type {?} */
    SubMenuComponent.prototype._subMenuData;
    /** @type {?} */
    SubMenuComponent.prototype._showSelect;
    /** @type {?} */
    SubMenuComponent.prototype._selItem;
    /** @type {?} */
    SubMenuComponent.prototype._multiSelect;
    /** @type {?} */
    SubMenuComponent.prototype.onSel;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJtZW51L3N1Yi1tZW51L3N1Yi1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEdBQ2IsTUFBTSxlQUFlLENBQUM7QUFPdkIsTUFBTTtJQXdESjt5QkF2RFksYUFBYTtxQkFVRSxJQUFJLFlBQVksRUFBTztLQTZDbEM7Ozs7SUEzQ2hCLElBQ0ksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0tBQy9COzs7OztJQUNELElBQUksZ0JBQWdCLENBQUMsQ0FBUztRQUM1QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0tBQzVCOzs7O0lBQ0QsSUFDSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztLQUM3Qjs7Ozs7SUFDRCxJQUFJLGNBQWMsQ0FBQyxDQUFTO1FBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0tBQzFCOzs7O0lBQ0QsSUFDSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQzFCOzs7OztJQUNELElBQUksV0FBVyxDQUFDLENBQU07UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDdkI7Ozs7SUFDRCxJQUNJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDekI7Ozs7O0lBQ0QsSUFBSSxVQUFVLENBQUMsQ0FBVTtRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUN0Qjs7OztJQUNELElBQ0ksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUN0Qjs7Ozs7SUFDRCxJQUFJLE9BQU8sQ0FBQyxDQUFNO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0tBQ25COzs7O0lBQ0QsSUFDSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQzFCOzs7OztJQUNELElBQUksV0FBVyxDQUFDLENBQVU7UUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7S0FDdkI7Ozs7O0lBSUQsT0FBTyxDQUFDLFFBQVE7UUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMzQjs7Ozs7SUFFRCxRQUFRLENBQUMsUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2Rzs7Ozs7SUFFRCxRQUFRLENBQUMsUUFBUTs7UUFDZixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztRQUMzQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakYsSUFBSSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzNFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7OztZQTVFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsdXhCQUF3QztnQkFDeEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7Ozs7O29CQVdFLE1BQU07K0JBR04sS0FBSzs2QkFPTCxLQUFLOzBCQU9MLEtBQUs7eUJBT0wsS0FBSztzQkFPTCxLQUFLOzBCQU9MLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdTdWJNZW51LCBuem0tc3ViLW1lbnUnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3ViLW1lbnUuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBTdWJNZW51Q29tcG9uZW50IHtcbiAgcHJlZml4Q2xzID0gJ2FtLXN1Yi1tZW51JztcblxuICBwcml2YXRlIF9zdWJNZW51UHJlZml4Q2xzOiBzdHJpbmc7XG4gIHByaXZhdGUgX3JhZGlvUHJlZml4Q2xzOiBzdHJpbmc7XG4gIHByaXZhdGUgX3N1Yk1lbnVEYXRhO1xuICBwcml2YXRlIF9zaG93U2VsZWN0OiBib29sZWFuO1xuICBwcml2YXRlIF9zZWxJdGVtO1xuICBwcml2YXRlIF9tdWx0aVNlbGVjdD86IGJvb2xlYW47XG5cbiAgQE91dHB1dCgpXG4gIG9uU2VsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBzdWJNZW51UHJlZml4Q2xzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N1Yk1lbnVQcmVmaXhDbHM7XG4gIH1cbiAgc2V0IHN1Yk1lbnVQcmVmaXhDbHModjogc3RyaW5nKSB7XG4gICAgdGhpcy5fc3ViTWVudVByZWZpeENscyA9IHY7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHJhZGlvUHJlZml4Q2xzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3JhZGlvUHJlZml4Q2xzO1xuICB9XG4gIHNldCByYWRpb1ByZWZpeENscyh2OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9yYWRpb1ByZWZpeENscyA9IHY7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHN1Yk1lbnVEYXRhKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1Yk1lbnVEYXRhO1xuICB9XG4gIHNldCBzdWJNZW51RGF0YSh2OiBhbnkpIHtcbiAgICB0aGlzLl9zdWJNZW51RGF0YSA9IHY7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHNob3dTZWxlY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dTZWxlY3Q7XG4gIH1cbiAgc2V0IHNob3dTZWxlY3QodjogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dTZWxlY3QgPSB2O1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBzZWxJdGVtKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbEl0ZW07XG4gIH1cbiAgc2V0IHNlbEl0ZW0odjogYW55KSB7XG4gICAgdGhpcy5fc2VsSXRlbSA9IHY7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IG11bHRpU2VsZWN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9tdWx0aVNlbGVjdDtcbiAgfVxuICBzZXQgbXVsdGlTZWxlY3QodjogYm9vbGVhbikge1xuICAgIHRoaXMuX211bHRpU2VsZWN0ID0gdjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBvbkNsaWNrKGRhdGFJdGVtKSB7XG4gICAgdGhpcy5vblNlbC5lbWl0KGRhdGFJdGVtKTtcbiAgfVxuXG4gIHNlbGVjdGVkKGRhdGFJdGVtKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dTZWxlY3QgJiYgKHRoaXMuX3NlbEl0ZW0ubGVuZ3RoID4gMCAmJiB0aGlzLl9zZWxJdGVtLmluZGV4T2YoZGF0YUl0ZW0udmFsdWUpICE9PSAtMSk7XG4gIH1cblxuICBnZXRDbGFzcyhkYXRhSXRlbSkge1xuICAgIGxldCBuYW1lID0gdGhpcy5fcmFkaW9QcmVmaXhDbHMgKyAnLWl0ZW0gJztcbiAgICBuYW1lICs9IHRoaXMuc2VsZWN0ZWQoZGF0YUl0ZW0pID8gdGhpcy5fc3ViTWVudVByZWZpeENscyArICctaXRlbS1zZWxlY3RlZCcgOiAnJztcbiAgICBuYW1lICs9IGRhdGFJdGVtLmRpc2FibGVkID8gdGhpcy5fc3ViTWVudVByZWZpeENscyArICctaXRlbS1kaXNhYmxlZCcgOiAnJztcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuIl19