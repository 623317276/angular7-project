/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, ElementRef, HostListener, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
export class Button {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.prefixCls = 'am-button';
        this.ngTemplate = false;
        this._className = '';
        this._classList = [];
        this._size = 'large';
        this._loading = false;
        this._active = false;
        this._inline = false;
        this._disabled = false;
        this._icon = '';
        this._userAgent = (/** @type {?} */ (navigator)).userAgent || (/** @type {?} */ (navigator)).vendor || (/** @type {?} */ (window)).opera;
        this.onClick = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, this.prefixCls);
        this._className = this._el.className;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * @return {?}
     */
    get inline() {
        return this._inline;
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set icon(value) {
        if (value instanceof TemplateRef) {
            this.ngTemplate = true;
            this._icon = value;
        }
        else {
            this.ngTemplate = false;
            this._icon = /** @type {?} */ (value);
            this.setClassMap();
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set className(v) {
        this._className = this._className + ' ' + v;
        this.setClassMap();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchStart(event) {
        if (this._disabled) {
            return;
        }
        this._active = true;
        this.setClassMap();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchEnd(event) {
        if (this._disabled) {
            return;
        }
        this._active = false;
        this.setClassMap();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        if (this._disabled) {
            return;
        }
        this.onClick.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isTemplateRef(value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = value;
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = value;
        if (value) {
            if (this._el.querySelector('icon')) {
                this._el.querySelector('icon').parentNode.removeChild(this._el.querySelector('icon'));
            }
        }
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set inline(value) {
        this._inline = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._el.querySelector('img')) {
            /** @type {?} */
            const amSize = this._size === 'small' ? 'am-icon-xxs' : 'am-icon-md';
            this._el.querySelector('img').setAttribute('class', `am-icon ${this.prefixCls}-icon ${amSize}`);
            this._render.addClass(this._el, `${this.prefixCls}-icon`);
        }
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this.iconType = this._loading ? 'loading' : this._icon;
        this._classList = [
            this._type && `${this.prefixCls}-${this._type}`,
            this._size === 'small' && `${this.prefixCls}-${this._size}`,
            this._disabled && `${this.prefixCls}-disabled`,
            this._loading && `${this.prefixCls}-loading`,
            this.iconType && `${this.prefixCls}-icon`,
            this._active && `${this.prefixCls}-active`,
            this._inline && `${this.prefixCls}-inline`
        ].filter(item => {
            return !!item;
        });
        this._el.className = this._className + ' ' + this._classList.join(' ');
    }
}
Button.decorators = [
    { type: Component, args: [{
                selector: '[Button], nzm-button',
                encapsulation: ViewEncapsulation.None,
                template: "<Icon *ngIf=\"!ngTemplate\"\n      class=\"{{prefixCls}}-icon\"\n      [type]=\"iconType\"\n      [size]=\"size ==='small' ? 'xxs' : 'md'\"\n></Icon>\n<ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"icon\"></ng-template>\n<ng-content select=\"img\"></ng-content>\n<div class=\"{{prefixCls}}-content\">\n  <span>\n    <ng-content></ng-content>\n  </span>\n</div>"
            }] }
];
/** @nocollapse */
Button.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
Button.propDecorators = {
    type: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    loading: [{ type: Input }],
    inline: [{ type: Input }],
    icon: [{ type: Input }],
    className: [{ type: Input }],
    onClick: [{ type: Output }],
    touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
    touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }, { type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    Button.prototype.prefixCls;
    /** @type {?} */
    Button.prototype.ngTemplate;
    /** @type {?} */
    Button.prototype.iconType;
    /** @type {?} */
    Button.prototype._el;
    /** @type {?} */
    Button.prototype._className;
    /** @type {?} */
    Button.prototype._classList;
    /** @type {?} */
    Button.prototype._type;
    /** @type {?} */
    Button.prototype._size;
    /** @type {?} */
    Button.prototype._loading;
    /** @type {?} */
    Button.prototype._active;
    /** @type {?} */
    Button.prototype._inline;
    /** @type {?} */
    Button.prototype._disabled;
    /** @type {?} */
    Button.prototype._icon;
    /** @type {?} */
    Button.prototype._userAgent;
    /** @type {?} */
    Button.prototype.onClick;
    /** @type {?} */
    Button.prototype._elementRef;
    /** @type {?} */
    Button.prototype._render;
}

//# sourceMappingURL=data:application/json;base64,