/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { ActionSheetComponent } from './action-sheet.component';
import { ActionSheetOptions } from './action-sheet-options.provider';
/** @type {?} */
const NORMAL = 'NORMAL';
/** @type {?} */
const SHARE = 'SHARE';
/**
 * @return {?}
 */
function noop() { }
export class ActionSheet {
    /**
     * @param {?} _appRef
     * @param {?} _cfr
     */
    constructor(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        ActionSheet.appRef = this._appRef;
        ActionSheet._actionSheetCompFactory = this._cfr.resolveComponentFactory(ActionSheetComponent);
    }
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    static _initConfig(config, options = {}) {
        /** @type {?} */
        const props = new ActionSheetOptions();
        /** @type {?} */
        const optionalParams = [
            'prefixCls',
            'maskClosable',
            'cancelButtonIndex',
            'destructiveButtonIndex',
            'title',
            'message',
            'className',
            'transitionName',
            'maskTransitionName',
            'options'
        ];
        config = Object.assign(options, config);
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    }
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    static _open(props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        let subject;
        ActionSheet.compRef = ActionSheet.appRef.bootstrap(factory);
        ActionSheet.instance = ActionSheet.compRef.instance;
        subject = ActionSheet.instance.subject;
        Object.assign(ActionSheet.instance, props);
        return subject;
    }
    /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    static createActionSheet(flag, config, callback) {
        /** @type {?} */
        const options = new ActionSheetOptions();
        /** @type {?} */
        const transitionName = config.transitionName ? config.transitionName : options.transitionName;
        options.transitionName = `${transitionName}-enter ${transitionName}-enter-active`;
        /** @type {?} */
        const maskTransitionName = config.maskTransitionName ? config.maskTransitionName : options.maskTransitionName;
        options.maskTransitionName = `${maskTransitionName}-enter ${maskTransitionName}-enter-active`;
        /** @type {?} */
        const props = ActionSheet._initConfig(config, options);
        Object.assign(props, { onPress: cb }, { flag: flag });
        /**
         * @param {?} index
         * @param {?=} rowIndex
         * @param {?=} event
         * @return {?}
         */
        function cb(index, rowIndex = 0, event) {
            event.stopPropagation();
            /** @type {?} */
            const res = callback(index, rowIndex);
            if (res && res.then) {
                res.then(() => {
                    ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
                });
            }
            else {
                ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
            }
        }
        return ActionSheet._open(props, ActionSheet._actionSheetCompFactory);
    }
    /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    static closeWithAnimation(transitionName, maskTransitionName) {
        ActionSheet.instance.transitionName = `${transitionName}-leave ${transitionName}-leave-active`;
        ActionSheet.instance.maskTransitionName = `${maskTransitionName}-leave ${maskTransitionName}-leave-active`;
        setTimeout(() => {
            ActionSheet.close();
        }, 200);
    }
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    static showActionSheetWithOptions(config, callback = noop) {
        ActionSheet.createActionSheet(NORMAL, config, callback);
    }
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    static showShareActionSheetWithOptions(config, callback = noop) {
        ActionSheet.createActionSheet(SHARE, config, callback);
    }
    /**
     * @return {?}
     */
    static close() {
        if (ActionSheet.compRef) {
            ActionSheet.compRef.destroy();
            ActionSheet.compRef = null;
        }
    }
}
ActionSheet.compRef = null;
ActionSheet._actionSheetCompFactory = null;
ActionSheet.appRef = null;
ActionSheet.instance = null;
ActionSheet.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActionSheet.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver }
];
if (false) {
    /** @type {?} */
    ActionSheet.compRef;
    /** @type {?} */
    ActionSheet._actionSheetCompFactory;
    /** @type {?} */
    ActionSheet.appRef;
    /** @type {?} */
    ActionSheet.instance;
    /** @type {?} */
    ActionSheet.prototype._appRef;
    /** @type {?} */
    ActionSheet.prototype._cfr;
}

//# sourceMappingURL=data:application/json;base64,