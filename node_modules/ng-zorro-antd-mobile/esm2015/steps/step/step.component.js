/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input, ElementRef, ViewEncapsulation, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class Step {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.prefixCls = 'am-steps';
        this.stepItemCls = {};
        this.isIconString = true;
        this.clsStepItem = true;
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set status(value) {
        if (value) {
            this._status = value;
            this.setClass();
        }
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this._title = value;
    }
    /**
     * @return {?}
     */
    get description() {
        return this._description;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set description(value) {
        this._description = value;
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set icon(value) {
        if (value) {
            if (typeof value !== 'string') {
                this.isIconString = false;
            }
            this._icon = value;
            this.setClass();
        }
    }
    /**
     * @return {?}
     */
    setClass() {
        this.iconCls = {
            [`${this.prefixCls}-icon`]: true
        };
        this.stepItemCls = Object.assign(this.stepItemCls, {
            [`${this.prefixCls}-item-${this.status}`]: true,
            [`${this.prefixCls}-item-custom`]: this.icon
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
Step.decorators = [
    { type: Component, args: [{
                selector: 'Step, nzm-step',
                template: "<div [ngClass]=\"stepItemCls\">\n  <div class=\"{{prefixCls}}-item-tail\">\n    {{tailContent}}\n  </div>\n  <div class=\"{{prefixCls}}-item-icon\">\n    <span *ngIf=\"!isIconString\" [ngClass]=\"iconCls\">\n      <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n    </span>\n    <span *ngIf=\"isIconString && (status=== 'error' || status==='finish' || status==='wait' )\" [ngClass]=\"iconCls\">\n      <Icon [type]=\"icon\" [size]=\"iconSize\">\n      </Icon>\n    </span>\n    <span *ngIf=\"isIconString && !(status=== 'error' || status==='finish' || status==='wait')\" [ngClass]=\"iconCls\">{{stepNumber}}\n    </span>\n  </div>\n  <div class=\"{{prefixCls}}-item-content\">\n    <div class=\"{{prefixCls}}-item-title\">\n      {{title}}\n    </div>\n    <div *ngIf=\"description\" class=\"{{prefixCls}}-item-description\">{{description}}</div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => Step),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
Step.ctorParameters = () => [
    { type: ElementRef }
];
Step.propDecorators = {
    status: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    icon: [{ type: Input }],
    clsStepItem: [{ type: HostBinding, args: ['class.am-steps-item',] }]
};
if (false) {
    /** @type {?} */
    Step.prototype.prefixCls;
    /** @type {?} */
    Step.prototype.stepItemCls;
    /** @type {?} */
    Step.prototype.iconCls;
    /** @type {?} */
    Step.prototype.tailContent;
    /** @type {?} */
    Step.prototype.stepNumber;
    /** @type {?} */
    Step.prototype.isIconString;
    /** @type {?} */
    Step.prototype._status;
    /** @type {?} */
    Step.prototype._title;
    /** @type {?} */
    Step.prototype._description;
    /** @type {?} */
    Step.prototype._icon;
    /** @type {?} */
    Step.prototype.clsStepItem;
    /** @type {?} */
    Step.prototype._el;
}
/** @enum {string} */
const StatusEnum = {
    WAIT: 'wait',
    PROCESS: 'process',
    FINISH: 'finish',
    ERROR: 'error',
};
export { StatusEnum };
/** @enum {string} */
const DirectionEnum = {
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal',
};
export { DirectionEnum };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInN0ZXBzL3N0ZXAvc3RlcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsVUFBVSxFQUNWLEtBQUssRUFDTCxVQUFVLEVBRVYsaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWNuRCxNQUFNOzs7O0lBc0RKLFlBQW9CLEdBQWU7UUFBZixRQUFHLEdBQUgsR0FBRyxDQUFZO3lCQXJEdkIsVUFBVTsyQkFDUixFQUFFOzRCQUlRLElBQUk7MkJBOENMLElBQUk7S0FFWTs7OztJQXpDdkMsSUFDSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQ3JCOzs7OztJQUNELElBQUksTUFBTSxDQUFDLEtBQWlCO1FBQzFCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO0tBQ0Y7Ozs7SUFDRCxJQUNJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7S0FDcEI7Ozs7O0lBQ0QsSUFBSSxLQUFLLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztLQUNyQjs7OztJQUNELElBQ0ksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztLQUMxQjs7Ozs7SUFDRCxJQUFJLFdBQVcsQ0FBQyxLQUFhO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0tBQzNCOzs7O0lBQ0QsSUFDSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ25COzs7OztJQUNELElBQUksSUFBSSxDQUFDLEtBQWdDO1FBQ3ZDLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO2FBQzNCO1lBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO0tBQ0Y7Ozs7SUFPRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxPQUFPLENBQUMsRUFBRSxJQUFJO1NBQ2pDLENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFDL0M7WUFDRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJO1lBQy9DLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSTtTQUM3QyxDQUNGLENBQUM7S0FDSDs7OztJQUVELFFBQVE7S0FDUDs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQix1M0JBQW9DO2dCQUNwQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUNuQyxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjthQUNGOzs7O1lBbEJDLFVBQVU7OztxQkFnQ1QsS0FBSztvQkFVTCxLQUFLOzBCQU9MLEtBQUs7bUJBT0wsS0FBSzswQkFjTCxXQUFXLFNBQUMscUJBQXFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFzQmxDLE1BQU8sTUFBTTtJQUNiLFNBQVUsU0FBUztJQUNuQixRQUFTLFFBQVE7SUFDakIsT0FBUSxPQUFPOzs7OztJQUdmLFVBQVcsVUFBVTtJQUNyQixZQUFhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uSW5pdCxcbiAgZm9yd2FyZFJlZixcbiAgSW5wdXQsXG4gIEVsZW1lbnRSZWYsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgSG9zdEJpbmRpbmdcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnU3RlcCwgbnptLXN0ZXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcC5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU3RlcCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTdGVwIGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJlZml4Q2xzID0gJ2FtLXN0ZXBzJztcbiAgc3RlcEl0ZW1DbHMgPSB7fTtcbiAgaWNvbkNsczogb2JqZWN0O1xuICB0YWlsQ29udGVudDogc3RyaW5nO1xuICBzdGVwTnVtYmVyOiBudW1iZXI7XG4gIGlzSWNvblN0cmluZzogYm9vbGVhbiA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfc3RhdHVzOiBTdGF0dXNFbnVtO1xuICBwcml2YXRlIF90aXRsZTogc3RyaW5nO1xuICBwcml2YXRlIF9kZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwcml2YXRlIF9pY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpXG4gIGdldCBzdGF0dXMoKTogU3RhdHVzRW51bSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgfVxuICBzZXQgc3RhdHVzKHZhbHVlOiBTdGF0dXNFbnVtKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9zdGF0dXMgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG4gIHNldCB0aXRsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGl0bGUgPSB2YWx1ZTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgZGVzY3JpcHRpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gIH1cbiAgc2V0IGRlc2NyaXB0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBpY29uKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9pY29uO1xuICB9XG4gIHNldCBpY29uKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmlzSWNvblN0cmluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5faWNvbiA9IHZhbHVlO1xuICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tc3RlcHMtaXRlbScpXG4gIGNsc1N0ZXBJdGVtOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZikge31cblxuICBzZXRDbGFzcygpIHtcbiAgICB0aGlzLmljb25DbHMgPSB7XG4gICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWljb25gXTogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5zdGVwSXRlbUNscyA9IE9iamVjdC5hc3NpZ24odGhpcy5zdGVwSXRlbUNscyxcbiAgICAgIHtcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1pdGVtLSR7dGhpcy5zdGF0dXN9YF06IHRydWUsXG4gICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30taXRlbS1jdXN0b21gXTogdGhpcy5pY29uXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIFN0YXR1c0VudW0ge1xuICBXQUlUID0gJ3dhaXQnLFxuICBQUk9DRVNTID0gJ3Byb2Nlc3MnLFxuICBGSU5JU0ggPSAnZmluaXNoJyxcbiAgRVJST1IgPSAnZXJyb3InXG59XG5leHBvcnQgZW51bSBEaXJlY3Rpb25FbnVtIHtcbiAgVkVSVElDQUwgPSAndmVydGljYWwnLFxuICBIT1JJWk9OVEFMID0gJ2hvcml6b250YWwnXG59XG4iXX0=