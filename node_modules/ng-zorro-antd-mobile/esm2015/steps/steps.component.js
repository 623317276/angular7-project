/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { StatusEnum, DirectionEnum } from './step/step.component';
import { Step } from './step/step.component';
export class Steps {
    /**
     * @param {?} _elf
     * @param {?} _render
     */
    constructor(_elf, _render) {
        this._elf = _elf;
        this._render = _render;
        this.prefixCls = 'am-steps';
        this._current = 0;
        this._status = StatusEnum.PROCESS;
        this._direction = DirectionEnum.VERTICAL;
        this.clsSteps = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set current(value) {
        if (value >= 0) {
            this._current = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this.setCls();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set status(value) {
        this._status = value;
        if (this.stepItems) {
            this.setStepStyle();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set direction(value) {
        this._direction = value;
        this.setCls();
    }
    /**
     * @return {?}
     */
    setStepStyle() {
        /** @type {?} */
        const itemCount = this.stepItems.length;
        /** @type {?} */
        const itemArr = this.stepItems['_results'];
        for (let index = 0; index < itemCount; index++) {
            /** @type {?} */
            const step = itemArr[index];
            step.stepNumber = index + 1;
            if (index < itemCount - 1 && itemArr[index + 1].status === StatusEnum.ERROR) {
                step.stepItemCls = step.stepItemCls
                    ? Object.assign(step.stepItemCls, { 'error-tail': true })
                    : { 'error-tail': true };
            }
            /** @type {?} */
            let icon = step.icon;
            if (!step.status) {
                if (index === this._current) {
                    step.status = this._status;
                }
                else if (index < this._current) {
                    step.status = StatusEnum.FINISH;
                }
                else {
                    step.status = StatusEnum.WAIT;
                }
            }
            if (!icon) {
                if (index < this._current) {
                    icon = 'check-circle-o';
                }
                else if (index > this._current) {
                    icon = 'ellipsis';
                    step.stepItemCls = step.stepItemCls
                        ? Object.assign(step.stepItemCls, { 'ellipsis-item': true })
                        : { 'ellipsis-item': true };
                }
                if ((this._status === StatusEnum.ERROR && index === this._current) || step.status === StatusEnum.ERROR) {
                    icon = 'cross-circle-o';
                }
            }
            step.icon = icon;
            step.iconSize = this._size === 'small' ? (this._status === StatusEnum.WAIT ? 'xxs' : 'xs') : 'md';
            step.setClass();
        }
    }
    /**
     * @return {?}
     */
    setCls() {
        if (this._direction === DirectionEnum.HORIZONTAL) {
            this.clsStepsLabelVtl = true;
            this.clsStepsHztl = true;
            this.clsStepsVtl = false;
        }
        else if (this._direction === DirectionEnum.VERTICAL) {
            this.clsStepsVtl = true;
            this.clsStepsHztl = false;
        }
        if (this._size === 'small') {
            this.clsStepsSmall = true;
        }
        else {
            this.clsStepsSmall = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setCls();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(() => {
            this.setStepStyle();
        }, 0);
    }
}
Steps.decorators = [
    { type: Component, args: [{
                selector: 'Steps,nzm-steps',
                template: "<ng-content></ng-content>"
            }] }
];
/** @nocollapse */
Steps.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
Steps.propDecorators = {
    stepItems: [{ type: ContentChildren, args: [Step,] }],
    current: [{ type: Input }],
    size: [{ type: Input }],
    status: [{ type: Input }],
    direction: [{ type: Input }],
    clsSteps: [{ type: HostBinding, args: ['class.am-steps',] }],
    clsStepsSmall: [{ type: HostBinding, args: ['class.am-steps-small',] }],
    clsStepsLabelVtl: [{ type: HostBinding, args: ['class.am-steps-label-vertical',] }],
    clsStepsVtl: [{ type: HostBinding, args: ['class.am-steps-vertical',] }],
    clsStepsHztl: [{ type: HostBinding, args: ['class.am-steps-horizontal',] }]
};
if (false) {
    /** @type {?} */
    Steps.prototype.prefixCls;
    /** @type {?} */
    Steps.prototype._current;
    /** @type {?} */
    Steps.prototype._size;
    /** @type {?} */
    Steps.prototype._status;
    /** @type {?} */
    Steps.prototype._direction;
    /** @type {?} */
    Steps.prototype._stepsCls;
    /** @type {?} */
    Steps.prototype.stepItems;
    /** @type {?} */
    Steps.prototype.clsSteps;
    /** @type {?} */
    Steps.prototype.clsStepsSmall;
    /** @type {?} */
    Steps.prototype.clsStepsLabelVtl;
    /** @type {?} */
    Steps.prototype.clsStepsVtl;
    /** @type {?} */
    Steps.prototype.clsStepsHztl;
    /** @type {?} */
    Steps.prototype._elf;
    /** @type {?} */
    Steps.prototype._render;
}

//# sourceMappingURL=data:application/json;base64,