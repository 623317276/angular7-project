/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, HostBinding } from '@angular/core';
export class Range {
    /**
     * @param {?} _elf
     */
    constructor(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.offset = [];
        this.length = [];
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._defaultValue = [0, 0, 0];
        this._disabled = false;
        this._marks = {};
        this._dots = false;
        this._included = true;
        this._count = 1;
        this._allowCross = true;
        this._handleStyle = [];
        this._trackStyle = [];
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.amWrapper = true;
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = value;
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = value;
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        this._defaultValue = value;
        this._value = this._defaultValue;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get marks() {
        return this._marks;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set marks(value) {
        this._marks = value;
    }
    /**
     * @return {?}
     */
    get dots() {
        return this._dots;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dots(value) {
        this._dots = value;
    }
    /**
     * @return {?}
     */
    get included() {
        return this._included;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set count(value) {
        this._count = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowCross(value) {
        this._allowCross = value;
        this.setValueBound();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pushable(value) {
        this._pushable = value;
        if (this.verifyPushable()) {
            this.setValueBound();
        }
    }
    /**
     * @return {?}
     */
    get handleStyle() {
        return this._handleStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set handleStyle(value) {
        this._handleStyle = value;
    }
    /**
     * @return {?}
     */
    get trackStyle() {
        return this._trackStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set trackStyle(value) {
        this._trackStyle = value;
    }
    /**
     * @return {?}
     */
    get railStyle() {
        return this._railStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set railStyle(value) {
        this._railStyle = value;
    }
    /**
     * @return {?}
     */
    setCls() {
        this.sliderCls = {
            [`${this.prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    initialValue() {
        /** @type {?} */
        const minTemp = this._min;
        /** @type {?} */
        const initialValue = Array.apply(null, Array(this._count + 1)).map(function () {
            return minTemp;
        });
        this._defaultValue = this._defaultValue !== undefined ? this._defaultValue : initialValue;
        this._value = this._value !== undefined ? this._value : this._defaultValue;
        if (this._count > 0) {
            this.upperBound = Math.max(...this._value);
            this.lowerBound = Math.min(...this._value);
        }
    }
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    handleChange(e, i) {
        /** @type {?} */
        let temp = [...this._value];
        if (typeof this._pushable === 'boolean' && this._pushable) {
            /** @type {?} */
            const diff = e - this._value[i];
            temp = temp.map(v => (v = v + diff));
        }
        else {
            temp[i] = e;
        }
        this.upperBound = Math.max(...temp);
        this.lowerBound = Math.min(...temp);
        this.setTrackStyle(temp);
        this.onChange.emit(temp);
    }
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    handleAfterChange(e, i) {
        setTimeout(() => {
            this._value[i] = e;
            this.upperBound = Math.max(...this._value);
            this.lowerBound = Math.min(...this._value);
            this.setTrackStyle(this._value);
            this.onAfterChange.emit(this._value);
            this.setValueBound();
        }, 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setTrackStyle(value) {
        if (value && value.length === this._count + 1) {
            value.sort((a, b) => a - b);
            for (let i = 0; i < this._count; i++) {
                this.offset[i] = (value[i] * 100) / (this._max - this._min);
                this.length[i] = ((value[i + 1] - value[i]) * 100) / (this._max - this._min);
            }
        }
    }
    /**
     * @return {?}
     */
    setValueBound() {
        this.maxBound = [];
        this.minBound = [];
        if (this._allowCross || this._handleCount <= 1) {
            for (let i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = this._max;
                this.minBound[i] = this._min;
            }
        }
        else {
            if (typeof this._pushable !== 'number' || (typeof this._pushable === 'boolean' && this._pushable)) {
                this._pushable = 0;
            }
            for (let i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = i === this._handleCount - 1 ? this._max : this._value[i + 1] - this._pushable;
                this.minBound[i] = i === 0 ? this._min : this._value[i - 1] + this._pushable;
            }
        }
    }
    /**
     * @return {?}
     */
    verifyPushable() {
        if (typeof this._pushable === 'number') {
            for (let i = 1; i < this._handleCount; i++) {
                /** @type {?} */
                const diff = this._value[i] - this._value[i - 1];
                if (diff < this._pushable) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._max === undefined || this._min === undefined) {
            return;
        }
        if (this.verifyPushable()) {
            this.setValueBound();
            this._handleCount = this._count + 1;
            this.setCls();
            /** @type {?} */
            const sliderCoords = this._elf.nativeElement.getElementsByClassName('am-slider')[0].getBoundingClientRect();
            this.sliderLength = sliderCoords.width;
            this.sliderStart = sliderCoords.left;
            this.initialValue();
        }
    }
}
Range.decorators = [
    { type: Component, args: [{
                selector: 'Range , nzm-range',
                template: "<div class=\"am-slider\" [ngClass]=\"sliderCls\">\n  <div class=\"am-slider-rail\" [ngStyle]=\"railStyle\"></div>\n  <SliderTrack *ngFor=\"let off of offset ; let i = index\"\n               [className]=\"'am-slider-track'\"\n               [included]=\"included\"\n               [style]=\"trackStyle[i]\"\n               [offset]=\"off\"\n               [length]=\"length[i]\"\n  ></SliderTrack>\n  <SliderSteps [max]=\"max\"\n               [min]=\"min\"\n               [dots]=\"dots\"\n               [step]=\"step\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderSteps>\n  <SliderHandle *ngFor=\"let val of value ; let i = index\"\n                [max]=\"max\"\n                [min]=\"min\"\n                [maxBound]=\"maxBound[i]\"\n                [minBound]=\"minBound[i]\"\n                [value]=\"val\"\n                [step]=\"step\"\n                [disabled]=\"disabled\"\n                [sliderLength]=\"sliderLength\"\n                [sliderStart]=\"sliderStart\"\n                [handleStyle]=\"handleStyle[i]\"\n                (onChange)=\"handleChange($event , i)\"\n                (onAfterChange)=\"handleAfterChange($event , i)\"\n  ></SliderHandle>\n  <SliderMarks [max]=\"max\"\n               [min]=\"min\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderMarks>\n</div>\n"
            }] }
];
/** @nocollapse */
Range.ctorParameters = () => [
    { type: ElementRef }
];
Range.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    defaultValue: [{ type: Input }],
    disabled: [{ type: Input }],
    marks: [{ type: Input }],
    dots: [{ type: Input }],
    included: [{ type: Input }],
    count: [{ type: Input }],
    allowCross: [{ type: Input }],
    pushable: [{ type: Input }],
    handleStyle: [{ type: Input }],
    trackStyle: [{ type: Input }],
    railStyle: [{ type: Input }],
    onChange: [{ type: Output }],
    onAfterChange: [{ type: Output }],
    amWrapper: [{ type: HostBinding, args: ['class.am-slider-wrapper',] }]
};
if (false) {
    /** @type {?} */
    Range.prototype.prefixCls;
    /** @type {?} */
    Range.prototype.offset;
    /** @type {?} */
    Range.prototype.length;
    /** @type {?} */
    Range.prototype.upperBound;
    /** @type {?} */
    Range.prototype.lowerBound;
    /** @type {?} */
    Range.prototype.maxBound;
    /** @type {?} */
    Range.prototype.minBound;
    /** @type {?} */
    Range.prototype.sliderCls;
    /** @type {?} */
    Range.prototype.sliderLength;
    /** @type {?} */
    Range.prototype.sliderStart;
    /** @type {?} */
    Range.prototype._min;
    /** @type {?} */
    Range.prototype._max;
    /** @type {?} */
    Range.prototype._step;
    /** @type {?} */
    Range.prototype._value;
    /** @type {?} */
    Range.prototype._defaultValue;
    /** @type {?} */
    Range.prototype._disabled;
    /** @type {?} */
    Range.prototype._marks;
    /** @type {?} */
    Range.prototype._dots;
    /** @type {?} */
    Range.prototype._included;
    /** @type {?} */
    Range.prototype._count;
    /** @type {?} */
    Range.prototype._allowCross;
    /** @type {?} */
    Range.prototype._pushable;
    /** @type {?} */
    Range.prototype._handleStyle;
    /** @type {?} */
    Range.prototype._trackStyle;
    /** @type {?} */
    Range.prototype._railStyle;
    /** @type {?} */
    Range.prototype._handleCount;
    /** @type {?} */
    Range.prototype.onChange;
    /** @type {?} */
    Range.prototype.onAfterChange;
    /** @type {?} */
    Range.prototype.amWrapper;
    /** @type {?} */
    Range.prototype._elf;
}

//# sourceMappingURL=data:application/json;base64,