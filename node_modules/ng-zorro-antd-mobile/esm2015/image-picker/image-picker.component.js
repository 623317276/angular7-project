/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ViewContainerRef } from '@angular/core';
/**
 * @record
 */
export function ElementType() { }
/** @type {?} */
ElementType.prototype.type;
/** @type {?} */
ElementType.prototype.backgroundImage;
/** @type {?} */
ElementType.prototype.transform;
export class ImagePicker {
    constructor() {
        this.prefixCls = 'am-image-picker';
        this.flexEl = [];
        this._accept = 'image/*';
        this._count = 4;
        this._selectable = true;
        this._files = [];
        this._multiple = false;
        this.onFail = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onImageClick = new EventEmitter();
        this.onAddImageClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get files() {
        return this._files;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set files(value) {
        this._files = value;
        this.sortItem();
    }
    /**
     * @return {?}
     */
    get accept() {
        return this._accept;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set accept(value) {
        this._accept = value;
        this.sortItem();
    }
    /**
     * @return {?}
     */
    get length() {
        return this._count;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set length(value) {
        if (value > 0) {
            this._count = value;
        }
        else {
            this._count = 4;
        }
        this.sortItem();
    }
    /**
     * @return {?}
     */
    get multiple() {
        return this._multiple;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiple(value) {
        this._multiple = value;
        this.sortItem();
    }
    /**
     * @return {?}
     */
    get selectable() {
        return this._selectable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectable(value) {
        this._selectable = value;
        this.sortItem();
    }
    /**
     * @return {?}
     */
    sortItem() {
        if (!this._files) {
            return;
        }
        /** @type {?} */
        let count = parseInt('' + this._count, 10);
        if (count <= 0) {
            count = 4;
        }
        /** @type {?} */
        let allEl = this._files.map(item => {
            return {
                type: 'img',
                backgroundImage: 'url(' + item.url + ')',
                transform: 'rotate(' + this.getRotation(item.orientation) + ')deg'
            };
        });
        if (this._selectable) {
            allEl.push({
                type: 'select',
                backgroundImage: '',
                transform: ''
            });
        }
        /** @type {?} */
        const length = allEl.length;
        if (length !== 0 && length % count !== 0) {
            /** @type {?} */
            const blankCount = count - (length % count);
            /** @type {?} */
            const fillBlankEl = [];
            for (let i = 0; i < blankCount; i++) {
                fillBlankEl.push({
                    type: 'white',
                    backgroundImage: '',
                    transform: ''
                });
            }
            allEl = allEl.concat(fillBlankEl);
        }
        this.flexEl = [];
        for (let i = 0; i < allEl.length / count; i++) {
            /** @type {?} */
            const rowEl = allEl.slice(i * count, i * count + count);
            this.flexEl.push(rowEl);
        }
    }
    /**
     * @param {?} imgItem
     * @return {?}
     */
    addImage(imgItem) {
        this._files.push({
            type: 'img',
            url: imgItem.url,
            orientation: imgItem.orientation
        });
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'add',
            index: this._files.length - 1
        });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeImage(index) {
        this._files.splice(index, 1);
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'remove',
            index: index
        });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    imageClick(index) {
        this.onImageClick.emit({
            index: index,
            files: this._files
        });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    addImageClick(e) {
        this.onAddImageClick.emit(e);
    }
    /**
     * @param {?} file
     * @param {?} index
     * @return {?}
     */
    parseFile(file, index) {
        /** @type {?} */
        const reader = new FileReader();
        reader.onload = e => {
            /** @type {?} */
            const dataURL = (/** @type {?} */ (e.target)).result;
            if (!dataURL) {
                this.onFail.emit(`Fail to get the ${index} image`);
                return;
            }
            /** @type {?} */
            let orientation = 1;
            this.getOrientation(file, res => {
                // -2: not jpeg , -1: not defined
                if (res > 0) {
                    orientation = res;
                }
                this.addImage({
                    url: dataURL,
                    orientation,
                    file
                });
            });
        };
        reader.readAsDataURL(file);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fileChange(event) {
        /** @type {?} */
        const fileList = event.target.files;
        if (fileList && fileList.length) {
            for (let i = 0; i < fileList.length; i++) {
                this.parseFile(fileList[i], i);
            }
        }
    }
    /**
     * @param {?=} orientation
     * @return {?}
     */
    getRotation(orientation = 1) {
        /** @type {?} */
        let imgRotation = 0;
        switch (orientation) {
            case 3:
                imgRotation = 180;
                break;
            case 6:
                imgRotation = 90;
                break;
            case 8:
                imgRotation = 270;
                break;
            default:
        }
        return imgRotation;
    }
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    getOrientation(file, callback) {
        /** @type {?} */
        const reader = new FileReader();
        reader.onload = e => {
            /** @type {?} */
            const view = new DataView((/** @type {?} */ (e.target)).result);
            if (view.getUint16(0, false) !== 0xffd8) {
                return callback(-2);
            }
            /** @type {?} */
            const length = view.byteLength;
            /** @type {?} */
            let offset = 2;
            while (offset < length) {
                /** @type {?} */
                const marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 0xffe1) {
                    /** @type {?} */
                    const tmp = view.getUint32((offset += 2), false);
                    if (tmp !== 0x45786966) {
                        return callback(-1);
                    }
                    /** @type {?} */
                    const little = view.getUint16((offset += 6), false) === 0x4949;
                    offset += view.getUint32(offset + 4, little);
                    /** @type {?} */
                    const tags = view.getUint16(offset, little);
                    offset += 2;
                    for (let i = 0; i < tags; i++) {
                        if (view.getUint16(offset + i * 12, little) === 0x0112) {
                            return callback(view.getUint16(offset + i * 12 + 8, little));
                        }
                    }
                }
                else if ((marker & 0xff00) !== 0xff00) {
                    break;
                }
                else {
                    offset += view.getUint16(offset, false);
                }
            }
            return callback(-1);
        };
        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));
    }
}
ImagePicker.decorators = [
    { type: Component, args: [{
                selector: 'ImagePicker, nzm-image-picker',
                template: "<div class=\"{{prefixCls}}-list\" role=\"group\">\n  <Flex *ngFor=\"let rowItem of flexEl;let i = index;\">\n    <FlexItem *ngFor=\"let item of rowItem;let j =index;\">\n      <div *ngIf=\"item && 'img' === item.type && item.backgroundImage\" class=\"{{prefixCls}}-item\">\n        <div role=\"button\"\n             aria-label=\"Click and Remove this image\"\n             class=\"{{prefixCls}}-item-remove\"\n             (click)=\"removeImage(i * length + j)\"\n        ></div>\n        <div role=\"button\"\n             aria-label=\"Image can be clicked\"\n             class=\"{{prefixCls}}-item-content\"\n             [ngStyle]=\"{'background-image': item.backgroundImage, 'transform': item.transform}\"\n             (click)=\"imageClick(i * length + j)\"\n        ></div>\n      </div>\n      <div role=\"button\"\n           aria-label=\"Choose and add image\"\n           *ngIf=\"item && 'select' === item.type\"\n           class=\"{{prefixCls}}-item {{prefixCls}}-upload-btn\"\n           (click)=\"addImageClick($event)\"\n      >\n        <input #fileSelectorInput\n               type=\"file\"\n               [accept]=\"accept\"\n               [multiple]=\"multiple\"\n               (change)=\"fileChange($event)\"\n        />\n      </div>\n      <div *ngIf=\"item && 'white' === item.type\" class=\"{{prefixCls}}-item-white\">\n      </div>\n    </FlexItem>\n  </Flex>\n</div>\n"
            }] }
];
/** @nocollapse */
ImagePicker.ctorParameters = () => [];
ImagePicker.propDecorators = {
    _fileSelectorInput: [{ type: ViewChild, args: ['fileSelectorInput', { read: ViewContainerRef },] }],
    files: [{ type: Input }],
    accept: [{ type: Input }],
    length: [{ type: Input }],
    multiple: [{ type: Input }],
    selectable: [{ type: Input }],
    onFail: [{ type: Output }],
    onChange: [{ type: Output }],
    onImageClick: [{ type: Output }],
    onAddImageClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ImagePicker.prototype.prefixCls;
    /** @type {?} */
    ImagePicker.prototype.flexEl;
    /** @type {?} */
    ImagePicker.prototype._accept;
    /** @type {?} */
    ImagePicker.prototype._count;
    /** @type {?} */
    ImagePicker.prototype._selectable;
    /** @type {?} */
    ImagePicker.prototype._files;
    /** @type {?} */
    ImagePicker.prototype._multiple;
    /** @type {?} */
    ImagePicker.prototype._fileSelectorInput;
    /** @type {?} */
    ImagePicker.prototype.onFail;
    /** @type {?} */
    ImagePicker.prototype.onChange;
    /** @type {?} */
    ImagePicker.prototype.onImageClick;
    /** @type {?} */
    ImagePicker.prototype.onAddImageClick;
}

//# sourceMappingURL=data:application/json;base64,