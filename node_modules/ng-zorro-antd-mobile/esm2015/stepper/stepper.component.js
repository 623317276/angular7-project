/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
export class Stepper {
    constructor() {
        this.prefixCls = 'am-stepper';
        this._max = Infinity;
        this._min = -Infinity;
        this._step = 1;
        this._disabled = false;
        this._readOnly = false;
        this._showNumber = false;
        this._upDisabled = false;
        this._downDisabled = false;
        this._isUpClick = false;
        this._isDownClick = false;
        this.onChange = new EventEmitter();
        this.clsStepper = true;
        this.clsStpDisabled = this._disabled;
        this.clsShowNum = this._showNumber;
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = value;
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this._value = v;
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultValue(value) {
        if (value) {
            this._defaultValue = value;
            this._value = value;
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        if (value) {
            this._disabled = true;
            this._downDisabled = true;
            this._upDisabled = true;
        }
        this.clsStpDisabled = value;
    }
    /**
     * @return {?}
     */
    get readOnly() {
        return this._readOnly;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set readOnly(value) {
        this._readOnly = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showNumber(value) {
        this._showNumber = value;
        this.clsShowNum = value;
    }
    /**
     * @return {?}
     */
    onIncrease() {
        if (!this._upDisabled) {
            this._value = this._value + this._step;
            this.onChange.emit(this._value);
            if (this._value + this._step > this._max) {
                this._upDisabled = true;
            }
            if (this._value - this._step >= this._min) {
                this._downDisabled = false;
            }
            this._isUpClick = true;
            this.setCls();
            setTimeout(() => {
                this._isUpClick = false;
                this.setCls();
            }, 100);
        }
    }
    /**
     * @return {?}
     */
    onDecrease() {
        if (!this._downDisabled) {
            this._value = this._value - this._step;
            this.onChange.emit(this._value);
            if (this._value - this._step < this._min) {
                this._downDisabled = true;
            }
            if (this._value + this._step <= this._max) {
                this._upDisabled = false;
            }
            this._isDownClick = true;
            this.setCls();
            setTimeout(() => {
                this._isDownClick = false;
                this.setCls();
            }, 100);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    inputChange(event) {
        /** @type {?} */
        const value = event.target.value;
        this._value = value ? parseInt(value, null) : 0;
        if (value < this._min) {
            this._value = this._min;
        }
        if (value > this._max) {
            this._value = this._max;
        }
        this.onChange.emit(this._value);
    }
    /**
     * @return {?}
     */
    setCls() {
        this.upDisableCls = {
            [`${this.prefixCls}-handler-up-disabled`]: this._upDisabled,
            [`${this.prefixCls}-handler-active`]: this._isUpClick
        };
        this.downDisableCls = {
            [`${this.prefixCls}-handler-down-disabled`]: this._downDisabled,
            [`${this.prefixCls}-handler-active`]: this._isDownClick
        };
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this._value + this._step > this._max) {
            this._upDisabled = true;
        }
        if (this._value - this._step < this._min) {
            this._downDisabled = true;
        }
        this.setCls();
    }
}
Stepper.decorators = [
    { type: Component, args: [{
                selector: 'Stepper , nzm-stepper',
                template: "<div class=\"{{prefixCls}}-handler-wrap\">\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-up\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"upDisableCls\"\n          (click)=\"onIncrease()\">\n          <Icon [type]=\"'plus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-down\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"downDisableCls\"\n          (click)=\"onDecrease()\">\n          <Icon [type]=\"'minus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n</div>\n<div class=\"{{prefixCls}}-input-wrap\">\n    <input class=\"{{prefixCls}}-input\"\n           style=\"outline:none\"\n           [disabled]=\"disabled\"\n           [readonly]=\"readOnly\"\n           [autocomplete]=\"'off'\"\n           [max]=\"max\"\n           [min]=\"min\"\n           [(ngModel)]=\"value\"\n           (change)=\"inputChange($event)\">\n</div>"
            }] }
];
/** @nocollapse */
Stepper.ctorParameters = () => [];
Stepper.propDecorators = {
    max: [{ type: Input }],
    min: [{ type: Input }],
    value: [{ type: Input }],
    step: [{ type: Input }],
    defaultValue: [{ type: Input }],
    disabled: [{ type: Input }],
    readOnly: [{ type: Input }],
    showNumber: [{ type: Input }],
    onChange: [{ type: Output }],
    clsStepper: [{ type: HostBinding, args: ['class.am-stepper',] }],
    clsStpDisabled: [{ type: HostBinding, args: ['class.am-stepper-disabled',] }],
    clsShowNum: [{ type: HostBinding, args: ['class.showNumber',] }]
};
if (false) {
    /** @type {?} */
    Stepper.prototype.prefixCls;
    /** @type {?} */
    Stepper.prototype.upDisableCls;
    /** @type {?} */
    Stepper.prototype.downDisableCls;
    /** @type {?} */
    Stepper.prototype.stepperCls;
    /** @type {?} */
    Stepper.prototype._max;
    /** @type {?} */
    Stepper.prototype._min;
    /** @type {?} */
    Stepper.prototype._value;
    /** @type {?} */
    Stepper.prototype._step;
    /** @type {?} */
    Stepper.prototype._defaultValue;
    /** @type {?} */
    Stepper.prototype._disabled;
    /** @type {?} */
    Stepper.prototype._readOnly;
    /** @type {?} */
    Stepper.prototype._showNumber;
    /** @type {?} */
    Stepper.prototype._upDisabled;
    /** @type {?} */
    Stepper.prototype._downDisabled;
    /** @type {?} */
    Stepper.prototype._isUpClick;
    /** @type {?} */
    Stepper.prototype._isDownClick;
    /** @type {?} */
    Stepper.prototype.onChange;
    /** @type {?} */
    Stepper.prototype.clsStepper;
    /** @type {?} */
    Stepper.prototype.clsStpDisabled;
    /** @type {?} */
    Stepper.prototype.clsShowNum;
}

//# sourceMappingURL=data:application/json;base64,