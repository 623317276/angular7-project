/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
/**
 * @record
 */
export function OnChangeEvent() { }
/** @type {?} */
OnChangeEvent.prototype.name;
/** @type {?} */
OnChangeEvent.prototype.value;
/** @type {?} */
OnChangeEvent.prototype.checked;
export class CheckboxItem {
    constructor() {
        this.prefixCls = 'am-checkbox';
        this.checked = false;
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCheckboxClick(event) {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
        if (this.onClick.observers.length > 0) {
            this.onClick.emit(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    change(event) {
        this.onChange.emit(event);
    }
}
CheckboxItem.decorators = [
    { type: Component, args: [{
                selector: 'CheckboxItem, nzm-checkbox-item',
                template: "<ListItem [className]=\"'am-checkbox-item ' + (disabled ? 'am-checkbox-item-disabled' : '')\"\n          [disabled]=\"disabled\"\n          [thumb]=\"checkbox\"\n          (onClick)=\"onCheckboxClick($event)\"\n>\n  <ng-content></ng-content>\n</ListItem>\n<ng-template #checkbox>\n  <label Checkbox\n         [name]=\"name\"\n         [value]=\"value\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         (onChange)=\"change($event)\"\n  >\n  </label>\n</ng-template>\n"
            }] }
];
/** @nocollapse */
CheckboxItem.ctorParameters = () => [];
CheckboxItem.propDecorators = {
    name: [{ type: Input }],
    value: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    onChange: [{ type: Output }],
    onClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CheckboxItem.prototype.prefixCls;
    /** @type {?} */
    CheckboxItem.prototype.name;
    /** @type {?} */
    CheckboxItem.prototype.value;
    /** @type {?} */
    CheckboxItem.prototype.checked;
    /** @type {?} */
    CheckboxItem.prototype.disabled;
    /** @type {?} */
    CheckboxItem.prototype.onChange;
    /** @type {?} */
    CheckboxItem.prototype.onClick;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNoZWNrYm94L2NoZWNrYm94LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7OztBQVl2RSxNQUFNO0lBZ0JKO3lCQWZZLGFBQWE7dUJBT04sS0FBSzt3QkFFSixLQUFLO3dCQUVkLElBQUksWUFBWSxFQUFpQjt1QkFFbEMsSUFBSSxZQUFZLEVBQUU7S0FFWjs7Ozs7SUFFaEIsZUFBZSxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDOUI7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7S0FDRjs7Ozs7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNCOzs7WUFqQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLHlmQUE2QzthQUM5Qzs7Ozs7bUJBSUUsS0FBSztvQkFFTCxLQUFLO3NCQUVMLEtBQUs7dUJBRUwsS0FBSzt1QkFFTCxNQUFNO3NCQUVOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9uQ2hhbmdlRXZlbnQge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGNoZWNrZWQ6IGJvb2xlYW47XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0NoZWNrYm94SXRlbSwgbnptLWNoZWNrYm94LWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3gtaXRlbS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hJdGVtIHtcbiAgcHJlZml4Q2xzID0gJ2FtLWNoZWNrYm94JztcblxuICBASW5wdXQoKVxuICBuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIHZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KClcbiAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpXG4gIG9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxPbkNoYW5nZUV2ZW50PigpO1xuICBAT3V0cHV0KClcbiAgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgb25DaGVja2JveENsaWNrKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgIH1cbiAgICBpZiAodGhpcy5vbkNsaWNrLm9ic2VydmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLm9uQ2xpY2suZW1pdChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KGV2ZW50KTtcbiAgfVxufVxuIl19