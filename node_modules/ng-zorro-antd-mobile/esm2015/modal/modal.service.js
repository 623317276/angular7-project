/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Compiler, ComponentFactoryResolver } from '@angular/core';
import { ModalComponent } from './modal.component';
import { BaseOptions, ModalOptions, AlertOptions } from './modal-options.provider';
export class Modal {
    /**
     * @param {?} _appRef
     * @param {?} _compiler
     * @param {?} _cfr
     */
    constructor(_appRef, _compiler, _cfr) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        Modal.appRef = this._appRef;
        Modal._modalCompFactory = this._cfr.resolveComponentFactory(ModalComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    static _initConfig(config, options) {
        /** @type {?} */
        const props = new BaseOptions();
        /** @type {?} */
        const optionalParams = [
            'visible',
            'focus',
            'closable',
            'maskClosable',
            'onClose',
            'transparent',
            'popup',
            'animationType',
            'title',
            'footer',
            'platform',
            'className',
            'wrapClassName',
            'message',
            'actions',
            'callbackOrActions',
            'type',
            'defaultValue',
            'placeholders',
            'operation',
            'transitionName',
            'maskTransitionName',
            'close'
        ];
        options.transitionName = `${options.transitionName}-enter ${options.transitionName}-enter-active`;
        options.maskTransitionName = `${options.maskTransitionName}-enter ${options.maskTransitionName}-enter-active`;
        config = Object.assign(options, config, {
            close: () => {
                if (config.maskClosable || config.closable) {
                    Modal.closeWithAnimation();
                }
            }
        });
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    }
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    static _open(props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        let subject;
        Modal.compRef = Modal.appRef.bootstrap(factory);
        Modal.instance = Modal.compRef.instance;
        subject = Modal.instance.subject;
        Object.assign(Modal.instance, props);
        return subject;
    }
    /**
     * @return {?}
     */
    static closeWithAnimation() {
        /** @type {?} */
        const options = new BaseOptions();
        Modal.instance.transitionName = `${options.transitionName}-leave ${options.transitionName}-leave-active`;
        Modal.instance.maskTransitionName = `${options.maskTransitionName}-leave ${options.maskTransitionName}-leave-active`;
        setTimeout(() => {
            Modal.close();
        }, 200);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static open(config) {
        /** @type {?} */
        const options = new ModalOptions();
        /** @type {?} */
        const props = Modal._initConfig(config, options);
        return Modal._open(props, Modal._modalCompFactory);
    }
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    static alert(title, message, actions, platform) {
        /** @type {?} */
        const options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.platform = 'ios';
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            title: title,
            message: message,
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    }
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    static prompt(title, message, callbackOrActions, type, defaultValue, placeholders, platform) {
        /** @type {?} */
        const options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.className = 'am-modal-alert-content';
        options.defaultValue = defaultValue;
        options.placeholders = placeholders;
        (options.type = type ? type : 'default'), (options.platform = platform ? platform : 'ios');
        /**
         * @param {?} self
         * @param {?} func
         * @return {?}
         */
        function getArgs(self, func) {
            /** @type {?} */
            const text = self.instance.data.text || defaultValue || '';
            /** @type {?} */
            const password = self.instance.data.password || '';
            if (type === 'login-password') {
                return func(text, password);
            }
            else if (type === 'secure-text') {
                return func(password || defaultValue);
            }
            return func(text);
        }
        /** @type {?} */
        let actions;
        if (typeof callbackOrActions === 'function') {
            actions = [
                { text: '取消' },
                {
                    text: '确定',
                    onPress: () => {
                        getArgs(this, callbackOrActions);
                    }
                }
            ];
        }
        else {
            actions = callbackOrActions.map(item => {
                return {
                    text: item.text,
                    onPress: () => {
                        if (item.onPress) {
                            return getArgs(this, item.onPress);
                        }
                    }
                };
            });
        }
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            title: title,
            message: message,
            type: type ? type : 'default',
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    }
    /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    static operation(actions, platform) {
        /** @type {?} */
        const options = new BaseOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.operation = true;
        options.className = 'am-modal-operation';
        /** @type {?} */
        const footer = getFooter(actions);
        /** @type {?} */
        const config = Object.assign({
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        const props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    }
    /**
     * @return {?}
     */
    static close() {
        if (Modal.compRef) {
            Modal.compRef.destroy();
            Modal.compRef = null;
        }
    }
}
Modal.compRef = null;
Modal._modalCompFactory = null;
Modal.appRef = null;
Modal.instance = null;
Modal.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Modal.ctorParameters = () => [
    { type: ApplicationRef },
    { type: Compiler },
    { type: ComponentFactoryResolver }
];
if (false) {
    /** @type {?} */
    Modal.compRef;
    /** @type {?} */
    Modal._modalCompFactory;
    /** @type {?} */
    Modal.appRef;
    /** @type {?} */
    Modal.instance;
    /** @type {?} */
    Modal.prototype._appRef;
    /** @type {?} */
    Modal.prototype._compiler;
    /** @type {?} */
    Modal.prototype._cfr;
}
/**
 * @param {?} actions
 * @return {?}
 */
function getFooter(actions) {
    return actions.map((button) => {
        /** @type {?} */
        const orginPress = button.onPress || function () { };
        button.onPress = () => {
            /** @type {?} */
            const res = orginPress();
            if (res && res.then) {
                res.then(() => {
                    Modal.closeWithAnimation();
                });
            }
            else {
                Modal.closeWithAnimation();
            }
        };
        return button;
    });
}

//# sourceMappingURL=data:application/json;base64,