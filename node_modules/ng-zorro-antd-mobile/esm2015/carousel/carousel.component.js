/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ContentChildren, HostBinding, Input, Output, HostListener, QueryList, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';
import { CarouselSlideComponent } from './carousel-slide/carousel-slide.component';
import * as touchEvent from '../core/util/touch-event';
export class CarouselComponent {
    /**
     * @param {?} _ele
     */
    constructor(_ele) {
        this._ele = _ele;
        this.style = {
            height: 'auto',
            width: '100%',
            transform: 'translate3d(0px, 0px, 0px)',
            margin: ''
        };
        this._nodeArr = [];
        this._lastIndex = 0;
        this._isMouseDown = false;
        this._rationWidth = 0;
        this._currentSlideWidth = 0;
        this._currentSlideHeight = 0;
        this._transition = '';
        this._spaceWidth = 0;
        this.speed = 500;
        this.selectedIndex = 0;
        this.dots = true;
        this.vertical = false;
        this.autoplay = false;
        this.autoplayInterval = 3000;
        this.infinite = false;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.frameOverflow = 'hidden';
        this.cellSpacing = 0;
        this.slideWidth = 1;
        this.swipeSpeed = 12;
        this.dragging = true;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.carouselWrapper = true;
        this.carouselwrap = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panstart(event) {
        event.stopPropagation();
        if (!this.dragging) {
            return;
        }
        this.stopTimer();
        this._isMouseDown = true;
        this.touchObject = {
            startX: touchEvent.getEventTarget(event).pageX,
            startY: touchEvent.getEventTarget(event).pageY,
            direction: this.touchObject.direction
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panmove(event) {
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        const { direction } = this.swipeDirection(this.touchObject.startX, touchEvent.getEventTarget(event).pageX, this.touchObject.startY, touchEvent.getEventTarget(event).pageY);
        if (direction !== 0) {
            event.preventDefault();
        }
        /** @type {?} */
        const length = this.vertical
            ? Math.abs(touchEvent.getEventTarget(event).pageY - this.touchObject.startY)
            : Math.abs(touchEvent.getEventTarget(event).pageX - this.touchObject.startX);
        /** @type {?} */
        const offset = -this.touchObject.direction * length - this.selectedIndex * this._rationWidth;
        this.touchObject = {
            startX: this.touchObject.startX,
            startY: this.touchObject.startY,
            endX: touchEvent.getEventTarget(event).pageX,
            endY: touchEvent.getEventTarget(event).pageY,
            length,
            direction,
            offset
        };
        if (direction !== 0) {
            this.setSlideStyles(this.selectedIndex, this.touchObject.direction);
        }
        this.getListStyles(offset);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panend(event) {
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        this._isMouseDown = false;
        if (this.touchObject.length > this.swipeSpeed) {
            this.carousel(this.touchObject.direction);
        }
        else {
            this.getListStyles(this.touchObject.direction * this.touchObject.length + this.touchObject.offset);
            this.style['transition'] = this._transition;
        }
        setTimeout(() => {
            this.startTimer();
        }, this.speed);
    }
    /**
     * @return {?}
     */
    cancel() {
        setTimeout(() => {
            this.startTimer();
        }, this.speed);
    }
    /**
     * @return {?}
     */
    initCarouselSize() {
        /** @type {?} */
        const nativeElement = this._ele.nativeElement;
        this.slideHeight = nativeElement.querySelector('carouselslide').clientHeight;
        this._currentSlideHeight = this.slideHeight * this.slideWidth;
        this._currentSlideWidth = nativeElement.clientWidth;
        this._rationWidth = this.vertical ? this._currentSlideWidth : this._currentSlideWidth * this.slideWidth;
        this._spaceWidth = ((this.vertical ? this.slideHeight : this._currentSlideWidth) - this._rationWidth) / 2;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    carouselInit(items) {
        this.infinite = this.infinite || true;
        this._nodeArr = items['_results'];
        this.dragging = this.dragging ? this.dragging : false;
        if (this._nodeArr.length > 1) {
            this._lastIndex = this._nodeArr.length - 1;
            setTimeout(() => {
                this._nodeArr.forEach((v, index) => {
                    v.width = this.vertical ? 'auto' : this._rationWidth - this.cellSpacing;
                    v.left = this.vertical ? 0 : index === this._lastIndex ? -this._rationWidth : index * this._rationWidth;
                    v.top = this.vertical ? (index === this._lastIndex ? -this._rationWidth : index * this._rationWidth) : 0;
                    v.margin = this.vertical ? `${this.cellSpacing / 2}px auto` : `auto ${this.cellSpacing / 2}px`;
                });
                this.startTimer();
            }, 0);
        }
        else if (this._nodeArr.length === 1) {
            setTimeout(() => {
                this._nodeArr.forEach((v) => {
                    v.width = this._rationWidth - this.cellSpacing;
                    v.left = 0;
                    v.top = 0;
                    v.margin = `auto ${this.cellSpacing / 2}px`;
                });
            }, 0);
        }
    }
    /**
     * @return {?}
     */
    startTimer() {
        if (!this.autoplay) {
            return;
        }
        this.stopTimer();
        this._timer = this.autoplayInterval
            ? setInterval(() => {
                this.carousel(1);
            }, this.autoplayInterval)
            : 0;
    }
    /**
     * @return {?}
     */
    stopTimer() {
        clearInterval(this._timer);
    }
    /**
     * @param {?} moveDirection
     * @return {?}
     */
    carousel(moveDirection) {
        if (this.vertical) {
            if (moveDirection === 1) {
                this.moveUp();
            }
            else if (moveDirection === -1) {
                this.moveDown();
            }
        }
        else {
            if (moveDirection === 1) {
                this.moveLeft();
            }
            else if (moveDirection === -1) {
                this.moveRight();
            }
        }
        this.style['transition'] = this._transition;
    }
    /**
     * @return {?}
     */
    moveUp() {
        this.gotoCarousel(this.getAfterNode(false));
    }
    /**
     * @return {?}
     */
    moveDown() {
        this.gotoCarousel(this.getAfterNode(true));
    }
    /**
     * @return {?}
     */
    moveLeft() {
        this.gotoCarousel(this.getAfterNode(false));
    }
    /**
     * @return {?}
     */
    moveRight() {
        this.gotoCarousel(this.getAfterNode(true));
    }
    /**
     * @param {?} pre
     * @return {?}
     */
    getAfterNode(pre) {
        /** @type {?} */
        let nextIndex;
        if (pre) {
            if (this.selectedIndex <= 0) {
                this.getListStyles(this._rationWidth);
                setTimeout(() => {
                    this._nodeArr.forEach((v, tempIndex) => {
                        if (tempIndex === 0) {
                            v.left = this.vertical ? 0 : this._nodeArr.length * this._rationWidth;
                            v.top = this.vertical ? this._nodeArr.length * this._rationWidth : 0;
                        }
                        else {
                            v.left = this.vertical ? 0 : tempIndex * this._rationWidth;
                            v.top = this.vertical ? tempIndex * this._rationWidth : 0;
                        }
                    });
                    this.getListStyles(-this._rationWidth * (this.items.length - 1));
                }, this.speed);
                nextIndex = !this.infinite ? null : this._lastIndex;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex - 1;
            this.getListStyles(nextIndex * this._rationWidth * this.touchObject.direction);
            this._nodeArr.forEach((v, tempIndex) => {
                if (0 === tempIndex && nextIndex === this._nodeArr.length - 2) {
                    v.left = 0;
                    v.top = 0;
                }
            });
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
        else {
            if (this.selectedIndex >= this._lastIndex) {
                this.setSlideStyles(this.selectedIndex, 1);
                this.getListStyles(-(this._lastIndex + 1) * this._rationWidth);
                nextIndex = !this.infinite ? null : 0;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex + 1;
            this.setSlideStyles(this.selectedIndex, 1);
            this.getListStyles(-nextIndex * this._rationWidth);
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
    }
    /**
     * @return {?}
     */
    caculateDirectionLeftCurrentIndex() {
        /** @type {?} */
        const previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex + 1) % this.items.length;
    }
    /**
     * @return {?}
     */
    caculateDirectionRightCurrentIndex() {
        if (this.selectedIndex === 0) {
            this.selectedIndex = this.items.length;
        }
        /** @type {?} */
        const previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex - 1) % this.items.length;
    }
    /**
     * @param {?} afterIndex
     * @return {?}
     */
    gotoCarousel(afterIndex) {
        if (afterIndex === null) {
            return;
        }
        this.getCurrentIndex();
        if (afterIndex === 0) {
            setTimeout(() => {
                this._nodeArr.forEach((v, index) => {
                    if (index === this._nodeArr.length - 1) {
                        v.left = this.vertical ? 0 : -this._rationWidth;
                        v.top = this.vertical ? -this._rationWidth : 0;
                    }
                    else {
                        v.left = this.vertical ? 0 : index * this._rationWidth;
                        v.top = this.vertical ? index * this._rationWidth : 0;
                    }
                });
                this.startTimer();
                this.getListStyles(0);
            }, this.speed);
        }
        this.selectedIndex = afterIndex;
        this.afterChange.emit(this.selectedIndex);
    }
    /**
     * @return {?}
     */
    getCurrentIndex() {
        if (this.touchObject.direction === 1) {
            this.caculateDirectionLeftCurrentIndex();
        }
        else {
            this.caculateDirectionRightCurrentIndex();
        }
    }
    /**
     * @param {?} index
     * @param {?} direction
     * @param {?=} xDist
     * @return {?}
     */
    setSlideStyles(index, direction, xDist = 0) {
        if (direction === 1) {
            this._nodeArr.forEach((v, tempIndex) => {
                if (index < this._nodeArr.length && index - 1 === tempIndex) {
                    if (xDist === 0 || xDist > this._spaceWidth) {
                        v.left = this.vertical ? 0 : (this._nodeArr.length + tempIndex) * this._rationWidth;
                        v.top = this.vertical ? (this._nodeArr.length + tempIndex) * this._rationWidth : 0;
                    }
                }
                else if (this._nodeArr.length - 1 === tempIndex && index !== 2) {
                    if (xDist === 0 || xDist > this._spaceWidth) {
                        v.left = this.vertical ? 0 : (this._nodeArr.length - 1) * this._rationWidth;
                        v.top = this.vertical ? (this._nodeArr.length - 1) * this._rationWidth : 0;
                    }
                }
                else if (index === this._nodeArr.length - 1 && tempIndex === 1 && this.autoplay) {
                    v.left = this.vertical ? 0 : (this._nodeArr.length + tempIndex) * this._rationWidth;
                    v.top = this.vertical ? tempIndex * this._rationWidth : 0;
                }
                else if (index === this._nodeArr.length - 1 && tempIndex === 0 && !this.autoplay) {
                    v.left = this.vertical ? 0 : (this._nodeArr.length + tempIndex) * this._rationWidth;
                    v.top = this.vertical ? tempIndex * this._rationWidth : 0;
                }
            });
        }
        else if (direction === -1) {
            this._nodeArr.forEach((v, tempIndex) => {
                if (index === 0 && this._nodeArr.length - 1 === tempIndex) {
                    v.left = this.vertical ? 0 : direction * this._rationWidth;
                    v.top = this.vertical ? direction * this._rationWidth : 0;
                }
                else if (index === this._nodeArr.length - 2 && index + 1 === tempIndex) {
                    v.left = this.vertical ? 0 : direction * this._rationWidth;
                    v.top = this.vertical ? direction * this._rationWidth : 0;
                }
                else if (index === 1 && 0 === tempIndex) {
                    v.left = this.vertical ? 0 : direction * this._rationWidth * tempIndex;
                    v.top = this.vertical ? direction * this._rationWidth : 0;
                }
                else if (index > 1) {
                    v.left = this.vertical ? 0 : tempIndex * this._rationWidth;
                    v.top = this.vertical ? tempIndex * this._rationWidth : 0;
                }
            });
        }
    }
    /**
     * @param {?=} offset
     * @return {?}
     */
    getListStyles(offset = 0) {
        /** @type {?} */
        const positionOffset = offset +
            (this.vertical
                ? (this.slideHeight - this._currentSlideHeight) / 2
                : (this._currentSlideWidth - this._rationWidth) / 2) -
            this.cellSpacing;
        this.style = {
            height: this._currentSlideHeight + 'px',
            width: this.items.length * this._rationWidth + 'px',
            transform: this.vertical
                ? `translate3d(0px, ${positionOffset}px, 0px)`
                : `translate3d(${positionOffset}px, 0px, 0px)`,
            margin: this.vertical ? `${(this.cellSpacing / 2) * -1}px 0px` : `0px ${(this.cellSpacing / 2) * -1}px`
        };
    }
    /**
     * @param {?} x1
     * @param {?} x2
     * @param {?} y1
     * @param {?} y2
     * @return {?}
     */
    swipeDirection(x1, x2, y1, y2) {
        /** @type {?} */
        const xDist = x1 - x2;
        /** @type {?} */
        const yDist = y1 - y2;
        /** @type {?} */
        const r = Math.atan2(yDist, xDist);
        /** @type {?} */
        let swipeAngle = Math.round((r * 180) / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return {
                direction: -1,
                xDist: xDist
            };
        }
        if (this.vertical === true) {
            if (swipeAngle >= 35 + 33 && swipeAngle <= 135) {
                return {
                    direction: 1,
                    xDist: xDist
                };
            }
            else {
                return {
                    direction: -1,
                    xDist: xDist
                };
            }
        }
        return {
            direction: 0,
            xDist: xDist
        };
    }
    /**
     * @return {?}
     */
    get page() {
        return this.dots ? this.selectedIndex : 0;
    }
    /**
     * @return {?}
     */
    get pageCount() {
        return this.dots ? this.items.length : 0;
    }
    /**
     * @return {?}
     */
    get dotindicatorStatus() {
        return this.dots ? (this.items.length > 1) : this.dots;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.touchObject = { direction: 1 };
        this._transition = `transform ${this.speed / 1000}s`;
        this.items.changes.subscribe(items => {
            this.carouselInit(items);
        });
        this.initCarouselSize();
        this.getListStyles();
        this.carouselInit(this.items);
        /** @type {?} */
        const nativeElement = this._ele.nativeElement;
        /** @type {?} */
        const targetNode = nativeElement.querySelector('carouselslide');
        /** @type {?} */
        const config = { attributes: true, childList: true, subtree: true };
        /** @type {?} */
        const callback = (mutationsList) => {
            for (const mutation of mutationsList) {
                if (mutation.type == 'attributes') {
                    if (this.slideHeight !== nativeElement.querySelector('carouselslide').clientHeight) {
                        this.initCarouselSize();
                        this.getListStyles();
                    }
                }
            }
        };
        this.observer = new MutationObserver(callback);
        this.observer.observe(targetNode, config);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.observer.disconnect();
        this.observer = null;
        this.stopTimer();
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'Carousel, nzm-carousel',
                encapsulation: ViewEncapsulation.None,
                template: "<div class=\"slider-frame\" [ngStyle]=\"{overflow: frameOverflow}\">\n  <ul class=\"slider-list\" [ngStyle]=\"style\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n<DotIndicator *ngIf=\"dotindicatorStatus\"\n              class=\"am-carousel-wrap-dot\"\n              [page]=\"page\"\n              [dotStyle]=\"dotStyle\"\n              [pageCount]=\"pageCount\"\n              [dotActiveStyle]=\"dotActiveStyle\"\n></DotIndicator>\n"
            }] }
];
/** @nocollapse */
CarouselComponent.ctorParameters = () => [
    { type: ElementRef }
];
CarouselComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [CarouselSlideComponent,] }],
    speed: [{ type: Input }],
    selectedIndex: [{ type: Input }],
    dots: [{ type: Input }],
    vertical: [{ type: Input }],
    autoplay: [{ type: Input }],
    autoplayInterval: [{ type: Input }],
    infinite: [{ type: Input }],
    dotStyle: [{ type: Input }],
    dotActiveStyle: [{ type: Input }],
    frameOverflow: [{ type: Input }],
    cellSpacing: [{ type: Input }],
    slideWidth: [{ type: Input }],
    swipeSpeed: [{ type: Input }],
    dragging: [{ type: Input }],
    afterChange: [{ type: Output }],
    beforeChange: [{ type: Output }],
    carouselWrapper: [{ type: HostBinding, args: ['class.am-carousel',] }],
    carouselwrap: [{ type: HostBinding, args: ['class.carousel',] }],
    panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
    panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
    panend: [{ type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }],
    cancel: [{ type: HostListener, args: ['touchcancel', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    CarouselComponent.prototype.slideHeight;
    /** @type {?} */
    CarouselComponent.prototype.touchObject;
    /** @type {?} */
    CarouselComponent.prototype.style;
    /** @type {?} */
    CarouselComponent.prototype._timer;
    /** @type {?} */
    CarouselComponent.prototype._nodeArr;
    /** @type {?} */
    CarouselComponent.prototype._lastIndex;
    /** @type {?} */
    CarouselComponent.prototype._isMouseDown;
    /** @type {?} */
    CarouselComponent.prototype._rationWidth;
    /** @type {?} */
    CarouselComponent.prototype._currentSlideWidth;
    /** @type {?} */
    CarouselComponent.prototype._currentSlideHeight;
    /** @type {?} */
    CarouselComponent.prototype._transition;
    /** @type {?} */
    CarouselComponent.prototype._spaceWidth;
    /** @type {?} */
    CarouselComponent.prototype.observer;
    /** @type {?} */
    CarouselComponent.prototype.items;
    /** @type {?} */
    CarouselComponent.prototype.speed;
    /** @type {?} */
    CarouselComponent.prototype.selectedIndex;
    /** @type {?} */
    CarouselComponent.prototype.dots;
    /** @type {?} */
    CarouselComponent.prototype.vertical;
    /** @type {?} */
    CarouselComponent.prototype.autoplay;
    /** @type {?} */
    CarouselComponent.prototype.autoplayInterval;
    /** @type {?} */
    CarouselComponent.prototype.infinite;
    /** @type {?} */
    CarouselComponent.prototype.dotStyle;
    /** @type {?} */
    CarouselComponent.prototype.dotActiveStyle;
    /** @type {?} */
    CarouselComponent.prototype.frameOverflow;
    /** @type {?} */
    CarouselComponent.prototype.cellSpacing;
    /** @type {?} */
    CarouselComponent.prototype.slideWidth;
    /** @type {?} */
    CarouselComponent.prototype.swipeSpeed;
    /** @type {?} */
    CarouselComponent.prototype.dragging;
    /** @type {?} */
    CarouselComponent.prototype.afterChange;
    /** @type {?} */
    CarouselComponent.prototype.beforeChange;
    /** @type {?} */
    CarouselComponent.prototype.carouselWrapper;
    /** @type {?} */
    CarouselComponent.prototype.carouselwrap;
    /** @type {?} */
    CarouselComponent.prototype._ele;
}

//# sourceMappingURL=data:application/json;base64,