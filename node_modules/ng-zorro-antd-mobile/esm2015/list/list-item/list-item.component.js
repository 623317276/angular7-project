/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, TemplateRef, EventEmitter, Output, HostBinding, HostListener } from '@angular/core';
export class ListItem {
    constructor() {
        this.defaultProps = {
            prefixCls: 'am-list',
            align: 'middle',
            error: false,
            multipleLine: false,
            wrap: false,
            platform: 'ios',
            rippleStyle: {}
        };
        this.arrowCls = {};
        this.lineCls = {};
        this.wrapCls = '';
        this.rippleCls = {};
        this.rippleClicked = false;
        this._thumb_component = false;
        this._thumb_src = '';
        this._extra_component = false;
        this._extra_title = '';
        this._arrow = '';
        this._disabled = false;
        this._className = '';
        this._active = false;
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get extra() {
        return this._extra;
    }
    /**
     * @return {?}
     */
    get extra_component() {
        return this._extra_component;
    }
    /**
     * @return {?}
     */
    get extra_title() {
        return this._extra_title;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set extra(value) {
        if (value instanceof TemplateRef) {
            this._extra_component = true;
            this._extra = value;
        }
        else {
            this._extra_component = false;
            this._extra_title = /** @type {?} */ (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set className(value) {
        this._className = value;
        this.setClsMap();
    }
    /**
     * @return {?}
     */
    get arrow() {
        return this._arrow;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set arrow(value) {
        this._arrow = value;
        this.setClsMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set multipleLine(value) {
        this.defaultProps.multipleLine = value === '' ? true : value;
        this.setClsMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set error(value) {
        this.defaultProps.error = value === '' ? true : value;
        this.setClsMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set wrap(value) {
        this.defaultProps.wrap = value === '' ? true : value;
        this.setClsMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set align(value) {
        this.defaultProps.align = value;
        this.setClsMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set platform(value) {
        this.defaultProps.platform = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        if (typeof value === 'boolean') {
            this._disabled = value;
        }
        else {
            if (value === 'true') {
                this._disabled = true;
            }
            else {
                this._disabled = false;
            }
        }
        this.setClsMap();
    }
    /**
     * @return {?}
     */
    get thumb() {
        return this._thumb;
    }
    /**
     * @return {?}
     */
    get thumb_component() {
        return this._thumb_component;
    }
    /**
     * @return {?}
     */
    get thumb_src() {
        return this._thumb_src;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set thumb(value) {
        if (value instanceof TemplateRef) {
            this._thumb_component = true;
            this._thumb = value;
        }
        else {
            this._thumb_component = false;
            this._thumb_src = /** @type {?} */ (value);
        }
    }
    /**
     * @return {?}
     */
    get bingClassName() {
        return this.wrapCls;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        this.onItemClick(event);
    }
    /**
     * @return {?}
     */
    start() {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = true;
            this.setClsMap();
        }
    }
    /**
     * @return {?}
     */
    move() {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    }
    /**
     * @return {?}
     */
    end() {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    }
    /**
     * @return {?}
     */
    mouse_start() {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = true;
            this.setClsMap();
        }
    }
    /**
     * @return {?}
     */
    mouse_end() {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    }
    /**
     * @return {?}
     */
    setClsMap() {
        /** @type {?} */
        const classNameList = this._className.split(' ');
        /** @type {?} */
        let classNameObj = {};
        this.wrapCls = '';
        for (const value of classNameList) {
            if (value) {
                classNameObj = Object.assign({}, classNameObj, { [`${value}`]: true });
            }
        }
        /** @type {?} */
        const wrapClsObj = Object.assign({ [`${this.defaultProps.prefixCls}-item`]: true, [`${this.defaultProps.prefixCls}-item-disabled`]: this._disabled, [`${this.defaultProps.prefixCls}-item-active`]: this._active, [`${this.defaultProps.prefixCls}-item-error`]: this.defaultProps.error, [`${this.defaultProps.prefixCls}-item-top`]: this.defaultProps.align === 'top', [`${this.defaultProps.prefixCls}-item-middle`]: this.defaultProps.align === 'middle', [`${this.defaultProps.prefixCls}-item-bottom`]: this.defaultProps.align === 'bottom' }, classNameObj);
        for (const key in wrapClsObj) {
            if (wrapClsObj[key]) {
                this.wrapCls += ` ${key}`;
            }
        }
        this.rippleCls = {
            [`${this.defaultProps.prefixCls}-ripple`]: true,
            [`${this.defaultProps.prefixCls}-ripple-animate`]: this.rippleClicked
        };
        this.lineCls = {
            [`${this.defaultProps.prefixCls}-line`]: true,
            [`${this.defaultProps.prefixCls}-line-multiple`]: this.defaultProps.multipleLine,
            [`${this.defaultProps.prefixCls}-line-wrap`]: this.defaultProps.wrap
        };
        this.arrowCls = {
            [`${this.defaultProps.prefixCls}-arrow`]: true,
            [`${this.defaultProps.prefixCls}-arrow-horizontal`]: this._arrow === 'horizontal',
            [`${this.defaultProps.prefixCls}-arrow-vertical`]: this._arrow === 'down' || this._arrow === 'up',
            [`${this.defaultProps.prefixCls}-arrow-vertical-up`]: this._arrow === 'up'
        };
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onItemClick(ev) {
        /** @type {?} */
        const isAndroid = this.defaultProps.platform === 'android';
        if (isAndroid) {
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
                this.debounceTimeout = null;
            }
            /** @type {?} */
            const Item = ev.currentTarget;
            /** @type {?} */
            const RippleWidth = Math.max(Item.offsetHeight, Item.offsetWidth);
            /** @type {?} */
            const ClientRect = ev.currentTarget.getBoundingClientRect();
            /** @type {?} */
            const pointX = ev.clientX - ClientRect.left - Item.offsetWidth / 2;
            /** @type {?} */
            const pointY = ev.clientY - ClientRect.top - Item.offsetWidth / 2;
            /** @type {?} */
            const coverRippleStyle = {
                width: `${RippleWidth}px`,
                height: `${RippleWidth}px`,
                left: `${pointX}px`,
                top: `${pointY}px`
            };
            this.defaultProps.rippleStyle = coverRippleStyle;
            this.rippleClicked = true;
            this.setClsMap();
            this.debounceTimeout = setTimeout(() => {
                this.rippleClicked = false;
                this.defaultProps.rippleStyle = { display: 'none' };
                this.setClsMap();
            }, 1000);
        }
        this.onClick.emit(ev);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.defaultProps.rippleStyle = { display: 'none' };
        this.setClsMap();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.debounceTimeout) {
            clearTimeout(this.debounceTimeout);
            this.debounceTimeout = null;
        }
    }
}
ListItem.decorators = [
    { type: Component, args: [{
                selector: 'ListItem, nzm-list-item',
                template: "<div *ngIf=\"thumb_src && !thumb_component\" class=\"{{defaultProps.prefixCls}}-thumb\">\n  <img src={{thumb_src}}/>\n</div>\n<div *ngIf=\"thumb && thumb_component\" class=\"{{defaultProps.prefixCls}}-thumb\">\n  <ng-template [ngTemplateOutlet]=\"thumb\"></ng-template>\n</div>\n<div [ngClass]=\"lineCls\">\n  <div class=\"{{defaultProps.prefixCls}}-content\">\n    <ng-content></ng-content>\n  </div>\n  <div *ngIf=\"extra_title && !extra_component\"\n       class=\"{{defaultProps.prefixCls}}-extra\"\n       [innerHTML]=\"extra_title\"\n  ></div>\n  <div *ngIf=\"extra && extra_component\" class=\"{{defaultProps.prefixCls}}-extra\">\n    <ng-template [ngTemplateOutlet]=\"extra\"></ng-template>\n  </div>\n  <div *ngIf=\"arrow\" [ngClass]=\"arrowCls\" aria-hidden=\"true\"></div>\n</div>\n<div [ngClass]=\"rippleCls\" [ngStyle]=\"defaultProps.rippleStyle\"></div>\n\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ListItem.ctorParameters = () => [];
ListItem.propDecorators = {
    extra: [{ type: Input }],
    className: [{ type: Input }],
    arrow: [{ type: Input }],
    multipleLine: [{ type: Input }],
    error: [{ type: Input }],
    wrap: [{ type: Input }],
    align: [{ type: Input }],
    platform: [{ type: Input }],
    disabled: [{ type: Input }],
    thumb: [{ type: Input }],
    onClick: [{ type: Output }],
    bingClassName: [{ type: HostBinding, args: ['class',] }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }],
    start: [{ type: HostListener, args: ['touchstart',] }],
    move: [{ type: HostListener, args: ['touchmove',] }],
    end: [{ type: HostListener, args: ['touchend',] }],
    mouse_start: [{ type: HostListener, args: ['mousedown',] }],
    mouse_end: [{ type: HostListener, args: ['mouseup',] }]
};
if (false) {
    /** @type {?} */
    ListItem.prototype.defaultProps;
    /** @type {?} */
    ListItem.prototype.arrowCls;
    /** @type {?} */
    ListItem.prototype.lineCls;
    /** @type {?} */
    ListItem.prototype.wrapCls;
    /** @type {?} */
    ListItem.prototype.rippleCls;
    /** @type {?} */
    ListItem.prototype.rippleClicked;
    /** @type {?} */
    ListItem.prototype.debounceTimeout;
    /** @type {?} */
    ListItem.prototype._thumb_component;
    /** @type {?} */
    ListItem.prototype._thumb;
    /** @type {?} */
    ListItem.prototype._thumb_src;
    /** @type {?} */
    ListItem.prototype._extra_component;
    /** @type {?} */
    ListItem.prototype._extra;
    /** @type {?} */
    ListItem.prototype._extra_title;
    /** @type {?} */
    ListItem.prototype._arrow;
    /** @type {?} */
    ListItem.prototype._disabled;
    /** @type {?} */
    ListItem.prototype._className;
    /** @type {?} */
    ListItem.prototype._active;
    /** @type {?} */
    ListItem.prototype.onClick;
}

//# sourceMappingURL=data:application/json;base64,