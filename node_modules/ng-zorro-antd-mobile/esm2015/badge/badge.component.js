/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
export class Badge {
    /**
     * @param {?} _ref
     * @param {?} render
     */
    constructor(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set size(v) {
        this._size = v;
        this.setCls();
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set text(v) {
        this._text = v;
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set corner(v) {
        this._corner = v;
        this.setCls();
    }
    /**
     * @return {?}
     */
    get dot() {
        return this._dot;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set dot(v) {
        this._dot = v;
        if (this._dot) {
            this._text = '';
        }
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set overflowCount(v) {
        this._overflowCount = v;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set hot(v) {
        this._hot = v;
        this.setCls();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set setStyle(v) {
        this.style = v;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set className(v) {
        this._setClass = v;
        /** @type {?} */
        const clsArr = this._setClass.split(' ');
        clsArr.forEach(cls => {
            this.render.addClass(this._ref.nativeElement, cls);
        });
    }
    /**
     * @return {?}
     */
    setCls() {
        this.scrollNumberCls = {
            [`${this.prefixCls}-dot`]: this._dot,
            [`${this.prefixCls}-dot-large`]: this._dot && this._size === 'large',
            [`${this.prefixCls}-text`]: !this._dot && !this._corner,
            [`${this.prefixCls}-corner`]: this._corner,
            [`${this.prefixCls}-corner-large`]: this._corner && this._size === 'large'
        };
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setCls();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            if (this._ref.nativeElement.children.length > 1) {
                this._children = true;
                this.setCls();
            }
        }, 10);
    }
}
Badge.decorators = [
    { type: Component, args: [{
                selector: 'Badge, nzm-badge',
                template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\"\n    [ngClass]=\"scrollNumberCls\"\n    [ngStyle]=\"style\">\n    <span>{{text}}</span>\n</sup>\n"
            }] }
];
/** @nocollapse */
Badge.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
Badge.propDecorators = {
    size: [{ type: Input }],
    text: [{ type: Input }],
    corner: [{ type: Input }],
    dot: [{ type: Input }],
    overflowCount: [{ type: Input }],
    hot: [{ type: Input }],
    setStyle: [{ type: Input }],
    className: [{ type: Input }],
    clsBadge: [{ type: HostBinding, args: ['class.am-badge',] }],
    clsBadgeWrp: [{ type: HostBinding, args: ['class.am-badge-not-a-wrapper',] }],
    clsBadgeCornerWrp: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper',] }],
    clsBadgeHot: [{ type: HostBinding, args: ['class.am-badge-hot',] }],
    clsBadgeCornerWrpLg: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper-large',] }]
};
if (false) {
    /** @type {?} */
    Badge.prototype.prefixCls;
    /** @type {?} */
    Badge.prototype.scrollNumberCls;
    /** @type {?} */
    Badge.prototype.style;
    /** @type {?} */
    Badge.prototype._text;
    /** @type {?} */
    Badge.prototype._setClass;
    /** @type {?} */
    Badge.prototype._size;
    /** @type {?} */
    Badge.prototype._dot;
    /** @type {?} */
    Badge.prototype._hot;
    /** @type {?} */
    Badge.prototype._corner;
    /** @type {?} */
    Badge.prototype._children;
    /** @type {?} */
    Badge.prototype._overflowCount;
    /** @type {?} */
    Badge.prototype.clsBadge;
    /** @type {?} */
    Badge.prototype.clsBadgeWrp;
    /** @type {?} */
    Badge.prototype.clsBadgeCornerWrp;
    /** @type {?} */
    Badge.prototype.clsBadgeHot;
    /** @type {?} */
    Badge.prototype.clsBadgeCornerWrpLg;
    /** @type {?} */
    Badge.prototype._ref;
    /** @type {?} */
    Badge.prototype.render;
}

//# sourceMappingURL=data:application/json;base64,