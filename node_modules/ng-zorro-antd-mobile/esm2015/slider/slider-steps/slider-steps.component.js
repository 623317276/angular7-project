/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, HostBinding, ViewEncapsulation } from '@angular/core';
export class SliderSteps {
    /**
     * @param {?} _elf
     */
    constructor(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.stepArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._dots = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        if (value && value <= this._max) {
            this._min = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        if (value && value >= this._min) {
            this._max = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set marks(value) {
        this._marks = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dots(value) {
        this._dots = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set upperBound(value) {
        if (value !== undefined && value !== this._upperBound) {
            this._upperBound = value;
            this.setActiveCls();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set lowerBound(value) {
        if (value !== undefined && value !== this.lowerBound) {
            this._lowerBound = value;
            this.setActiveCls();
        }
    }
    /**
     * @return {?}
     */
    get class() {
        return 'am-slider-step';
    }
    /**
     * @return {?}
     */
    calPoints() {
        /** @type {?} */
        const points = Object.keys(this._marks).map(parseFloat);
        if (this._dots) {
            for (let i = this._min; i <= this._max; i = i + this._step) {
                if (points.indexOf(i) < 0) {
                    points.push(i);
                }
            }
        }
        return points;
    }
    /**
     * @param {?} points
     * @return {?}
     */
    getSteps(points) {
        /** @type {?} */
        const range = this._max - this._min;
        this.stepArray = [];
        points.map(point => {
            /** @type {?} */
            const stepItem = {
                stepStyle: {},
                stepClass: {},
                point: null
            };
            /** @type {?} */
            const offset = `${(Math.abs(point - this._min) / range) * 100}%`;
            /** @type {?} */
            const isActived = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            /** @type {?} */
            let style = Object.assign({ left: offset }, this._dotStyle);
            if (isActived) {
                style = Object.assign({}, style, this._activeDotStyle);
            }
            /** @type {?} */
            const pointClassName = {
                [`${this.prefixCls}-dot`]: true,
                [`${this.prefixCls}-dot-active`]: isActived
            };
            stepItem.point = point;
            stepItem.stepStyle = style;
            stepItem.stepClass = pointClassName;
            this.stepArray.push(stepItem);
        });
    }
    /**
     * @return {?}
     */
    setActiveCls() {
        for (let i = 0; i < this.stepArray.length; i++) {
            /** @type {?} */
            const point = this.stepArray[i].point;
            /** @type {?} */
            const isActived = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.stepArray[i].stepClass = {
                [`${this.prefixCls}-dot`]: true,
                [`${this.prefixCls}-dot-active`]: isActived
            };
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const points = this.calPoints();
        this.getSteps(points);
    }
}
SliderSteps.decorators = [
    { type: Component, args: [{
                selector: 'SliderSteps, nzm-slider-steps',
                template: "<span *ngFor=\"let item of stepArray\"\n      [ngClass]=\"item.stepClass\"\n      [ngStyle]=\"item.stepStyle\">\n</span>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SliderSteps.ctorParameters = () => [
    { type: ElementRef }
];
SliderSteps.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    marks: [{ type: Input }],
    step: [{ type: Input }],
    included: [{ type: Input }],
    dots: [{ type: Input }],
    upperBound: [{ type: Input }],
    lowerBound: [{ type: Input }],
    class: [{ type: HostBinding }]
};
if (false) {
    /** @type {?} */
    SliderSteps.prototype.prefixCls;
    /** @type {?} */
    SliderSteps.prototype.stepArray;
    /** @type {?} */
    SliderSteps.prototype._min;
    /** @type {?} */
    SliderSteps.prototype._max;
    /** @type {?} */
    SliderSteps.prototype._step;
    /** @type {?} */
    SliderSteps.prototype._marks;
    /** @type {?} */
    SliderSteps.prototype._included;
    /** @type {?} */
    SliderSteps.prototype._upperBound;
    /** @type {?} */
    SliderSteps.prototype._lowerBound;
    /** @type {?} */
    SliderSteps.prototype._dots;
    /** @type {?} */
    SliderSteps.prototype._dotStyle;
    /** @type {?} */
    SliderSteps.prototype._activeDotStyle;
    /** @type {?} */
    SliderSteps.prototype._elf;
}

//# sourceMappingURL=data:application/json;base64,