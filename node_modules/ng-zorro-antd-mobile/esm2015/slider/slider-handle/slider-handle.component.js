/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Output, EventEmitter, HostListener, ViewEncapsulation } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class SliderHandle {
    /**
     * @param {?} _elf
     * @param {?} _sanitizer
     */
    constructor(_elf, _sanitizer) {
        this._elf = _elf;
        this._sanitizer = _sanitizer;
        this._disabled = false;
        this._marks = {};
        this._isDraging = false;
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.mouseDown = event => {
            if (!this._disabled && this.isMouseTarget(event)) {
                this._startX = event.clientX;
                this._handleStatus = 'start';
                this._isDraging = true;
                document.addEventListener('mousemove', this.mouseMove, false);
                document.addEventListener('mouseup', this.mouseUp, false);
                this.pauseEvent(event);
            }
        };
        this.mouseMove = event => {
            if (!this._disabled && this._isDraging) {
                this.pauseEvent(event);
                /** @type {?} */
                const pos = event.clientX;
                this._value = Math.round(this.calcValueByPos(pos));
                this.left = this.calcOffset(this._value);
                if (this._oldValue !== this._value) {
                    this._oldValue = this._value;
                    this.onChange.emit(this._value);
                }
            }
        };
        this.mouseUp = event => {
            if (!this._disabled && this._isDraging) {
                this._handleStatus = 'end';
                this._isDraging = false;
                /** @type {?} */
                const pos = event.clientX;
                this._value = Math.round(this.calcValueByPos(pos));
                this.left = this.calcOffset(this._value);
                this.onAfterChange.emit(this._value);
            }
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minBound(value) {
        this._minBound = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxBound(value) {
        this._maxBound = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
        if (this._value) {
            this.left = this.calcOffset(this._value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sliderLength(value) {
        this._sliderLength = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sliderStart(value) {
        this._sliderStart = value;
    }
    /**
     * @return {?}
     */
    get handleStyle() {
        return this._handleStyle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set handleStyle(value) {
        this._handleStyle = value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panstart(event) {
        event.preventDefault();
        if (!this._disabled) {
            this._startX = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            this._handleStatus = 'start';
            this._isDraging = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panmove(event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            /** @type {?} */
            const pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            if (this._oldValue !== this._value) {
                this._oldValue = this._value;
                this.onChange.emit(this._value);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    panend(event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            this._handleStatus = 'end';
            this._isDraging = false;
            /** @type {?} */
            const pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            this.onAfterChange.emit(this._value);
        }
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    calcValueByPos(pos) {
        /** @type {?} */
        const offset = pos - this._sliderStart;
        /** @type {?} */
        let value = this.calcValue(offset);
        if (value <= this._minBound) {
            value = this._minBound;
        }
        if (value >= this._maxBound) {
            value = this._maxBound;
        }
        /** @type {?} */
        const closestPoint = this.getClosestPoint(value);
        return this._step === null ? closestPoint : parseFloat(closestPoint.toFixed(this.getPrecision(this._step)));
    }
    /**
     * @param {?} offset
     * @return {?}
     */
    calcValue(offset) {
        /** @type {?} */
        const ratio = Math.abs(Math.max(offset, 0) / this._sliderLength);
        /** @type {?} */
        const value = ratio * (this._max - this._min) + this._min;
        return value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getClosestPoint(val) {
        /** @type {?} */
        const points = Object.keys(this._marks).map(parseFloat);
        if (this._step !== null) {
            /** @type {?} */
            const closestStep = Math.round((val - this._min) / this._step) * this._step + this._min;
            points.push(closestStep);
        }
        /** @type {?} */
        const diffs = points.map(function (point) {
            return Math.abs(val - point);
        });
        return points[diffs.indexOf(Math.min.apply(Math, this.toConsumableArray(diffs)))];
    }
    /**
     * @param {?} step
     * @return {?}
     */
    getPrecision(step) {
        /** @type {?} */
        const stepString = step.toString();
        /** @type {?} */
        let precision = 0;
        if (stepString.indexOf('.') >= 0) {
            precision = stepString.length - stepString.indexOf('.') - 1;
        }
        return precision;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    calcOffset(value) {
        /** @type {?} */
        const ratio = (value - this._min) / (this._max - this._min);
        return ratio * 100;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    pauseEvent(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    isMouseTarget(event) {
        /** @type {?} */
        let target = event.target;
        /** @type {?} */
        let parentFound = false;
        while (target !== null && !parentFound) {
            if (target === this._elf.nativeElement) {
                parentFound = true;
            }
            target = target.parentElement;
        }
        return parentFound;
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            /** @type {?} */
            const arr2 = Array(arr.length);
            for (let i = 0; i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        this._elf.nativeElement.addEventListener('mousedown', this.mouseDown, false);
        this._handleOffsetX = this._elf.nativeElement.getBoundingClientRect().x;
        this.left = this.calcOffset(this._value);
        this._minBound = this._minBound === undefined ? this._min : this._minBound;
        this._maxBound = this._maxBound === undefined ? this._max : this._maxBound;
        this.onAfterChange.emit(this._value);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        document.removeEventListener('mousemove', this.mouseMove, false);
        document.removeEventListener('mouseup', this.mouseUp, false);
    }
}
SliderHandle.decorators = [
    { type: Component, args: [{
                selector: 'SliderHandle, nzm-slider-handle',
                template: "<div role=\"slider\"\n     class=\"am-slider-handle\"\n     [ngStyle]=\"handleStyle\"\n     [style.left.%]=\"left\">\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SliderHandle.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer }
];
SliderHandle.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    minBound: [{ type: Input }],
    maxBound: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    sliderLength: [{ type: Input }],
    sliderStart: [{ type: Input }],
    handleStyle: [{ type: Input }],
    onChange: [{ type: Output }],
    onAfterChange: [{ type: Output }],
    panstart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    panmove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
    panend: [{ type: HostListener, args: ['touchend', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SliderHandle.prototype.left;
    /** @type {?} */
    SliderHandle.prototype._min;
    /** @type {?} */
    SliderHandle.prototype._max;
    /** @type {?} */
    SliderHandle.prototype._step;
    /** @type {?} */
    SliderHandle.prototype._value;
    /** @type {?} */
    SliderHandle.prototype._disabled;
    /** @type {?} */
    SliderHandle.prototype._marks;
    /** @type {?} */
    SliderHandle.prototype._handleStyle;
    /** @type {?} */
    SliderHandle.prototype._sliderLength;
    /** @type {?} */
    SliderHandle.prototype._sliderStart;
    /** @type {?} */
    SliderHandle.prototype._minBound;
    /** @type {?} */
    SliderHandle.prototype._maxBound;
    /** @type {?} */
    SliderHandle.prototype._startX;
    /** @type {?} */
    SliderHandle.prototype._isDraging;
    /** @type {?} */
    SliderHandle.prototype._handleStatus;
    /** @type {?} */
    SliderHandle.prototype._handleOffsetX;
    /** @type {?} */
    SliderHandle.prototype._oldValue;
    /** @type {?} */
    SliderHandle.prototype.onChange;
    /** @type {?} */
    SliderHandle.prototype.onAfterChange;
    /** @type {?} */
    SliderHandle.prototype.mouseDown;
    /** @type {?} */
    SliderHandle.prototype.mouseMove;
    /** @type {?} */
    SliderHandle.prototype.mouseUp;
    /** @type {?} */
    SliderHandle.prototype._elf;
    /** @type {?} */
    SliderHandle.prototype._sanitizer;
}

//# sourceMappingURL=data:application/json;base64,