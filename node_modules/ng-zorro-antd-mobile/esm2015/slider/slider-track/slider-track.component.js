/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class SliderTrack {
    /**
     * @param {?} _elf
     * @param {?} _sanitizer
     */
    constructor(_elf, _sanitizer) {
        this._elf = _elf;
        this._sanitizer = _sanitizer;
        this.prefixCls = 'am-slider';
        this._included = true;
    }
    /**
     * @return {?}
     */
    get className() {
        return this._className;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set className(value) {
        this._className = value;
    }
    /**
     * @return {?}
     */
    get included() {
        return this._included;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set included(value) {
        this._included = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set offset(value) {
        this._offset = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set length(value) {
        this._length = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set style(value) {
        this._style = value;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        const positonStyle = {
            left: `${this._offset}%`,
            width: `${this._length}%`
        };
        this.elStyle = Object.assign({}, this._style, positonStyle);
    }
}
SliderTrack.decorators = [
    { type: Component, args: [{
                selector: 'SliderTrack, nzm-slider-track',
                template: "<div *ngIf=\"included\" \n     [ngClass]=\"className\" \n     [ngStyle]=\"elStyle\" >\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SliderTrack.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer }
];
SliderTrack.propDecorators = {
    className: [{ type: Input }],
    included: [{ type: Input }],
    offset: [{ type: Input }],
    length: [{ type: Input }],
    style: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderTrack.prototype.prefixCls;
    /** @type {?} */
    SliderTrack.prototype.elStyle;
    /** @type {?} */
    SliderTrack.prototype._className;
    /** @type {?} */
    SliderTrack.prototype._included;
    /** @type {?} */
    SliderTrack.prototype._offset;
    /** @type {?} */
    SliderTrack.prototype._length;
    /** @type {?} */
    SliderTrack.prototype._style;
    /** @type {?} */
    SliderTrack.prototype._elf;
    /** @type {?} */
    SliderTrack.prototype._sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLXRyYWNrLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsic2xpZGVyL3NsaWRlci10cmFjay9zbGlkZXItdHJhY2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBT3pELE1BQU07Ozs7O0lBcUNKLFlBQW9CLElBQWdCLEVBQVUsVUFBd0I7UUFBbEQsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQWM7eUJBcEMxRCxXQUFXO3lCQUlNLElBQUk7S0FnQ3lDOzs7O0lBM0IxRSxJQUNJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDeEI7Ozs7O0lBQ0QsSUFBSSxTQUFTLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUN6Qjs7OztJQUNELElBQ0ksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUN2Qjs7Ozs7SUFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0tBQ3hCOzs7OztJQUNELElBQ0ksTUFBTSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7S0FDdEI7Ozs7O0lBQ0QsSUFDSSxNQUFNLENBQUMsS0FBYTtRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztLQUN0Qjs7Ozs7SUFDRCxJQUNJLEtBQUssQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0tBQ3JCOzs7O0lBSUQsV0FBVzs7UUFDVCxNQUFNLFlBQVksR0FBRztZQUNuQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ3hCLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUc7U0FDMUIsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLHFCQUNQLElBQUksQ0FBQyxNQUFNLEVBQ1gsWUFBWSxDQUNoQixDQUFDO0tBQ0g7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtnQkFDekMseUdBQTRDO2dCQUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN0Qzs7OztZQVBtQixVQUFVO1lBQ3JCLFlBQVk7Ozt3QkFpQmxCLEtBQUs7dUJBT0wsS0FBSztxQkFPTCxLQUFLO3FCQUlMLEtBQUs7b0JBSUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdTbGlkZXJUcmFjaywgbnptLXNsaWRlci10cmFjaycsXG4gIHRlbXBsYXRlVXJsOiAnLi9zbGlkZXItdHJhY2suY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFNsaWRlclRyYWNrIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgcHJlZml4Q2xzID0gJ2FtLXNsaWRlcic7XG4gIGVsU3R5bGU6IG9iamVjdDtcblxuICBwcml2YXRlIF9jbGFzc05hbWU6IG9iamVjdDtcbiAgcHJpdmF0ZSBfaW5jbHVkZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIF9vZmZzZXQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfbGVuZ3RoOiBudW1iZXI7XG4gIHByaXZhdGUgX3N0eWxlOiBvYmplY3Q7XG5cbiAgQElucHV0KClcbiAgZ2V0IGNsYXNzTmFtZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc05hbWU7XG4gIH1cbiAgc2V0IGNsYXNzTmFtZSh2YWx1ZTogb2JqZWN0KSB7XG4gICAgdGhpcy5fY2xhc3NOYW1lID0gdmFsdWU7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IGluY2x1ZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmNsdWRlZDtcbiAgfVxuICBzZXQgaW5jbHVkZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pbmNsdWRlZCA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBvZmZzZXQodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX29mZnNldCA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBsZW5ndGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2xlbmd0aCA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBzdHlsZSh2YWx1ZTogb2JqZWN0KSB7XG4gICAgdGhpcy5fc3R5bGUgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgY29uc3QgcG9zaXRvblN0eWxlID0ge1xuICAgICAgbGVmdDogYCR7dGhpcy5fb2Zmc2V0fSVgLFxuICAgICAgd2lkdGg6IGAke3RoaXMuX2xlbmd0aH0lYFxuICAgIH07XG4gICAgdGhpcy5lbFN0eWxlID0ge1xuICAgICAgLi4udGhpcy5fc3R5bGUsXG4gICAgICAuLi5wb3NpdG9uU3R5bGVcbiAgICB9O1xuICB9XG59XG4iXX0=