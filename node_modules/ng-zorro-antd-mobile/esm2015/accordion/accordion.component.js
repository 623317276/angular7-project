/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ContentChildren, Component, QueryList, Input, forwardRef, HostListener, Output, EventEmitter, HostBinding } from '@angular/core';
import { AccordionService } from './accordion.service';
import { AccordionGroupComponent } from './accordion-group/accordion-group.component';
export class AccordionComponent {
    /**
     * @param {?} _accordionService
     */
    constructor(_accordionService) {
        this._accordionService = _accordionService;
        this.expandAll = false;
        this.openAnimation = {};
        this.accordion = false;
        this.onChange = new EventEmitter();
        this.amAccordion = true;
        this._accordionService.getComponent(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        /** @type {?} */
        let result = [];
        this.groups.toArray().forEach(group => {
            if (group.isOpened) {
                if (this.accordion) {
                    result = group.key;
                }
                else {
                    result.push(group.key);
                }
            }
        });
        this.onChange.emit(result);
    }
    /**
     * @return {?}
     */
    closeAll() {
        this.groups.toArray().forEach(group => {
            group.isOpened = false;
        });
    }
    /**
     * @return {?}
     */
    init() {
        if (this.expandAll && this.groups && this.groups.length > 0) {
            this._oldGroups = this.groups.toArray();
            this._oldGroups.forEach((group, index) => {
                group.openOnInitialization();
            });
            this._subscription = this.groups.changes.subscribe(change => {
                /** @type {?} */
                const newGroups = this.groups.toArray().filter(group => {
                    return this._oldGroups.indexOf(group) === -1;
                });
                newGroups.forEach(group => {
                    group.openOnInitialization();
                });
                this._oldGroups = this.groups.toArray();
            });
        }
        /** @type {?} */
        let currentActiveKey = [];
        if (this.activeKey !== undefined && this.activeKey.length > 0 && !this.accordion && this.groups && this.groups.length > 0) {
            currentActiveKey = this.toArray(this.activeKey);
            this.groups.forEach((group, index) => {
                currentActiveKey.forEach(key => {
                    if (index === parseInt(key, 0)) {
                        setTimeout(() => {
                            group.isOpened = true;
                        }, 0);
                    }
                });
            });
        }
        else if (this.defaultActiveKey !== undefined && !this.expandAll && !this.accordion && this.groups && this.groups.length > 0) {
            this.groups.forEach((group, index) => {
                if (index === parseInt(this.defaultActiveKey, 0)) {
                    setTimeout(() => {
                        group.isOpened = true;
                    }, 0);
                }
            });
        }
    }
    /**
     * @param {?} activeKey
     * @return {?}
     */
    toArray(activeKey) {
        /** @type {?} */
        let currentActiveKey = activeKey;
        if (!Array.isArray(currentActiveKey)) {
            currentActiveKey = currentActiveKey !== undefined && currentActiveKey !== '' ? [currentActiveKey] : [];
        }
        return currentActiveKey;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["accordion"]) {
            this._accordionService.getComponent(this);
        }
        if (changes["expandAll"] || changes["accordion"]) {
            this.init();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'Accordion, nzm-accordion',
                template: "<ng-content></ng-content>",
                providers: [AccordionService]
            }] }
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [
    { type: AccordionService }
];
AccordionComponent.propDecorators = {
    groups: [{ type: ContentChildren, args: [forwardRef(() => AccordionGroupComponent),] }],
    expandAll: [{ type: Input }],
    activeKey: [{ type: Input }],
    defaultActiveKey: [{ type: Input }],
    openAnimation: [{ type: Input }],
    accordion: [{ type: Input }],
    onChange: [{ type: Output }],
    amAccordion: [{ type: HostBinding, args: ['class.am-accordion',] }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    AccordionComponent.prototype._oldGroups;
    /** @type {?} */
    AccordionComponent.prototype._subscription;
    /** @type {?} */
    AccordionComponent.prototype.groups;
    /** @type {?} */
    AccordionComponent.prototype.expandAll;
    /** @type {?} */
    AccordionComponent.prototype.activeKey;
    /** @type {?} */
    AccordionComponent.prototype.defaultActiveKey;
    /** @type {?} */
    AccordionComponent.prototype.openAnimation;
    /** @type {?} */
    AccordionComponent.prototype.accordion;
    /** @type {?} */
    AccordionComponent.prototype.onChange;
    /** @type {?} */
    AccordionComponent.prototype.amAccordion;
    /** @type {?} */
    AccordionComponent.prototype._accordionService;
}

//# sourceMappingURL=data:application/json;base64,