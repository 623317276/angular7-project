/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, HostBinding, Output, EventEmitter, ElementRef } from '@angular/core';
export class DrawerComponent {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.prefixCls = 'am-drawer';
        this.sidebarStyleFinal = {};
        this.contentStyleFinal = {};
        this.overlayStyleFinal = {};
        this.sidebarWidth = 0;
        this.sidebarHeight = 0;
        this.sidebarTop = 0;
        this.dragHandleTop = 0;
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.touchSupported = typeof window === 'object' && 'ontouchstart' in window;
        this._docked = false;
        this._open = false;
        this._position = 'left';
        this.sidebarStyle = {};
        this.contentStyle = {};
        this.overlayStyle = {};
        this.dragHandleStyle = {};
        this.transitions = true;
        this.touch = true;
        this.enableDragHandle = true;
        this.dragToggleDistance = 30;
        this.onOpenChange = new EventEmitter();
        this.am = true;
        this.left = this._position === 'left';
        this.right = this._position === 'right';
        this.top = this._position == 'top';
        this.bottom = this._position == 'bottom';
        this.dockedCls = this._docked;
        this.openCls = this._open;
    }
    /**
     * @return {?}
     */
    get docked() {
        return this._docked;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set docked(v) {
        this._docked = v;
        this.dockedCls = v;
    }
    /**
     * @return {?}
     */
    get open() {
        return this._open;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set open(v) {
        this._open = v;
        this.openCls = v;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set position(v) {
        this._position = v;
        this.right = false;
        this.left = false;
        this.top = false;
        this.bottom = false;
        switch (v) {
            case 'right':
                this.right = true;
                break;
            case 'left':
                this.left = true;
                break;
            case 'top':
                this.top = true;
                break;
            case 'bottom':
                this.bottom = true;
                break;
        }
    }
    /**
     * @return {?}
     */
    onOverlayClicked() {
        if (this._open) {
            this.onOpenChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    isTouching() {
        return this.touchIdentifier !== null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        /** @type {?} */
        const touch = event.changedTouches[0];
        this.touchIdentifier = touch.identifier;
        this.touchStartX = touch.clientX;
        this.touchStartY = touch.clientY;
        this.touchCurrentX = touch.clientX;
        this.touchCurrentY = touch.clientY;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onTouchMove(ev) {
        for (let ind = 0; ind < ev.changedTouches.length; ind++) {
            if (ev.changedTouches[ind].identifier === this.touchIdentifier) {
                this.touchCurrentX = ev.changedTouches[ind].clientX;
                this.touchCurrentY = ev.changedTouches[ind].clientY;
                break;
            }
        }
        this.update();
    }
    /**
     * @return {?}
     */
    onTouchEnd() {
        /** @type {?} */
        const touchWidth = this.touchSidebarWidth();
        if ((this._open && touchWidth < this.sidebarWidth - this.dragToggleDistance) ||
            (!this._open && touchWidth > this.dragToggleDistance)) {
            this.onOpenChange.emit(!this._open);
        }
        /** @type {?} */
        const touchHeight = this.touchSidebarHeight();
        if ((this._open && touchHeight < this.sidebarHeight - this.dragToggleDistance) ||
            (!this._open && touchHeight > this.dragToggleDistance)) {
            this.onOpenChange.emit(!this._open);
        }
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.update();
    }
    /**
     * @return {?}
     */
    saveSidebarSize() {
        /** @type {?} */
        const sidebar = this._el.nativeElement.querySelector('#sidebar');
        /** @type {?} */
        const dragHandle = this._el.nativeElement.querySelector('#dragHandle');
        /** @type {?} */
        const width = sidebar.offsetWidth;
        /** @type {?} */
        const height = sidebar.offsetHeight;
        /** @type {?} */
        const sidebarTop = this.getOffset(sidebar).top;
        /** @type {?} */
        const dragHandleTop = this.getOffset(dragHandle).top;
        if (width !== this.sidebarWidth) {
            this.sidebarWidth = width;
        }
        if (height !== this.sidebarHeight) {
            this.sidebarHeight = height;
        }
        if (sidebarTop !== this.sidebarTop) {
            this.sidebarTop = sidebarTop;
        }
        if (dragHandleTop !== this.dragHandleTop) {
            this.dragHandleTop = dragHandleTop;
        }
    }
    /**
     * @return {?}
     */
    touchSidebarWidth() {
        if (this._position === 'right') {
            if (this._open && window.innerWidth - this.touchStartX < this.sidebarWidth) {
                if (this.touchCurrentX > this.touchStartX) {
                    return this.sidebarWidth + this.touchStartX - this.touchCurrentX;
                }
                return this.sidebarWidth;
            }
            return Math.min(window.innerWidth - this.touchCurrentX, this.sidebarWidth);
        }
        if (this._position === 'left') {
            if (this._open && this.touchStartX < this.sidebarWidth) {
                if (this.touchCurrentX > this.touchStartX) {
                    return this.sidebarWidth;
                }
                return this.sidebarWidth - this.touchStartX + this.touchCurrentX;
            }
            return Math.min(this.touchCurrentX, this.sidebarWidth);
        }
    }
    /**
     * @return {?}
     */
    touchSidebarHeight() {
        if (this._position === 'bottom') {
            if (this._open &&
                this._el.nativeElement.offsetHeight - this.touchStartY + this._el.nativeElement.offsetTop < this.sidebarHeight) {
                if (this.touchCurrentY > this.touchStartY) {
                    return this.sidebarHeight + this.touchStartY - this.touchCurrentY;
                }
                return this.sidebarHeight;
            }
            return Math.min(this._el.nativeElement.offsetHeight - this.touchCurrentY + this._el.nativeElement.offsetTop, this.sidebarHeight);
        }
        if (this._position === 'top') {
            /** @type {?} */
            const touchStartOffsetY = this.touchStartY - this.sidebarTop;
            if (this._open && touchStartOffsetY < this.sidebarHeight) {
                if (this.touchCurrentY > this.touchStartY) {
                    return this.sidebarHeight;
                }
                return this.sidebarHeight - this.touchStartY + this.touchCurrentY;
            }
            return Math.min(this.touchCurrentY - this.dragHandleTop, this.sidebarHeight);
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    renderStyle({ sidebarStyle, isTouching, overlayStyle, contentStyle }) {
        if (this._position === 'right' || this._position === 'left') {
            sidebarStyle.transform = `translateX(0%)`;
            sidebarStyle.WebkitTransform = `translateX(0%)`;
            if (isTouching) {
                /** @type {?} */
                const percentage = this.touchSidebarWidth() / this.sidebarWidth;
                // slide open to what we dragged
                if (this._position === 'right') {
                    sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;
                    sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;
                }
                if (this._position === 'left') {
                    sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;
                    sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) * 100}%)`;
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = `${this.sidebarWidth}px`;
            }
        }
        if (this._position === 'top' || this._position === 'bottom') {
            sidebarStyle.transform = `translateY(0%)`;
            sidebarStyle.WebkitTransform = `translateY(0%)`;
            if (isTouching) {
                /** @type {?} */
                const percentage = this.touchSidebarHeight() / this.sidebarHeight;
                if (this._position === 'bottom') {
                    sidebarStyle.transform = `translateY(${(1 - percentage) * 100}%)`;
                    sidebarStyle.WebkitTransform = `translateY(${(1 - percentage) * 100}%)`;
                }
                if (this._position === 'top') {
                    sidebarStyle.transform = `translateY(-${(1 - percentage) * 100}%)`;
                    sidebarStyle.WebkitTransform = `translateY(-${(1 - percentage) * 100}%)`;
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = `${this.sidebarHeight}px`;
            }
        }
    }
    /**
     * @return {?}
     */
    update() {
        /** @type {?} */
        const sidebarStyle = Object.assign({}, this.sidebarStyle);
        /** @type {?} */
        const contentStyle = Object.assign({}, this.contentStyle);
        /** @type {?} */
        const overlayStyle = Object.assign({}, this.overlayStyle);
        if (this.isTouching()) {
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: true,
                contentStyle: undefined,
                overlayStyle: overlayStyle
            });
        }
        else if (this._docked) {
            this.dockedCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: contentStyle,
                overlayStyle: undefined
            });
        }
        else if (this._open) {
            this.openCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: undefined,
                overlayStyle: undefined
            });
            overlayStyle["opacity"] = 1;
            overlayStyle["visibility"] = 'visible';
        }
        if (this.isTouching() || !this.transitions) {
            sidebarStyle["transition"] = 'none';
            sidebarStyle["WebkitTransition"] = 'none';
            contentStyle["transition"] = 'none';
            overlayStyle["transition"] = 'none';
        }
        this.sidebarStyleFinal = sidebarStyle;
        this.contentStyleFinal = contentStyle;
        this.overlayStyleFinal = overlayStyle;
    }
    /**
     * @param {?} ele
     * @return {?}
     */
    getOffset(ele) {
        /** @type {?} */
        let el = ele;
        /** @type {?} */
        let _x = 0;
        /** @type {?} */
        let _y = 0;
        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (!this.isTouching()) {
            this.saveSidebarSize();
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.update();
    }
}
DrawerComponent.decorators = [
    { type: Component, args: [{
                selector: 'Drawer, nzm-drawer',
                template: "<div class=\"{{prefixCls}}-sidebar\"\n     [ngStyle]=\"sidebarStyleFinal\"\n     id=\"sidebar\">\n  <ng-template [ngTemplateOutlet]=\"sidebar\"></ng-template>\n</div>\n<div class=\"{{prefixCls}}-overlay\"\n     [ngStyle]=\"overlayStyleFinal\"\n     role=\"presentation\"\n     ref=\"overlay\"\n     (click)=\"onOverlayClicked()\"\n></div>\n<div class=\"{{prefixCls}}-content\"\n     [ngStyle]=\"contentStyleFinal\"\n     ref=\"content\">\n  <div *ngIf=\"touch && touchSupported && !open && !docked && enableDragHandle\"\n       id=\"dragHandle\"\n       class=\"{{prefixCls}}-draghandle\"\n       [ngStyle]=\"dragHandleStyle\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd()\"\n       (touchcancle)=\"onTouchEnd()\"\n  ></div>\n  <ng-content></ng-content>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DrawerComponent.ctorParameters = () => [
    { type: ElementRef }
];
DrawerComponent.propDecorators = {
    sidebar: [{ type: Input }],
    sidebarStyle: [{ type: Input }],
    contentStyle: [{ type: Input }],
    overlayStyle: [{ type: Input }],
    dragHandleStyle: [{ type: Input }],
    transitions: [{ type: Input }],
    touch: [{ type: Input }],
    enableDragHandle: [{ type: Input }],
    dragToggleDistance: [{ type: Input }],
    docked: [{ type: Input }],
    open: [{ type: Input }],
    position: [{ type: Input }],
    onOpenChange: [{ type: Output }],
    am: [{ type: HostBinding, args: ['class.am-drawer',] }],
    left: [{ type: HostBinding, args: ['class.am-drawer-left',] }],
    right: [{ type: HostBinding, args: ['class.am-drawer-right',] }],
    top: [{ type: HostBinding, args: ['class.am-drawer-top',] }],
    bottom: [{ type: HostBinding, args: ['class.am-drawer-bottom',] }],
    dockedCls: [{ type: HostBinding, args: ['class.am-drawer-docked',] }],
    openCls: [{ type: HostBinding, args: ['class.am-drawer-open',] }]
};
if (false) {
    /** @type {?} */
    DrawerComponent.prototype.prefixCls;
    /** @type {?} */
    DrawerComponent.prototype.sidebarStyleFinal;
    /** @type {?} */
    DrawerComponent.prototype.contentStyleFinal;
    /** @type {?} */
    DrawerComponent.prototype.overlayStyleFinal;
    /** @type {?} */
    DrawerComponent.prototype.sidebarWidth;
    /** @type {?} */
    DrawerComponent.prototype.sidebarHeight;
    /** @type {?} */
    DrawerComponent.prototype.sidebarTop;
    /** @type {?} */
    DrawerComponent.prototype.dragHandleTop;
    /** @type {?} */
    DrawerComponent.prototype.touchIdentifier;
    /** @type {?} */
    DrawerComponent.prototype.touchStartX;
    /** @type {?} */
    DrawerComponent.prototype.touchStartY;
    /** @type {?} */
    DrawerComponent.prototype.touchCurrentX;
    /** @type {?} */
    DrawerComponent.prototype.touchCurrentY;
    /** @type {?} */
    DrawerComponent.prototype.touchSupported;
    /** @type {?} */
    DrawerComponent.prototype._docked;
    /** @type {?} */
    DrawerComponent.prototype._open;
    /** @type {?} */
    DrawerComponent.prototype._position;
    /** @type {?} */
    DrawerComponent.prototype.sidebar;
    /** @type {?} */
    DrawerComponent.prototype.sidebarStyle;
    /** @type {?} */
    DrawerComponent.prototype.contentStyle;
    /** @type {?} */
    DrawerComponent.prototype.overlayStyle;
    /** @type {?} */
    DrawerComponent.prototype.dragHandleStyle;
    /** @type {?} */
    DrawerComponent.prototype.transitions;
    /** @type {?} */
    DrawerComponent.prototype.touch;
    /** @type {?} */
    DrawerComponent.prototype.enableDragHandle;
    /** @type {?} */
    DrawerComponent.prototype.dragToggleDistance;
    /** @type {?} */
    DrawerComponent.prototype.onOpenChange;
    /** @type {?} */
    DrawerComponent.prototype.am;
    /** @type {?} */
    DrawerComponent.prototype.left;
    /** @type {?} */
    DrawerComponent.prototype.right;
    /** @type {?} */
    DrawerComponent.prototype.top;
    /** @type {?} */
    DrawerComponent.prototype.bottom;
    /** @type {?} */
    DrawerComponent.prototype.dockedCls;
    /** @type {?} */
    DrawerComponent.prototype.openCls;
    /** @type {?} */
    DrawerComponent.prototype._el;
}

//# sourceMappingURL=data:application/json;base64,