/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, HostBinding, Input, ElementRef } from '@angular/core';
import { Models } from '../date/DataTypes';
/**
 * @record
 */
export function PropsType() { }
/** @type {?} */
PropsType.prototype.locale;
/** @type {?} */
PropsType.prototype.monthData;
/** @type {?|undefined} */
PropsType.prototype.rowSize;
/** @type {?|undefined} */
PropsType.prototype.getDateExtra;
/** @type {?|undefined} */
PropsType.prototype.onCellClick;
/** @type {?} */
PropsType.prototype.ref;
export class SingleMonthComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.props = /** @type {?} */ ({
            rowSize: 'normal'
        });
        this.state = {
            weekComponents: []
        };
        this.singleMonth = true;
        this.genWeek = (weeksData, index) => {
            const { getDateExtra, monthData, onCellClick, locale, rowSize } = this.props;
            /** @type {?} */
            let rowCls = 'row';
            /** @type {?} */
            let weeksDataList = [];
            if (rowSize === 'xl') {
                rowCls += ' row-xl';
            }
            weeksData.forEach((day, dayOfWeek) => {
                /** @type {?} */
                const extra = (getDateExtra && getDateExtra(new Date(day.tick))) || {};
                /** @type {?} */
                let info = extra.info;
                /** @type {?} */
                const disable = extra.disable || day.outOfDate;
                /** @type {?} */
                let cls = 'date';
                /** @type {?} */
                let lCls = 'left';
                /** @type {?} */
                let rCls = 'right';
                /** @type {?} */
                let infoCls = 'info';
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    cls += ' grey';
                }
                if (disable) {
                    cls += ' disable';
                }
                else if (info) {
                    cls += ' important';
                }
                if (day.selected) {
                    cls += ' date-selected';
                    /** @type {?} */
                    let styleType = day.selected;
                    switch (styleType) {
                        case Models.SelectType.Only:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.All:
                            info = locale.begin_over;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.Start:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                        case Models.SelectType.Middle:
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                if (day.isLastOfMonth || dayOfWeek === 6) {
                                    styleType = Models.SelectType.All;
                                }
                                else {
                                    styleType = Models.SelectType.Start;
                                }
                            }
                            else if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.End;
                            }
                            break;
                        case Models.SelectType.End:
                            info = locale.over;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                    }
                    switch (styleType) {
                        case Models.SelectType.Single:
                        case Models.SelectType.Only:
                        case Models.SelectType.All:
                            cls += ' selected-single';
                            break;
                        case Models.SelectType.Start:
                            cls += ' selected-start';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.Middle:
                            cls += ' selected-middle';
                            lCls += ' date-selected';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.End:
                            cls += ' selected-end';
                            lCls += ' date-selected';
                            break;
                    }
                }
                weeksDataList[dayOfWeek] = {
                    lCls,
                    cls,
                    day,
                    rCls,
                    infoCls,
                    info,
                    extra,
                    disable,
                    onCellClick: onCellClick,
                    monthData
                };
            });
            this.state.weekComponents[index] = {
                index: index,
                rowCls,
                weeksDataList
            };
        };
        this.updateWeeks = (monthData) => {
            (monthData || this.props.monthData).weeks.forEach((week, index) => {
                this.genWeek(week, index);
            });
        };
        this.setWarpper = (dom) => {
            this.wrapperDivDOM = dom;
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this.props = Object.assign({}, this.props, value);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClickCell(item) {
        !item.disable && item.onCellClick && item.onCellClick(item.day, item.monthData);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setWarpper(this._elementRef.nativeElement);
        this.props.monthData.weeks.forEach((week, index) => {
            this.genWeek(week, index);
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ref = this.props.ref;
        this.ref(this);
    }
}
SingleMonthComponent.decorators = [
    { type: Component, args: [{
                selector: 'SingleMonth, nzm-single-month',
                template: "<div class=\"month-title\">\n  {{props.monthData.title}}\n</div>\n<div class=\"date\">\n  <div *ngFor=\"let row of state.weekComponents;let i = index;\" [ngClass]=\"row.rowCls\">\n    <div *ngFor=\"let cell of row.weeksDataList;let j = index;\"\n         class=\"{{'cell ' + (row.extra && row.extra.cellCls || '')}}\"\n         (click)=\"onClickCell(cell)\"\n    >\n      <div *ngIf=\"row.extra && row.extra.cellRender\">test</div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" class=\"date-wrapper\">\n        <span [ngClass]=\"cell.lCls\"></span>\n        <div [ngClass]=\"cell.cls\">\n          {{cell.day && cell.day.dayOfMonth || ''}}\n        </div>\n        <span [ngClass]=\"cell.rCls\"></span>\n      </div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" [ngClass]=\"cell.infoCls\">\n        {{cell.info}}\n      </div>\n    </div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SingleMonthComponent.ctorParameters = () => [
    { type: ElementRef }
];
SingleMonthComponent.propDecorators = {
    data: [{ type: Input }],
    singleMonth: [{ type: HostBinding, args: ['class.single-month',] }]
};
if (false) {
    /** @type {?} */
    SingleMonthComponent.prototype.props;
    /** @type {?} */
    SingleMonthComponent.prototype.state;
    /** @type {?} */
    SingleMonthComponent.prototype.ref;
    /** @type {?} */
    SingleMonthComponent.prototype.wrapperDivDOM;
    /** @type {?} */
    SingleMonthComponent.prototype.singleMonth;
    /** @type {?} */
    SingleMonthComponent.prototype.genWeek;
    /** @type {?} */
    SingleMonthComponent.prototype.updateWeeks;
    /** @type {?} */
    SingleMonthComponent.prototype.setWarpper;
    /** @type {?} */
    SingleMonthComponent.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,