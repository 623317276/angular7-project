/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Models } from '../date/DataTypes';
import { formatDate } from '../util';
import defaultLocale from '../locale/zh_CN';
/**
 * @record
 */
export function StateType() { }
/** @type {?} */
StateType.prototype.months;
export default class DatePicker {
    constructor() {
        this.props = /** @type {?} */ ({
            prefixCls: 'rmc-calendar',
            infinite: false,
            infiniteOpt: false,
            defaultDate: new Date(),
            initalMonths: 6,
            locale: defaultLocale
        });
        this.state = {
            months: []
        };
        this.visibleMonth = [];
        this.getDateWithoutTime = (date) => {
            if (!date)
                return 0;
            return +new Date(date.getFullYear(), date.getMonth(), date.getDate());
        };
        this.genWeekData = (firstDate) => {
            /** @type {?} */
            const minDateTime = this.getDateWithoutTime(this.props.minDate);
            /** @type {?} */
            const maxDateTime = this.getDateWithoutTime(this.props.maxDate) || Number.POSITIVE_INFINITY;
            /** @type {?} */
            const weeks = [];
            /** @type {?} */
            const nextMonth = this.getMonthDate(firstDate, 1).firstDate;
            /** @type {?} */
            let currentDay = firstDate;
            /** @type {?} */
            let currentWeek = [];
            weeks.push(currentWeek);
            /** @type {?} */
            let startWeekday = currentDay.getDay();
            if (startWeekday > 0) {
                for (let i = 0; i < startWeekday; i++) {
                    currentWeek.push(/** @type {?} */ ({}));
                }
            }
            while (currentDay < nextMonth) {
                if (currentWeek.length === 7) {
                    currentWeek = [];
                    weeks.push(currentWeek);
                }
                /** @type {?} */
                const dayOfMonth = currentDay.getDate();
                /** @type {?} */
                const tick = +currentDay;
                currentWeek.push({
                    tick,
                    dayOfMonth,
                    selected: Models.SelectType.None,
                    isFirstOfMonth: dayOfMonth === 1,
                    isLastOfMonth: false,
                    outOfDate: tick < minDateTime || tick > maxDateTime
                });
                currentDay = new Date(currentDay.getTime() + 3600 * 24 * 1000);
            }
            currentWeek[currentWeek.length - 1].isLastOfMonth = true;
            return weeks;
        };
        this.selectDateRange = (startDate, endDate, clear = false) => {
            const { getDateExtra, type, onSelectHasDisableDate } = this.props;
            if (type === 'one') {
                endDate = undefined;
            }
            /** @type {?} */
            const time1 = this.getDateWithoutTime(startDate);
            /** @type {?} */
            const time2 = this.getDateWithoutTime(endDate);
            /** @type {?} */
            const startDateTick = !time2 || time1 < time2 ? time1 : time2;
            /** @type {?} */
            const endDateTick = time2 && time1 > time2 ? time1 : time2;
            /** @type {?} */
            const startMonthDate = this.getMonthDate(new Date(startDateTick)).firstDate;
            /** @type {?} */
            const endMonthDate = endDateTick ? new Date(endDateTick) : this.getMonthDate(new Date(startDateTick)).lastDate;
            /** @type {?} */
            let unuseable = [];
            /** @type {?} */
            let needUpdate = false;
            this.state.months
                .filter(m => {
                return m.firstDate >= startMonthDate && m.firstDate <= endMonthDate;
            })
                .forEach(m => {
                m.weeks.forEach(w => w
                    .filter(d => {
                    if (!endDateTick) {
                        return d.tick && this.inDate(startDateTick, d.tick);
                    }
                    else {
                        return d.tick && d.tick >= startDateTick && d.tick <= endDateTick;
                    }
                })
                    .forEach(d => {
                    /** @type {?} */
                    const oldValue = d.selected;
                    if (clear) {
                        d.selected = Models.SelectType.None;
                    }
                    else {
                        /** @type {?} */
                        const info = (getDateExtra && getDateExtra(new Date(d.tick))) || {};
                        if (d.outOfDate || info.disable) {
                            unuseable.push(d.tick);
                        }
                        if (this.inDate(startDateTick, d.tick)) {
                            if (type === 'one') {
                                d.selected = Models.SelectType.Single;
                            }
                            else if (!endDateTick) {
                                d.selected = Models.SelectType.Only;
                            }
                            else if (startDateTick !== endDateTick) {
                                d.selected = Models.SelectType.Start;
                            }
                            else {
                                d.selected = Models.SelectType.All;
                            }
                        }
                        else if (this.inDate(endDateTick, d.tick)) {
                            d.selected = Models.SelectType.End;
                        }
                        else {
                            d.selected = Models.SelectType.Middle;
                        }
                    }
                    needUpdate = needUpdate || d.selected !== oldValue;
                }));
                if (needUpdate && m.componentRef) {
                    m.componentRef.updateWeeks();
                }
            });
            if (unuseable.length > 0) {
                if (onSelectHasDisableDate) {
                    onSelectHasDisableDate(unuseable.map(tick => new Date(tick)));
                }
                else {
                    console.warn('Unusable date. You can handle by onSelectHasDisableDate.', unuseable);
                }
            }
        };
        this.computeVisible = (clientHeight, scrollTop) => {
            /** @type {?} */
            let needUpdate = false;
            /** @type {?} */
            const MAX_VIEW_PORT = clientHeight * 2;
            /** @type {?} */
            const MIN_VIEW_PORT = clientHeight;
            /** @type {?} */
            const filterFunc = (vm) => vm.y &&
                vm.height &&
                (vm.y + vm.height > scrollTop - MAX_VIEW_PORT && vm.y < scrollTop + clientHeight + MAX_VIEW_PORT);
            if (this.props.infiniteOpt && this.visibleMonth.length > 12) {
                this.visibleMonth = this.visibleMonth.filter(filterFunc).sort((a, b) => +a.firstDate - +b.firstDate);
            }
            // 当小缓冲区不满时填充
            if (this.visibleMonth.length > 0) {
                /** @type {?} */
                const last = this.visibleMonth[this.visibleMonth.length - 1];
                if (last.y !== undefined && last.height && last.y + last.height < scrollTop + clientHeight + MIN_VIEW_PORT) {
                    /** @type {?} */
                    const lastIndex = this.state.months.indexOf(last);
                    for (let i = 1; i <= 2; i++) {
                        /** @type {?} */
                        const index = lastIndex + i;
                        if (index < this.state.months.length && this.visibleMonth.indexOf(this.state.months[index]) < 0) {
                            this.visibleMonth.push(this.state.months[index]);
                        }
                        else {
                            this.canLoadNext() && this.genMonthData(undefined, 1);
                        }
                    }
                    needUpdate = true;
                }
                /** @type {?} */
                const first = this.visibleMonth[0];
                if (first.y !== undefined && first.height && first.y > scrollTop - MIN_VIEW_PORT) {
                    /** @type {?} */
                    const firstIndex = this.state.months.indexOf(first);
                    for (let i = 1; i <= 2; i++) {
                        /** @type {?} */
                        const index = firstIndex - i;
                        if (index >= 0 && this.visibleMonth.indexOf(this.state.months[index]) < 0) {
                            this.visibleMonth.unshift(this.state.months[index]);
                            needUpdate = true;
                        }
                    }
                }
            }
            else if (this.state.months.length > 0) {
                this.visibleMonth = this.state.months.filter(filterFunc);
                needUpdate = true;
            }
            return needUpdate;
        };
        this.createOnScroll = () => {
            /** @type {?} */
            let clientHeight = 0;
            /** @type {?} */
            let scrollTop = 0;
            return (data) => {
                const { client, top } = data;
                clientHeight = client;
                scrollTop = top;
                this.computeVisible(clientHeight, scrollTop);
                // 以上方法目前无问题，如果后续有性能问题，改用如下方法，但以下方法会导致刷新稍微延迟现象
                // if (timer) {
                //   return;
                // }
                //
                // timer = setTimeout(() => {
                //   timer = undefined;
                //
                //   if (this.computeVisible(clientHeight, scrollTop)) {
                //     console.log('update dom');
                //   }
                // }, 50);
            };
        };
        this.baseOnCellClick = (day) => {
            if (!day.tick)
                return;
            this.props.onCellClick && this.props.onCellClick(new Date(day.tick));
        };
    }
    /**
     * @return {?}
     */
    init() {
        const { initalMonths = 6, defaultDate } = this.props;
        for (let i = 0; i < initalMonths; i++) {
            this.canLoadNext() && this.genMonthData(defaultDate, i);
        }
        this.visibleMonth = [...this.state.months];
    }
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    receiveProps(oldValue, newValue) {
        if (oldValue && newValue) {
            if (oldValue.startDate !== newValue.startDate || oldValue.endDate !== newValue.endDate) {
                if (oldValue.startDate) {
                    this.selectDateRange(oldValue.startDate, oldValue.endDate, true);
                }
                if (newValue.startDate) {
                    this.selectDateRange(newValue.startDate, newValue.endDate);
                }
            }
        }
    }
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    getMonthDate(date = new Date(), addMonth = 0) {
        /** @type {?} */
        const y = date.getFullYear();
        /** @type {?} */
        const m = date.getMonth();
        return {
            firstDate: new Date(y, m + addMonth, 1),
            lastDate: new Date(y, m + 1 + addMonth, 0)
        };
    }
    /**
     * @return {?}
     */
    canLoadPrev() {
        const { minDate } = this.props;
        return (!minDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(minDate).firstDate < +this.state.months[0].firstDate);
    }
    /**
     * @return {?}
     */
    canLoadNext() {
        const { maxDate } = this.props;
        return (!maxDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(maxDate).firstDate > +this.state.months[this.state.months.length - 1].firstDate);
    }
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    genMonthData(date, addMonth = 0) {
        if (!date) {
            date = addMonth >= 0 ? this.state.months[this.state.months.length - 1].firstDate : this.state.months[0].firstDate;
        }
        if (!date) {
            date = new Date();
        }
        const { locale } = this.props;
        const { firstDate, lastDate } = this.getMonthDate(date, addMonth);
        /** @type {?} */
        const weeks = this.genWeekData(firstDate);
        /** @type {?} */
        const title = formatDate(firstDate, locale ? locale.monthTitle : 'yyyy/MM', this.props.locale);
        /** @type {?} */
        const data = /** @type {?} */ ({
            title,
            firstDate,
            lastDate,
            weeks
        });
        data.component = this.genMonthComponent(data);
        if (addMonth >= 0) {
            this.state.months.push(data);
        }
        else {
            this.state.months.unshift(data);
        }
        const { startDate, endDate } = this.props;
        if (startDate) {
            this.selectDateRange(startDate, endDate);
        }
        return data;
    }
    /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    inDate(date, tick) {
        return date <= tick && tick < date + 24 * 3600000;
    }
}
if (false) {
    /** @type {?} */
    DatePicker.prototype.props;
    /** @type {?} */
    DatePicker.prototype.state;
    /** @type {?} */
    DatePicker.prototype.visibleMonth;
    /** @type {?} */
    DatePicker.prototype.genMonthComponent;
    /** @type {?} */
    DatePicker.prototype.getDateWithoutTime;
    /** @type {?} */
    DatePicker.prototype.genWeekData;
    /** @type {?} */
    DatePicker.prototype.selectDateRange;
    /** @type {?} */
    DatePicker.prototype.computeVisible;
    /** @type {?} */
    DatePicker.prototype.createOnScroll;
    /** @type {?} */
    DatePicker.prototype.baseOnCellClick;
}

//# sourceMappingURL=data:application/json;base64,