/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewEncapsulation, Input, ElementRef, ViewChild } from '@angular/core';
import DatePicker from './datepicker.base.component';
export class DatePickerComponent extends DatePicker {
    constructor() {
        super();
        this.transform = '';
        this._initDelta = 0;
        this._lastY = 0;
        this._delta = this._initDelta;
        this.amCalendar = true;
        this.datePicker = true;
        this.genMonthComponent = (data) => {
            if (!data)
                return;
            return {
                monthData: data,
                locale: this.props.locale,
                rowSize: this.props.rowSize,
                onCellClick: this.baseOnCellClick,
                getDateExtra: this.props.getDateExtra,
                ref: dom => {
                    data.componentRef = dom || data.componentRef || undefined;
                    data.updateLayout = () => {
                        this.computeHeight(data, dom);
                    };
                    data.updateLayout();
                }
            };
        };
        this.computeHeight = (data, singleMonth) => {
            if (singleMonth && singleMonth.wrapperDivDOM) {
                if (!data.height && !singleMonth.wrapperDivDOM.clientHeight) {
                    setTimeout(() => this.computeHeight(data, singleMonth), 500);
                    return;
                }
                data.height = singleMonth.wrapperDivDOM.clientHeight || data.height || 0;
                data.y = singleMonth.wrapperDivDOM.offsetTop || data.y || 0;
            }
        };
        this.setLayout = (dom) => {
            if (dom) {
                const { onLayout } = this.props;
                onLayout && onLayout(dom.clientHeight);
                /** @type {?} */
                const scrollHandler = this.createOnScroll();
                dom.onscroll = evt => {
                    scrollHandler({
                        client: dom.clientHeight,
                        full: (/** @type {?} */ (evt.currentTarget)).clientHeight,
                        top: (/** @type {?} */ (evt.currentTarget)).scrollTop
                    });
                };
            }
        };
        this.setPanel = (dom) => {
            this._panel = dom;
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onCellClick(value) {
        this.props.onCellClick = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endDate(value) {
        /** @type {?} */
        const oldProps = Object.assign({}, this.props);
        this.props.endDate = value;
        this.receiveProps(oldProps, this.props);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startDate(value) {
        /** @type {?} */
        const oldProps = Object.assign({}, this.props);
        this.props.startDate = value;
        this.receiveProps(oldProps, this.props);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set propsData(value) {
        this.props = Object.assign({}, this.props, value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onSelectHasDisableDate(value) {
        this.props.onSelectHasDisableDate = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set onLayout(value) {
        this.props.onLayout = value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        this._lastY = event.touches[0].screenY;
        this._delta = this._initDelta;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        /** @type {?} */
        const ele = event.currentTarget;
        /** @type {?} */
        const isReachTop = ele.scrollTop === 0;
        if (isReachTop) {
            this._delta = event.touches[0].screenY - this._lastY;
            if (this._delta > 0) {
                event.preventDefault();
                if (this._delta > 80) {
                    this._delta = 80;
                }
            }
            else {
                this._delta = 0;
            }
            this.setTransform(this._panel.style, `translate3d(0,${this._delta}px,0)`);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        this.onFinish();
    }
    /**
     * @return {?}
     */
    onFinish() {
        if (this._delta > 40 && this.canLoadPrev()) {
            this.genMonthData(this.state.months[0].firstDate, -1);
            this.visibleMonth = this.state.months.slice(0, this.props.initalMonths);
            this.state.months.forEach(m => {
                m.updateLayout && m.updateLayout();
            });
        }
        this.setTransform(this._panel.style, `translate3d(0,0,0)`);
        this.setTransition(this._panel.style, '.3s');
        setTimeout(() => {
            this._panel && this.setTransition(this._panel.style, '');
        }, 300);
    }
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    setTransform(nodeStyle, value) {
        this.transform = value;
        nodeStyle.transform = value;
        nodeStyle.webkitTransform = value;
    }
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    setTransition(nodeStyle, value) {
        nodeStyle.transition = value;
        nodeStyle.webkitTransition = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
        this.setLayout(this.layoutDom.nativeElement);
        this.setPanel(this.panelDom.nativeElement);
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'CalendarDatePicker, nzm-calendar-date-picker',
                template: "<CalendarWeekPanel [locale]=\"props.locale\"></CalendarWeekPanel>\n<div #layout\n     class=\"wrapper\"\n     style=\"overflow-x:hidden;overflow-y:visible;-webkit-overflow-scrolling:touch;\"\n     (touchstart)=\"onTouchStart($event)\"\n     (touchmove)=\"onTouchMove($event)\"\n     (touchend)=\"onTouchEnd($event)\"\n>\n  <div #panel [ngStyle]=\"{transform: transform}\">\n    <div *ngIf=\"canLoadPrev()\" class=\"load-tip\">{{props.locale.loadPrevMonth}}</div>\n    <div class=\"months\">\n      <SingleMonth *ngFor=\"let item of visibleMonth;let i = index;\"\n                   style=\"display: block;\"\n                   [data]=\"item.component\"\n      ></SingleMonth>\n    </div>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [];
DatePickerComponent.propDecorators = {
    layoutDom: [{ type: ViewChild, args: ['layout',] }],
    panelDom: [{ type: ViewChild, args: ['panel',] }],
    onCellClick: [{ type: Input }],
    endDate: [{ type: Input }],
    startDate: [{ type: Input }],
    propsData: [{ type: Input }],
    onSelectHasDisableDate: [{ type: Input }],
    onLayout: [{ type: Input }],
    amCalendar: [{ type: HostBinding, args: ['class.am-calendar',] }],
    datePicker: [{ type: HostBinding, args: ['class.date-picker',] }]
};
if (false) {
    /** @type {?} */
    DatePickerComponent.prototype.transform;
    /** @type {?} */
    DatePickerComponent.prototype._panel;
    /** @type {?} */
    DatePickerComponent.prototype._initDelta;
    /** @type {?} */
    DatePickerComponent.prototype._lastY;
    /** @type {?} */
    DatePickerComponent.prototype._delta;
    /** @type {?} */
    DatePickerComponent.prototype.layoutDom;
    /** @type {?} */
    DatePickerComponent.prototype.panelDom;
    /** @type {?} */
    DatePickerComponent.prototype.amCalendar;
    /** @type {?} */
    DatePickerComponent.prototype.datePicker;
    /** @type {?} */
    DatePickerComponent.prototype.genMonthComponent;
    /** @type {?} */
    DatePickerComponent.prototype.computeHeight;
    /** @type {?} */
    DatePickerComponent.prototype.setLayout;
    /** @type {?} */
    DatePickerComponent.prototype.setPanel;
}

//# sourceMappingURL=data:application/json;base64,