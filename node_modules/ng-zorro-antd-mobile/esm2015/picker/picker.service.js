/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { PopupService } from '../core/core.module';
export class Picker extends PopupService {
    /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    static showPicker(config = Picker.defaultOptions, confirmCallback, cancelCallback) {
        /** @type {?} */
        const options = new PickerOptions();
        Object.assign(options, config, {
            hidePicker: (event) => {
                this.hidePicker();
            },
            confirm: (event) => {
                if (confirmCallback) {
                    confirmCallback(event);
                }
            },
            cancel: () => {
                if (cancelCallback) {
                    cancelCallback();
                }
            }
        });
        /** @type {?} */
        const optionalParams = [
            'data',
            'value',
            'cols',
            'mask',
            'title',
            'okText',
            'dismissText',
            'disabled',
            'cascade',
            'onOk',
            'onPickerChange',
            'indicatorStyle'
        ];
        optionalParams.forEach(param => {
            if (typeof this[param] !== 'undefined') {
                (/** @type {?} */ (options))[param] = this[param];
            }
        });
        /** @type {?} */
        const childInjector = Injector.create([
            {
                provide: PickerOptions,
                useValue: options
            }
        ]);
        Picker.showPopup(PickerComponent, childInjector);
    }
    /**
     * @return {?}
     */
    static hidePicker() {
        Picker.hidePopup();
    }
}
Picker.defaultOptions = new PickerOptions();
Picker.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    Picker.defaultOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInBpY2tlci9waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBa0IsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5ELE1BQU0sYUFBYyxTQUFRLFlBQVk7Ozs7Ozs7SUFHdEMsTUFBTSxDQUFDLFVBQVUsQ0FDZixTQUF3QixNQUFNLENBQUMsY0FBYyxFQUM3QyxlQUFnQyxFQUNoQyxjQUErQjs7UUFFL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7WUFDN0IsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFRLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNuQjtZQUNELE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBUSxFQUFFO2dCQUN2QixJQUFJLGVBQWUsRUFBRTtvQkFDbkIsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN4QjthQUNGO1lBQ0QsTUFBTSxFQUFFLEdBQVMsRUFBRTtnQkFDakIsSUFBSSxjQUFjLEVBQUU7b0JBQ2xCLGNBQWMsRUFBRSxDQUFDO2lCQUNsQjthQUNGO1NBQ0YsQ0FBQyxDQUFDOztRQUVILE1BQU0sY0FBYyxHQUFlO1lBQ2pDLE1BQU07WUFDTixPQUFPO1lBQ1AsTUFBTTtZQUNOLE1BQU07WUFDTixPQUFPO1lBQ1AsUUFBUTtZQUNSLGFBQWE7WUFDYixVQUFVO1lBQ1YsU0FBUztZQUNULE1BQU07WUFDTixnQkFBZ0I7WUFDaEIsZ0JBQWdCO1NBQ2pCLENBQUM7UUFDRixjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdCLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxFQUFFO2dCQUN0QyxtQkFBQyxPQUFjLEVBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7U0FDRixDQUFDLENBQUM7O1FBQ0gsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNwQztnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsUUFBUSxFQUFFLE9BQU87YUFDbEI7U0FDRixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztLQUNsRDs7OztJQUVELE1BQU0sQ0FBQyxVQUFVO1FBQ2YsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ3BCOzt3QkF0RHNDLElBQUksYUFBYSxFQUFFOztZQUYzRCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQaWNrZXJDYWxsQmFjaywgUGlja2VyT3B0aW9ucyB9IGZyb20gJy4vcGlja2VyLW9wdGlvbnMucHJvdmlkZXInO1xuaW1wb3J0IHsgUG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9jb3JlLm1vZHVsZSc7XG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGlja2VyIGV4dGVuZHMgUG9wdXBTZXJ2aWNlIHtcbiAgc3RhdGljIGRlZmF1bHRPcHRpb25zOiBQaWNrZXJPcHRpb25zID0gbmV3IFBpY2tlck9wdGlvbnMoKTtcblxuICBzdGF0aWMgc2hvd1BpY2tlcihcbiAgICBjb25maWc6IFBpY2tlck9wdGlvbnMgPSBQaWNrZXIuZGVmYXVsdE9wdGlvbnMsXG4gICAgY29uZmlybUNhbGxiYWNrPzogUGlja2VyQ2FsbEJhY2ssXG4gICAgY2FuY2VsQ2FsbGJhY2s/OiBQaWNrZXJDYWxsQmFja1xuICApOiB2b2lkIHtcbiAgICBjb25zdCBvcHRpb25zID0gbmV3IFBpY2tlck9wdGlvbnMoKTtcbiAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZywge1xuICAgICAgaGlkZVBpY2tlcjogKGV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpcm06IChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoY29uZmlybUNhbGxiYWNrKSB7XG4gICAgICAgICAgY29uZmlybUNhbGxiYWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbmNlbDogKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBvcHRpb25hbFBhcmFtczogQXJyYXk8YW55PiA9IFtcbiAgICAgICdkYXRhJyxcbiAgICAgICd2YWx1ZScsXG4gICAgICAnY29scycsXG4gICAgICAnbWFzaycsXG4gICAgICAndGl0bGUnLFxuICAgICAgJ29rVGV4dCcsXG4gICAgICAnZGlzbWlzc1RleHQnLFxuICAgICAgJ2Rpc2FibGVkJyxcbiAgICAgICdjYXNjYWRlJyxcbiAgICAgICdvbk9rJyxcbiAgICAgICdvblBpY2tlckNoYW5nZScsXG4gICAgICAnaW5kaWNhdG9yU3R5bGUnXG4gICAgXTtcbiAgICBvcHRpb25hbFBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1twYXJhbV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIChvcHRpb25zIGFzIGFueSlbcGFyYW1dID0gdGhpc1twYXJhbV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY2hpbGRJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZShbXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IFBpY2tlck9wdGlvbnMsXG4gICAgICAgIHVzZVZhbHVlOiBvcHRpb25zXG4gICAgICB9XG4gICAgXSk7XG4gICAgUGlja2VyLnNob3dQb3B1cChQaWNrZXJDb21wb25lbnQsIGNoaWxkSW5qZWN0b3IpO1xuICB9XG5cbiAgc3RhdGljIGhpZGVQaWNrZXIoKTogdm9pZCB7XG4gICAgUGlja2VyLmhpZGVQb3B1cCgpO1xuICB9XG59XG4iXX0=