/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2 } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
export class PickerDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _elm
     * @param {?} _defaultOptions
     * @param {?} _cfr
     * @param {?} _renderer
     */
    constructor(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onPickerChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    togglePicker() {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onVisibleChange.emit(false);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["isOpen"]) {
            if (changes["isOpen"].currentValue === true) {
                this.showPicker();
            }
            else {
                this.hidePicker();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.hidePicker();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        if (this.picker &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.picker.location.nativeElement.contains(event.target)) {
            this.hidePicker();
        }
    }
    /**
     * @return {?}
     */
    showPicker() {
        if (!this.picker) {
            setTimeout(() => {
                this._eventListeners = [
                    this._renderer.listen('document', 'click', (event) => this.onDocumentClick(event)),
                    this._renderer.listen('document', 'touchend', (event) => this.onDocumentClick(event))
                ];
            });
            /** @type {?} */
            const options = new PickerOptions();
            Object.assign(options, this._defaultOptions, {
                hidePicker: (event) => {
                    this.hidePicker();
                }
            });
            /** @type {?} */
            const optionalParams = [
                'data',
                'value',
                'cols',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'cascade',
                'appendToBody',
                'indicatorStyle',
                'onOk',
                'onPickerChange'
            ];
            optionalParams.forEach(param => {
                if (typeof this[param] !== 'undefined') {
                    (/** @type {?} */ (options))[param] = this[param];
                }
            });
            /** @type {?} */
            const componentFactory = this._cfr.resolveComponentFactory(PickerComponent);
            /** @type {?} */
            const childInjector = Injector.create([
                {
                    provide: PickerOptions,
                    useValue: options
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    hidePicker() {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(fn => fn());
            this._eventListeners = [];
        }
    }
}
PickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[Picker], [nzm-picker]'
            },] }
];
/** @nocollapse */
PickerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: PickerOptions },
    { type: ComponentFactoryResolver },
    { type: Renderer2 }
];
PickerDirective.propDecorators = {
    data: [{ type: Input }],
    value: [{ type: Input }],
    cols: [{ type: Input }],
    mask: [{ type: Input }],
    title: [{ type: Input }],
    visible: [{ type: Input }],
    okText: [{ type: Input }],
    dismissText: [{ type: Input }],
    disabled: [{ type: Input }],
    cascade: [{ type: Input }],
    appendToBody: [{ type: Input }],
    indicatorStyle: [{ type: Input }],
    onVisibleChange: [{ type: Output }],
    onPickerChange: [{ type: Output }],
    onOk: [{ type: Output }],
    onDismiss: [{ type: Output }],
    togglePicker: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    PickerDirective.prototype.picker;
    /** @type {?} */
    PickerDirective.prototype._eventListeners;
    /** @type {?} */
    PickerDirective.prototype.data;
    /** @type {?} */
    PickerDirective.prototype.value;
    /** @type {?} */
    PickerDirective.prototype.cols;
    /** @type {?} */
    PickerDirective.prototype.mask;
    /** @type {?} */
    PickerDirective.prototype.title;
    /** @type {?} */
    PickerDirective.prototype.visible;
    /** @type {?} */
    PickerDirective.prototype.okText;
    /** @type {?} */
    PickerDirective.prototype.dismissText;
    /** @type {?} */
    PickerDirective.prototype.disabled;
    /** @type {?} */
    PickerDirective.prototype.cascade;
    /** @type {?} */
    PickerDirective.prototype.appendToBody;
    /** @type {?} */
    PickerDirective.prototype.indicatorStyle;
    /** @type {?} */
    PickerDirective.prototype.onVisibleChange;
    /** @type {?} */
    PickerDirective.prototype.onPickerChange;
    /** @type {?} */
    PickerDirective.prototype.onOk;
    /** @type {?} */
    PickerDirective.prototype.onDismiss;
    /** @type {?} */
    PickerDirective.prototype._viewContainerRef;
    /** @type {?} */
    PickerDirective.prototype._elm;
    /** @type {?} */
    PickerDirective.prototype._defaultOptions;
    /** @type {?} */
    PickerDirective.prototype._cfr;
    /** @type {?} */
    PickerDirective.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,