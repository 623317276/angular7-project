/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Compiler, NgZone, ComponentFactoryResolver, } from '@angular/core';
import { ToastComponent } from './toast.component';
import { ToastOptions } from './toast-options.provider';
/**
 * @record
 */
export function ConfigInterface() { }
/** @type {?|undefined} */
ConfigInterface.prototype.content;
/** @type {?|undefined} */
ConfigInterface.prototype.iconType;
/** @type {?|undefined} */
ConfigInterface.prototype.mask;
export class Toast {
    /**
     * @param {?} _appRef
     * @param {?} _compiler
     * @param {?} _cfr
     * @param {?} _zone
     */
    constructor(_appRef, _compiler, _cfr, _zone) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        this._zone = _zone;
        Toast._zone = this._zone;
        Toast._appRef = this._appRef;
        Toast._toastCompFactory = this._cfr.resolveComponentFactory(ToastComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    static _initConfig(config, options) {
        /** @type {?} */
        const props = {};
        /** @type {?} */
        const optionalParams = ['content', 'iconType', 'mask'];
        config = Object.assign(options, config);
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        /** @type {?} */
        const iconType = {
            info: '',
            success: 'success',
            fail: 'fail',
            offline: 'dislike',
            loading: 'loading'
        }[options.iconType];
        props['iconType'] = iconType;
        props['mask'] = options.mask;
        return props;
    }
    /**
     * @param {?} config
     * @param {?} type
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static notice(config, type, timeInterval = 2000, onClose, mask = true) {
        // 如果已经存在，在没有遮罩层的情况下，会响应别的toast，需要清除原来的
        if (Toast.compRef) {
            Toast.hide();
        }
        /** @type {?} */
        const options = new ToastOptions();
        options.iconType = type;
        options.mask = mask;
        /** @type {?} */
        const props = Toast._initConfig(config, options);
        document.body.insertBefore(document.createElement(Toast._toastCompFactory.selector), document.body.firstChild);
        /** @type {?} */
        let instance;
        /** @type {?} */
        let subject;
        Toast.compRef = Toast._appRef.bootstrap(Toast._toastCompFactory);
        instance = Toast.compRef.instance;
        subject = instance.subject;
        if (timeInterval) {
            Toast.timeout = setTimeout(() => {
                if (onClose) {
                    onClose();
                }
                Toast.hide();
            }, timeInterval);
        }
        Object.assign(instance, props);
        return subject;
    }
    /**
     * Open info dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static info(content, timeInterval, onClose, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'info',
            content: content
        });
        return Toast.notice(config, 'info', timeInterval, onClose, mask);
    }
    /**
     * Open success dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static success(content, timeInterval, onClose, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'success',
            content: content
        });
        return Toast.notice(config, 'success', timeInterval, onClose, mask);
    }
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} mask
     * @return {?}
     */
    static show(content, timeInterval, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'info',
            content: content
        });
        return Toast.notice(config, 'info', timeInterval, () => { }, mask);
    }
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static fail(content, timeInterval, onClose, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'fail',
            content: content
        });
        return Toast.notice(config, 'fail', timeInterval, onClose, mask);
    }
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static offline(content, timeInterval, onClose, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'offline',
            content: content
        });
        return Toast.notice(config, 'offline', timeInterval, onClose, mask);
    }
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    static loading(content, timeInterval, onClose, mask) {
        /** @type {?} */
        const config = Object.assign({
            iconType: 'loading',
            content: content
        });
        return Toast.notice(config, 'loading', timeInterval, onClose, mask);
    }
    /**
     * @return {?}
     */
    static hide() {
        if (Toast.timeout) {
            clearTimeout(Toast.timeout);
        }
        if (Toast.compRef) {
            Toast._zone.run(() => {
                Toast.compRef.destroy();
            });
            Toast.compRef = null;
        }
    }
}
Toast.timeout = null;
Toast._zone = null;
Toast.compRef = null;
Toast._toastCompFactory = null;
Toast._appRef = null;
Toast.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Toast.ctorParameters = () => [
    { type: ApplicationRef },
    { type: Compiler },
    { type: ComponentFactoryResolver },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    Toast.timeout;
    /** @type {?} */
    Toast._zone;
    /** @type {?} */
    Toast.compRef;
    /** @type {?} */
    Toast._toastCompFactory;
    /** @type {?} */
    Toast._appRef;
    /** @type {?} */
    Toast.prototype._appRef;
    /** @type {?} */
    Toast.prototype._compiler;
    /** @type {?} */
    Toast.prototype._cfr;
    /** @type {?} */
    Toast.prototype._zone;
}

//# sourceMappingURL=data:application/json;base64,