/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, TemplateRef, HostBinding, NgZone } from '@angular/core';
export class ToastComponent {
    /**
     * @param {?} _zone
     */
    constructor(_zone) {
        this._zone = _zone;
        this.prefixCls = 'am-toast';
        this.isContentString = true;
        this.transitionName = 'am-fade-enter am-fade-enter-active';
        this._iconType = '';
        this._content = '';
        this.mask = true;
        this.amToast = true;
    }
    /**
     * @return {?}
     */
    get content() {
        return this._content;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set content(value) {
        if (value instanceof TemplateRef) {
            this.isContentString = false;
        }
        else {
            this.isContentString = true;
        }
        this._zone.run(() => {
            this._content = value;
        });
    }
    /**
     * @return {?}
     */
    get iconType() {
        return this._iconType;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iconType(value) {
        this._zone.run(() => {
            this._iconType = value;
        });
    }
    /**
     * @return {?}
     */
    get amToastMask() {
        return this.mask;
    }
    /**
     * @return {?}
     */
    get amToastNoMask() {
        return !this.mask;
    }
}
ToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'Toast',
                encapsulation: ViewEncapsulation.None,
                template: "<div class=\"{{prefixCls}}-notice {{prefixCls}}-notice-closable {{transitionName}}\">\n  <div class=\"{{prefixCls}}-notice-content\">\n    <div role=\"alert\"\n         *ngIf=\"iconType\"\n         class=\"{{prefixCls}}-text {{prefixCls}}-text-icon\"\n         aria-live=\"assertive\"\n    >\n      <Icon [type]=\"iconType\" [size]=\"'lg'\"></Icon>\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n    </div>\n    <div *ngIf=\"!iconType\" class=\"{{prefixCls}}-text\" role=\"alert\" aria-live=\"assertive\">\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n      <ng-template *ngIf=\"!isContentString\" [ngTemplateOutlet]=\"content\"></ng-template>\n    </div>\n  </div>\n  <a class=\"{{prefixCls}}-notice-close\">\n    <span class=\"{{prefixCls}}-notice-close-x\"></span>\n  </a>\n</div>\n"
            }] }
];
/** @nocollapse */
ToastComponent.ctorParameters = () => [
    { type: NgZone }
];
ToastComponent.propDecorators = {
    mask: [{ type: Input }],
    content: [{ type: Input }],
    iconType: [{ type: Input }],
    amToast: [{ type: HostBinding, args: ['class.am-toast',] }],
    amToastMask: [{ type: HostBinding, args: ['class.am-toast-mask',] }],
    amToastNoMask: [{ type: HostBinding, args: ['class.am-toast-nomask',] }]
};
if (false) {
    /** @type {?} */
    ToastComponent.prototype.prefixCls;
    /** @type {?} */
    ToastComponent.prototype.isContentString;
    /** @type {?} */
    ToastComponent.prototype.maskClassMap;
    /** @type {?} */
    ToastComponent.prototype.transitionName;
    /** @type {?} */
    ToastComponent.prototype._iconType;
    /** @type {?} */
    ToastComponent.prototype._content;
    /** @type {?} */
    ToastComponent.prototype.mask;
    /** @type {?} */
    ToastComponent.prototype.amToast;
    /** @type {?} */
    ToastComponent.prototype._zone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ0b2FzdC90b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3RHLE1BQU07Ozs7SUE4Q0osWUFBb0IsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7eUJBN0NiLFVBQVU7K0JBQ0gsSUFBSTs4QkFFZCxvQ0FBb0M7eUJBRXpCLEVBQUU7d0JBQ2dCLEVBQUU7b0JBR2hDLElBQUk7dUJBMEJELElBQUk7S0FVYzs7OztJQW5DckMsSUFDSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0tBQ3RCOzs7OztJQUNELElBQUksT0FBTyxDQUFDLEtBQWdDO1FBQzFDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDdkIsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFDRCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDdkI7Ozs7O0lBQ0QsSUFBSSxRQUFRLENBQUMsS0FBYTtRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDeEIsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFJRCxJQUNJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDbEI7Ozs7SUFDRCxJQUNJLGFBQWE7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNuQjs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsT0FBTztnQkFDakIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLHMzQkFBcUM7YUFDdEM7Ozs7WUFOdUUsTUFBTTs7O21CQWdCM0UsS0FBSztzQkFFTCxLQUFLO3VCQWNMLEtBQUs7c0JBVUwsV0FBVyxTQUFDLGdCQUFnQjswQkFFNUIsV0FBVyxTQUFDLHFCQUFxQjs0QkFJakMsV0FBVyxTQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBUZW1wbGF0ZVJlZiwgSG9zdEJpbmRpbmcsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdUb2FzdCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHRlbXBsYXRlVXJsOiAnLi90b2FzdC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RDb21wb25lbnQge1xuICBwcmVmaXhDbHM6IHN0cmluZyA9ICdhbS10b2FzdCc7XG4gIGlzQ29udGVudFN0cmluZzogYm9vbGVhbiA9IHRydWU7XG4gIG1hc2tDbGFzc01hcDtcbiAgdHJhbnNpdGlvbk5hbWUgPSAnYW0tZmFkZS1lbnRlciBhbS1mYWRlLWVudGVyLWFjdGl2ZSc7XG5cbiAgcHJpdmF0ZSBfaWNvblR5cGU6IHN0cmluZyA9ICcnO1xuICBwcml2YXRlIF9jb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gJyc7XG5cbiAgQElucHV0KClcbiAgbWFzazogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpXG4gIGdldCBjb250ZW50KCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICB9XG4gIHNldCBjb250ZW50KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuaXNDb250ZW50U3RyaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNDb250ZW50U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgdGhpcy5fY29udGVudCA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBpY29uVHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pY29uVHlwZTtcbiAgfVxuICBzZXQgaWNvblR5cGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2ljb25UeXBlID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXRvYXN0JylcbiAgYW1Ub2FzdDogYm9vbGVhbiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tdG9hc3QtbWFzaycpXG4gIGdldCBhbVRvYXN0TWFzaygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tdG9hc3Qtbm9tYXNrJylcbiAgZ2V0IGFtVG9hc3ROb01hc2soKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLm1hc2s7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF96b25lOiBOZ1pvbmUpIHt9XG59XG4iXX0=