import { ComponentRef, ComponentFactory, ApplicationRef, Compiler, NgZone, ComponentFactoryResolver } from '@angular/core';
import { ToastComponent } from './toast.component';
import { ToastOptions } from './toast-options.provider';
export interface ConfigInterface {
    content?: any;
    iconType?: string;
    mask?: boolean;
}
export declare class Toast {
    private _appRef;
    private _compiler;
    private _cfr;
    private _zone;
    static timeout: any;
    static _zone: NgZone;
    static compRef: ComponentRef<any>;
    static _toastCompFactory: ComponentFactory<ToastComponent>;
    static _appRef: ApplicationRef;
    constructor(_appRef: ApplicationRef, _compiler: Compiler, _cfr: ComponentFactoryResolver, _zone: NgZone);
    static _initConfig(config: Object, options: ToastOptions): Object;
    static notice(config: ConfigInterface, type: any, timeInterval: number, onClose: any, mask?: boolean): any;
    /**
     * Open info dialog
     */
    static info(content?: string, timeInterval?: number, onClose?: () => void, mask?: boolean): any;
    /**
     * Open success dialog
     */
    static success(content?: string, timeInterval?: number, onClose?: () => void, mask?: boolean): any;
    static show(content?: string, timeInterval?: number, mask?: boolean): any;
    static fail(content?: string, timeInterval?: number, onClose?: () => void, mask?: boolean): any;
    static offline(content?: string, timeInterval?: number, onClose?: () => void, mask?: boolean): any;
    static loading(content?: string, timeInterval?: number, onClose?: () => void, mask?: boolean): any;
    static hide(): void;
}
