import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ComponentPortal } from '@angular/cdk/portal';
import { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import { FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { ObserversModule } from '@angular/cdk/observers';
import { trigger, state, animate, transition, style } from '@angular/animations';
import { DomSanitizer } from '@angular/platform-browser';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule, NgSwitch, NgSwitchCase } from '@angular/common';
import { __assign, __extends, __values, __spread } from 'tslib';
import { Component, Input, HostBinding, NgModule, ViewEncapsulation, TemplateRef, ElementRef, Renderer2, Output, EventEmitter, ViewChild, forwardRef, InjectionToken, Inject, Injectable, Optional, SkipSelf, ApplicationRef, ComponentFactoryResolver, NgZone, HostListener, Pipe, ContentChildren, ChangeDetectorRef, Directive, ViewContainerRef, Injector, Compiler } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ActivityIndicator = /** @class */ (function () {
    function ActivityIndicator() {
        this.prefixCls = 'am-activity-indicator';
        this.spinnerClass = {};
        this._size = 'small';
        this._toast = false;
        this._animating = true;
        this.clsActIndicator = true;
    }
    Object.defineProperty(ActivityIndicator.prototype, "animating", {
        get: /**
         * @return {?}
         */
        function () {
            return this._animating;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._animating = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "size", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._size = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "toast", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toast;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._toast = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._text = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivityIndicator.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this._animating) {
            this.clsActIndicator = true;
            this.clsActIndicatorToast = !!this._toast;
            this.clsActIndicatorLg = this._size === 'large';
            this.clsActIndicatorSm = this._size === 'small';
            this.spinnerClass = (_a = {},
                _a[this.prefixCls + "-spinner"] = true,
                _a[this.prefixCls + "-spinner-lg"] = !!this._toast || this._size === 'large',
                _a);
        }
        else {
            this.clsActIndicator = false;
            this.clsActIndicatorLg = false;
            this.clsActIndicatorSm = false;
            this.clsActIndicatorToast = false;
        }
    };
    /**
     * @return {?}
     */
    ActivityIndicator.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClass();
    };
    ActivityIndicator.decorators = [
        { type: Component, args: [{
                    selector: 'ActivityIndicator , nzm-ctivity-indicator',
                    template: "<div *ngIf=\"animating && toast && text && text.length>0\">\n  <div class=\"{{prefixCls}}-content\">\n    <span [ngClass]=\"spinnerClass\" aria-hidden=\"'true'\"></span>\n    <span class=\"{{prefixCls}}-toast\">{{text}}</span>\n  </div>\n</div>\n<div *ngIf=\"animating && toast && !text\">\n  <div class=\"{{prefixCls}}-content\">\n    <span [ngClass]=\"spinnerClass\" aria-label=\"'Loading'\"></span>\n  </div>\n</div>\n<div *ngIf=\"animating && !toast && text && text.length>0\">\n  <span [ngClass]=\"spinnerClass\" aria-hidden=\"true\"></span>\n  <span class=\"{{prefixCls}}-tip\">{{text}}</span>\n</div>\n<div *ngIf=\"animating &&! toast && !text\">\n  <span [ngClass]=\"spinnerClass\" aria-label=\"'loading'\"></span>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ActivityIndicator.ctorParameters = function () { return []; };
    ActivityIndicator.propDecorators = {
        animating: [{ type: Input }],
        size: [{ type: Input }],
        toast: [{ type: Input }],
        text: [{ type: Input }],
        clsActIndicator: [{ type: HostBinding, args: ['class.am-activity-indicator',] }],
        clsActIndicatorToast: [{ type: HostBinding, args: ['class.am-activity-indicator-toast',] }],
        clsActIndicatorLg: [{ type: HostBinding, args: ['class.am-activity-indicator-lg',] }],
        clsActIndicatorSm: [{ type: HostBinding, args: ['class.am-activity-indicator-sm',] }]
    };
    return ActivityIndicator;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ActivityIndicatorModule = /** @class */ (function () {
    function ActivityIndicatorModule() {
    }
    ActivityIndicatorModule.decorators = [
        { type: NgModule, args: [{
                    exports: [ActivityIndicator],
                    declarations: [ActivityIndicator],
                    imports: [CommonModule, FormsModule]
                },] }
    ];
    return ActivityIndicatorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Card = /** @class */ (function () {
    function Card() {
        this.full = false;
        this.cardWrapper = true;
    }
    Object.defineProperty(Card.prototype, "cardFull", {
        get: /**
         * @return {?}
         */
        function () {
            return this.full;
        },
        enumerable: true,
        configurable: true
    });
    Card.decorators = [
        { type: Component, args: [{
                    selector: 'Card, nzm-card',
                    template: "<ng-content></ng-content>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    Card.ctorParameters = function () { return []; };
    Card.propDecorators = {
        full: [{ type: Input }],
        cardWrapper: [{ type: HostBinding, args: ['class.am-card',] }],
        cardFull: [{ type: HostBinding, args: ['class.am-card-full',] }]
    };
    return Card;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CardHeader = /** @class */ (function () {
    function CardHeader() {
        this.prefixCls = 'am-card-header';
        this.thumb = null;
        this.thumbStyle = null;
        this.title = null;
        this.extra = null;
        this.cardBodyWrapper = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    CardHeader.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof TemplateRef;
    };
    CardHeader.decorators = [
        { type: Component, args: [{
                    selector: 'CardHeader, nzm-card-header',
                    template: "<div class=\"{{prefixCls}}-content\">\n  <img *ngIf='thumb && !isTemplateRef(thumb)' src=\"{{thumb}}\" [ngStyle]=\"thumbStyle\">\n  <ng-container *ngIf=\"thumb && isTemplateRef(thumb)\" [ngTemplateOutlet]=\"thumb\"></ng-container>\n  <ng-container *ngIf=\"!isTemplateRef(title);else titleTemplate\">{{title}}</ng-container>\n</div>\n<div *ngIf=\"extra\" class=\"{{prefixCls}}-extra\">\n  <ng-container *ngIf=\"!isTemplateRef(extra);else extraTemplate\">{{extra}}</ng-container>\n</div>\n<ng-template #titleTemplate>\n  <ng-template [ngTemplateOutlet]=\"title\"></ng-template>\n</ng-template>\n<ng-template #extraTemplate>\n  <ng-template [ngTemplateOutlet]=\"extra\"></ng-template>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CardHeader.ctorParameters = function () { return []; };
    CardHeader.propDecorators = {
        thumb: [{ type: Input }],
        thumbStyle: [{ type: Input }],
        title: [{ type: Input }],
        extra: [{ type: Input }],
        cardBodyWrapper: [{ type: HostBinding, args: ['class.am-card-header',] }]
    };
    return CardHeader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CardBody = /** @class */ (function () {
    function CardBody() {
        this.cardBodyWrapper = true;
    }
    CardBody.decorators = [
        { type: Component, args: [{
                    selector: 'CardBody, nzm-card-body',
                    template: "<ng-content></ng-content>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CardBody.ctorParameters = function () { return []; };
    CardBody.propDecorators = {
        cardBodyWrapper: [{ type: HostBinding, args: ['class.am-card-body',] }]
    };
    return CardBody;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CardFooter = /** @class */ (function () {
    function CardFooter() {
        this.prefixCls = 'am-card-footer';
        this.content = null;
        this.extra = null;
        this.cardFooterWrapper = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    CardFooter.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof TemplateRef;
    };
    CardFooter.decorators = [
        { type: Component, args: [{
                    selector: 'CardFooter, nzm-card-footer',
                    template: "<div class=\"{{prefixCls}}-content\">\n  <ng-container *ngIf=\"!isTemplateRef(content);else contentTemplate\">{{content}}</ng-container>\n</div>\n<div *ngIf=\"extra\" class=\"{{prefixCls}}-extra\">\n  <ng-container *ngIf=\"!isTemplateRef(extra);else extraTemplate\">{{extra}}</ng-container>\n</div>\n<ng-template #contentTemplate>\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</ng-template>\n<ng-template #extraTemplate>\n  <ng-template [ngTemplateOutlet]=\"extra\"></ng-template>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CardFooter.ctorParameters = function () { return []; };
    CardFooter.propDecorators = {
        content: [{ type: Input }],
        extra: [{ type: Input }],
        cardFooterWrapper: [{ type: HostBinding, args: ['class.am-card-footer',] }]
    };
    return CardFooter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CardModule = /** @class */ (function () {
    function CardModule() {
    }
    CardModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [Card, CardHeader, CardBody, CardFooter],
                    exports: [Card, CardHeader, CardBody, CardFooter]
                },] }
    ];
    return CardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Badge = /** @class */ (function () {
    function Badge(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    Object.defineProperty(Badge.prototype, "size", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._size = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._text = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "corner", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._corner = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "dot", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dot;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._dot = v;
            if (this._dot) {
                this._text = '';
            }
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "overflowCount", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._overflowCount = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "hot", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hot = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "setStyle", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.style = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            this._setClass = v;
            /** @type {?} */
            var clsArr = this._setClass.split(' ');
            clsArr.forEach(function (cls) {
                _this.render.addClass(_this._ref.nativeElement, cls);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Badge.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a;
        this.scrollNumberCls = (_a = {},
            _a[this.prefixCls + "-dot"] = this._dot,
            _a[this.prefixCls + "-dot-large"] = this._dot && this._size === 'large',
            _a[this.prefixCls + "-text"] = !this._dot && !this._corner,
            _a[this.prefixCls + "-corner"] = this._corner,
            _a[this.prefixCls + "-corner-large"] = this._corner && this._size === 'large',
            _a);
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this._ref.nativeElement.children.length > 1) {
                _this._children = true;
                _this.setCls();
            }
        }, 10);
    };
    Badge.decorators = [
        { type: Component, args: [{
                    selector: 'Badge, nzm-badge',
                    template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\"\n    [ngClass]=\"scrollNumberCls\"\n    [ngStyle]=\"style\">\n    <span>{{text}}</span>\n</sup>\n"
                }] }
    ];
    /** @nocollapse */
    Badge.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Badge.propDecorators = {
        size: [{ type: Input }],
        text: [{ type: Input }],
        corner: [{ type: Input }],
        dot: [{ type: Input }],
        overflowCount: [{ type: Input }],
        hot: [{ type: Input }],
        setStyle: [{ type: Input }],
        className: [{ type: Input }],
        clsBadge: [{ type: HostBinding, args: ['class.am-badge',] }],
        clsBadgeWrp: [{ type: HostBinding, args: ['class.am-badge-not-a-wrapper',] }],
        clsBadgeCornerWrp: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper',] }],
        clsBadgeHot: [{ type: HostBinding, args: ['class.am-badge-hot',] }],
        clsBadgeCornerWrpLg: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper-large',] }]
    };
    return Badge;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BadgeModule = /** @class */ (function () {
    function BadgeModule() {
    }
    BadgeModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Badge],
                    declarations: [Badge],
                    imports: [CommonModule, FormsModule]
                },] }
    ];
    return BadgeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem = /** @class */ (function () {
    function InputItem(element, render) {
        this.element = element;
        this.render = render;
        this.prefixCls = 'am-input';
        this.setFocus = {};
        this.pattern = '';
        this.autoFocus = false;
        this.inputType = 'text';
        this._type = 'text';
        this._defaultValue = '';
        this._placeholder = '';
        this._editable = true;
        this._disabled = false;
        this._clear = false;
        this._error = false;
        this._extra = '';
        this._labelNumber = 5;
        this._updatePlaceholder = false;
        this._prefixListCls = 'am-list';
        this._moneyKeyboardAlign = 'right';
        this._focus = false;
        this._isClear = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onErrorClick = new EventEmitter();
        this.onExtraClick = new EventEmitter();
        this.clsItem = true;
        this.clsDisabled = this._disabled;
        this.clsError = this._error;
        this.clsFocus = this._focus;
        this.clsAndroid = this._focus;
        this._onChange = function (_) { };
        this._el = element.nativeElement;
    }
    Object.defineProperty(InputItem.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.length > 0) {
                this.inputType = value;
                if (value === 'bankCard' || value === 'phone') {
                    this._type = 'tel';
                }
                else if (value === 'password') {
                    this._type = 'password';
                }
                else if (value === 'digit') {
                    this._type = 'number';
                }
                else if (value !== 'text' && value !== 'number') {
                    this._type = value;
                }
                if (value === 'number') {
                    this.pattern = '[0-9]*';
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (typeof v === undefined || v === null) {
                this._value = '';
            }
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "defaultValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = this._defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._editable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.clsDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "clear", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clear;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._clear = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "maxLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxLength;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "error", {
        get: /**
         * @return {?}
         */
        function () {
            return this._error;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._error = value;
            this.clsError = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "extra", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extra;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._extra = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "labelNumber", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelNumber = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "updatePlaceholder", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._updatePlaceholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "prefixListCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._prefixListCls;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._prefixListCls = value;
            this.render.addClass(this._el, value + '-item');
            this.render.addClass(this._el, value + '-item-middle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "moneyKeyboardAlign", {
        get: /**
         * @return {?}
         */
        function () {
            return this._moneyKeyboardAlign;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._moneyKeyboardAlign = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputItem.prototype, "focus", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.focus) {
                this.autoFocus = value.focus;
                if (this._type === 'money') {
                    this.setFocus = value;
                }
                else if (this.inputElementRef) {
                    this._focus = true;
                    this.inputElementRef.nativeElement.focus();
                    this.inputFocus('');
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputItem.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        if (this.lableRef.nativeElement.children.length > 0 ||
            (this.lableRef.nativeElement && this.lableRef.nativeElement.innerText !== '')) {
            this.labelCls = (_a = {},
                _a[this.prefixCls + "-label"] = true,
                _a[this.prefixCls + "-label-2"] = this._labelNumber === 2,
                _a[this.prefixCls + "-label-3"] = this._labelNumber === 3,
                _a[this.prefixCls + "-label-4"] = this._labelNumber === 4,
                _a[this.prefixCls + "-label-5"] = this._labelNumber === 5,
                _a[this.prefixCls + "-label-6"] = this._labelNumber === 6,
                _a[this.prefixCls + "-label-7"] = this._labelNumber === 7,
                _a);
        }
        this.controlCls = (_b = {}, _b[this.prefixCls + "-control"] = true, _b);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputItem.prototype.inputChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var value = e;
        switch (this.inputType) {
            case 'text':
                break;
            case 'bankCard':
                value = value.replace(/\D/g, '').replace(/(....)(?=.)/g, '$1 ');
                break;
            case 'phone':
                value = value.replace(/\D/g, '').substring(0, 11);
                /** @type {?} */
                var valueLen = value.length;
                if (valueLen > 3 && valueLen < 8) {
                    value = value.substr(0, 3) + " " + value.substr(3);
                }
                else if (valueLen >= 8) {
                    value = value.substr(0, 3) + " " + value.substr(3, 4) + " " + value.substr(7);
                }
                break;
            case 'number':
                value = value.replace(/\D/g, '');
                break;
            case 'password':
                break;
            default:
                this._value = value;
                break;
        }
        this._value = value;
        if (this._type !== 'money') {
            this.inputElementRef.nativeElement.value = this._value;
        }
        this._onChange(this._value);
        this.onChange.emit(this._value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputItem.prototype.inputFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        setTimeout(function () {
            _this._focus = true;
            _this.clsFocus = true;
            _this.clsAndroid = true;
        }, 100);
        this.onFocus.emit(value);
    };
    /**
     * @param {?} value
     * @param {?} event
     * @return {?}
     */
    InputItem.prototype.inputBlur = /**
     * @param {?} value
     * @param {?} event
     * @return {?}
     */
    function (value, event) {
        var _this = this;
        setTimeout(function () {
            if (!_this._isClear) {
                _this._focus = false;
                _this.clsFocus = false;
                _this.clsAndroid = false;
                _this.onBlur.emit(value);
            }
            _this._isClear = false;
        }, 100);
    };
    /**
     * @return {?}
     */
    InputItem.prototype.clearInput = /**
     * @return {?}
     */
    function () {
        if (this._type !== 'password' && this._updatePlaceholder) {
            this._placeholder = this._value;
        }
        this._value = '';
        this.onChange.emit('');
        this._isClear = true;
        if (this._type !== 'money') {
            this.inputElementRef.nativeElement.value = this._value;
        }
        this.inputFocus(this._value);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputItem.prototype.errorClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.onErrorClick) {
            this.onErrorClick.emit(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputItem.prototype.extraClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.onExtraClick) {
            this.onExtraClick.emit(e);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputItem.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this._value = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputItem.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputItem.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @return {?}
     */
    InputItem.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.inputElementRef && this._type !== 'money' && this._value !== undefined) {
            this.inputElementRef.nativeElement.value = this._value;
        }
    };
    /**
     * @return {?}
     */
    InputItem.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
        this.render.addClass(this._el, this._prefixListCls + '-item');
        this.render.addClass(this._el, this._prefixListCls + '-item-middle');
    };
    InputItem.decorators = [
        { type: Component, args: [{
                    selector: 'InputItem, nzm-input-item',
                    template: "<div class=\"{{prefixListCls}}-line\">\n  <div #lableContent [ngClass]=\"labelCls\">\n    <ng-content></ng-content>\n  </div>\n  <div [ngClass]=\"controlCls\">\n    <CustomInput *ngIf=\"type==='money'\"\n                 [value]=\"value\"\n                 [defaultValue]=\"defaultValue\"\n                 [placeholder]=\"placeholder\"\n                 [disabled]=\"disabled\"\n                 [editable]=\"editable\"\n                 [moneyKeyboardAlign]=\"moneyKeyboardAlign\"\n                 [setFocus]=\"setFocus\"\n                 [maxLength]=\"maxLength\"\n                 (onChange)=\"inputChange($event)\"\n                 (onBlur)=\"inputBlur(value)\"\n                 (onFocus)=\"inputFocus(value)\">\n    </CustomInput>\n    <div *ngIf=\"type!=='money'\">\n      <input #inputElement\n             [type]=\"type\"\n             [name]=\"name\"\n             [(ngModel)]=\"value\"\n             [defaultValue]=\"defaultValue\"\n             [placeholder]=\"placeholder\"\n             [disabled]=\"disabled\"\n             [readOnly]=\"!editable\"\n             [autofocus]=\"autoFocus\"\n             [maxlength]=\"maxLength\"\n             [pattern]=\"pattern\"\n             (ngModelChange)=\"inputChange($event)\"\n             (blur)=\"inputBlur(value , $event)\"\n             (focus)=\"inputFocus(value)\"\n             style=\"outline:none\" />\n    </div>\n  </div>\n  <div  *ngIf=\"clear && editable && !disabled && (value && value.length >0 )\"\n        class=\"{{prefixCls}}-clear\"\n        (click)=\"clearInput()\"\n  ></div>\n  <div *ngIf=\"error\"\n       class=\"{{prefixCls}}-error-extra\"\n       (click)=\"errorClick($event)\"\n  ></div>\n  <div *ngIf=\"extra!==''\"\n       class=\"{{prefixCls}}-extra\"\n       (click)=\"extraClick($event)\"\n  >{{extra}}</div>\n</div>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return InputItem; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    InputItem.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    InputItem.propDecorators = {
        lableRef: [{ type: ViewChild, args: ['lableContent',] }],
        inputElementRef: [{ type: ViewChild, args: ['inputElement',] }],
        type: [{ type: Input }],
        value: [{ type: Input }],
        defaultValue: [{ type: Input }],
        placeholder: [{ type: Input }],
        editable: [{ type: Input }],
        disabled: [{ type: Input }],
        clear: [{ type: Input }],
        maxLength: [{ type: Input }],
        error: [{ type: Input }],
        extra: [{ type: Input }],
        labelNumber: [{ type: Input }],
        updatePlaceholder: [{ type: Input }],
        prefixListCls: [{ type: Input }],
        name: [{ type: Input }],
        moneyKeyboardAlign: [{ type: Input }],
        locale: [{ type: Input }],
        focus: [{ type: Input }],
        onChange: [{ type: Output }],
        onBlur: [{ type: Output }],
        onFocus: [{ type: Output }],
        onErrorClick: [{ type: Output }],
        onExtraClick: [{ type: Output }],
        clsItem: [{ type: HostBinding, args: ['class.am-input-item',] }],
        clsDisabled: [{ type: HostBinding, args: ['class.am-input-disabled',] }],
        clsError: [{ type: HostBinding, args: ['class.am-input-error',] }],
        clsFocus: [{ type: HostBinding, args: ['class.am-input-focus',] }],
        clsAndroid: [{ type: HostBinding, args: ['class.am-input-android,',] }]
    };
    return InputItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var LOCAL_PROVIDER_TOKEN = new InjectionToken('locale-provider-token');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker = {
    okText: '确定',
    dismissText: '取消',
    extra: '请选择',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/zh_CN';
var DatePicker = {
    okText: '确定',
    dismissText: '取消',
    extra: '请选择',
    // DatePickerLocale,
    year: '年',
    month: '月',
    day: '日',
    hour: '时',
    minute: '分',
    am: '上午',
    pm: '下午'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/zh_CN';
var DatePickerView = {
    okText: '确定',
    dismissText: '取消',
    extra: '请选择',
    // DatePickerLocale,
    year: '年',
    month: '月',
    day: '日',
    hour: '时',
    minute: '分',
    am: '上午',
    pm: '下午'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Menu = {
    okText: '确定',
    cancelText: '取消',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// 同步自 'rmc-calendar/lib/locale/zh_CN';
var defaultLocale = {
    title: '日期选择',
    today: '今天',
    month: '月',
    year: '年',
    am: '上午',
    pm: '下午',
    dateTimeFormat: 'yyyy年MM月dd日 星期w hh:mm',
    dateFormat: 'yyyy年MM月dd日 星期w',
    noChoose: '未选择',
    week: ['日', '一', '二', '三', '四', '五', '六'],
    clear: '清除',
    selectTime: '选择时间',
    selectStartTime: '选择开始时间',
    selectEndTime: '选择结束时间',
    start: '开始',
    end: '结束',
    begin: '起',
    over: '止',
    begin_over: '起/止',
    confirm: '确认',
    monthTitle: 'yyyy年MM月',
    loadPrevMonth: '加载上一个月',
    yesterday: '昨天',
    lastWeek: '近一周',
    lastMonth: '近一个月'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar = {
    cancelText: '取消',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem$1 = {
    confirmLabel: '确定',
    backspaceLabel: '退格',
    cancelKeyboardLabel: '收起键盘',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Pagination = {
    prevText: '上一页',
    nextText: '下一页',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefresh = {
    activateText: '松开立即刷新',
    deactivateText: '下拉可以刷新',
    finishText: '完成刷新',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var zh_CN = {
    locale: 'zh_CN',
    Picker: Picker,
    DatePicker: DatePicker,
    DatePickerView: DatePickerView,
    Menu: Menu,
    Calendar: defaultLocale,
    SearchBar: SearchBar,
    InputItem: InputItem$1,
    Pagination: Pagination,
    PullToRefresh: PullToRefresh
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LocaleProviderService = /** @class */ (function () {
    function LocaleProviderService(locale) {
        this._change = new BehaviorSubject(this._locale);
        this.setLocale(locale || zh_CN);
    }
    Object.defineProperty(LocaleProviderService.prototype, "localeChange", {
        get: /**
         * @return {?}
         */
        function () {
            return this._change.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} keyPath
     * @return {?}
     */
    LocaleProviderService.prototype.getLocaleValue = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        /** @type {?} */
        var content = /** @type {?} */ (this._getObjectPath(this._locale, keyPath));
        if (typeof content === 'string') {
            return content;
        }
        return '';
    };
    /**
     * @param {?} keyPath
     * @return {?}
     */
    LocaleProviderService.prototype.getLocaleSubObj = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        /** @type {?} */
        var content = /** @type {?} */ (this._getObjectPath(this._locale, keyPath));
        if (typeof content === 'object') {
            return content;
        }
        return null;
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    LocaleProviderService.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        if (!locale || (this._locale && this._locale.locale === locale.locale)) {
            return;
        }
        this._locale = locale;
        this._change.next(locale);
    };
    /**
     * @return {?}
     */
    LocaleProviderService.prototype.getLocaleId = /**
     * @return {?}
     */
    function () {
        return this._locale && this._locale.locale ? this._locale.locale : '';
    };
    /**
     * @return {?}
     */
    LocaleProviderService.prototype.getLocale = /**
     * @return {?}
     */
    function () {
        return this._locale;
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    LocaleProviderService.prototype._getObjectPath = /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        /** @type {?} */
        var res = obj;
        /** @type {?} */
        var paths = path.split('.');
        /** @type {?} */
        var depth = paths.length;
        /** @type {?} */
        var index = 0;
        while (res && index < depth) {
            res = res[paths[index++]];
        }
        return index === depth ? res : null;
    };
    LocaleProviderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LocaleProviderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCAL_PROVIDER_TOKEN,] }] }
    ]; };
    return LocaleProviderService;
}());
/**
 * @param {?} exist
 * @param {?} locale
 * @return {?}
 */
function LOCALE_PROVIDER_SERVICE_FACTORY(exist, locale) {
    return exist || new LocaleProviderService(locale);
}
/** @type {?} */
var LOCALE_PROVIDER_SERVICE_PROVIDER = {
    provide: LocaleProviderService,
    useFactory: LOCALE_PROVIDER_SERVICE_FACTORY,
    deps: [[new Optional(), new SkipSelf(), LocaleProviderService], LOCAL_PROVIDER_TOKEN]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CustomKeyboard = /** @class */ (function () {
    function CustomKeyboard(_localeProvider) {
        this._localeProvider = _localeProvider;
        this.prefixCls = 'am-number-keyboard';
        this.okText = '';
        this._locale = {};
        this._unsubscribe$ = new Subject();
        this.onClick = new EventEmitter();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    CustomKeyboard.prototype.tdClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onClick.emit(e);
    };
    /**
     * @return {?}
     */
    CustomKeyboard.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a, _b;
        this.wrapCls = (_a = {},
            _a[this.prefixCls + "-item"] = true,
            _a);
        this.wrapperCls = (_b = {},
            _b[this.prefixCls + "-wrapper"] = true,
            _b);
        this._localeProvider.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this._locale = _this._localeProvider.getLocaleSubObj('InputItem');
            _this.okText = _this._locale.confirmLabel;
        });
    };
    /**
     * @return {?}
     */
    CustomKeyboard.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    CustomKeyboard.decorators = [
        { type: Component, args: [{
                    selector: 'CustomKeyboard',
                    template: "<div [ngClass]=\"wrapperCls\">\n<table>\n  <tbody>\n    <tr>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(1)\">1\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(2)\">2\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(3)\">3\n      </td>\n      <td class=\"keyboard-delete\" [rowSpan]=\"2\" [ngClass]=\"wrapCls\" (click)=\"tdClick('delete')\">\n      </td>\n    </tr>\n    <tr>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(4)\">4\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(5)\">5\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(6)\">6\n      </td>\n\n    </tr>\n    <tr>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(7)\">7\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(8)\">8\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(9)\">9\n      </td>\n      <td class=\"keyboard-confirm\" [rowSpan]=\"2\" [ngClass]=\"wrapCls\" (click)=\"tdClick('confirm')\">{{okText}}\n      </td>\n    </tr>\n    <tr>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick('.')\">.\n      </td>\n      <td [ngClass]=\"wrapCls\" (click)=\"tdClick(0)\">0\n      </td>\n      <td class=\"keyboard-hide\" [ngClass]=\"wrapCls\" (click)=\"tdClick('hide')\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [LocaleProviderService]
                }] }
    ];
    /** @nocollapse */
    CustomKeyboard.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    CustomKeyboard.propDecorators = {
        onClick: [{ type: Output }]
    };
    return CustomKeyboard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CustomInputService = /** @class */ (function () {
    function CustomInputService(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        CustomInputService.appRef = this._appRef;
        CustomInputService._inputCompFactory = this._cfr.resolveComponentFactory(CustomKeyboard);
    }
    /**
     * @return {?}
     */
    CustomInputService.getShowStatus = /**
     * @return {?}
     */
    function () {
        return CustomInputService.isShow;
    };
    /**
     * @return {?}
     */
    CustomInputService.showKeyboard = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        if (!this.isShow) {
            if (this.compRef) {
                this.compRef.instance.wrapperCls = (_a = {},
                    _a["am-number-keyboard-wrapper"] = true,
                    _a);
            }
            else {
                /** @type {?} */
                var container = document.querySelector("#" + this._keyboardPrefixCls + "-container");
                if (!container) {
                    container = document.createElement('div');
                    container.setAttribute('id', this._keyboardPrefixCls + "-container");
                    document.body.appendChild(container);
                    container.appendChild(document.createElement(CustomInputService._inputCompFactory.selector));
                    this.compRef = this.appRef.bootstrap(CustomInputService._inputCompFactory);
                    this.compRef.instance.onClick.subscribe(function (e) {
                        _this.clickValue = e;
                    });
                }
            }
            this.isShow = true;
        }
    };
    /**
     * @return {?}
     */
    CustomInputService.hideKeyboard = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.compRef && this.isShow) {
            this.isShow = false;
            this.compRef.instance.wrapperCls = (_a = {},
                _a["am-number-keyboard-wrapper"] = true,
                _a["am-number-keyboard-wrapper-hide"] = true,
                _a);
        }
    };
    CustomInputService.compRef = null;
    CustomInputService.appRef = null;
    CustomInputService.isShow = false;
    CustomInputService.clickValue = null;
    CustomInputService._inputCompFactory = null;
    CustomInputService._keyboardPrefixCls = 'am-number-keyboard';
    CustomInputService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CustomInputService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver }
    ]; };
    return CustomInputService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CustomInput = /** @class */ (function () {
    function CustomInput(_ref, _customInputService, _ngZone) {
        var _this = this;
        this._ref = _ref;
        this._customInputService = _customInputService;
        this._ngZone = _ngZone;
        this.keyboardPrefixCls = 'am-number-keyboard';
        this.focus = false;
        this._value = '';
        this._defaultValue = '';
        this._placeholder = '';
        this._editable = true;
        this._disabled = false;
        this._setFocus = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.clsFakeContainer = true;
        this.inputFocus = function () {
            _this.removeBlurListener();
            /** @type {?} */
            var focus = _this.focus;
            if (!focus || _this._setFocus) {
                _this.onInputFocus();
            }
            setTimeout(function () {
                _this.addBlurListener();
            }, 50);
        };
        this.doBlur = function (ev) {
            /** @type {?} */
            var value = _this._value;
            /** @type {?} */
            var parentFound = false;
            /** @type {?} */
            var isInput = false;
            /** @type {?} */
            var isKeyboard = false;
            /** @type {?} */
            var isClear = false;
            /** @type {?} */
            var target = ev.target;
            while (target && target !== null && !parentFound) {
                if (target === _this._ref.nativeElement) {
                    parentFound = true;
                }
                if (target.localName === 'custominput') {
                    isInput = true;
                }
                if (target.localName === 'customkeyboard') {
                    isKeyboard = true;
                }
                if (target.className.indexOf('am-input-clear') >= 0) {
                    isClear = true;
                }
                target = target.parentElement;
            }
            // 当点击目标是本身的时候，获取焦点、不隐藏keyboard
            // 当点击目标不是本身但是其他的custom-input时，失去焦点、不隐藏keyboard
            // 当点击目标是keyboard时，不失去焦点，不隐藏keyboard
            if (parentFound) {
                _this.focus = true;
            }
            else if (isInput) {
                _this._setFocus = false;
                _this.focus = false;
                _this.onBlur.emit(_this._value);
            }
            if (_this.focus && isKeyboard) {
                _this.focus = true;
                _this.onKeyboardClick(CustomInputService.clickValue);
            }
            if (!parentFound && !isInput && !isKeyboard && !isClear && !_this._setFocus) {
                _this.focus = false;
                _this._setFocus = false;
                _this.onBlur.emit(_this._value);
                CustomInputService.hideKeyboard();
            }
            _this.setFakeInputCls();
        };
        this.removeBlurListener = function () {
            document.removeEventListener('click', _this.doBlur, false);
        };
        this.addBlurListener = function () {
            document.addEventListener('click', _this.doBlur, false);
        };
        this.onInputBlur = function (value) {
            _this.focus = false;
            _this.setFakeInputCls();
            _this.onBlur.emit(_this._value);
            CustomInputService.hideKeyboard();
        };
        this.onInputFocus = function () {
            _this.onFocus.emit(_this._value);
            _this.focus = true;
            _this._setFocus = false;
            _this.setFakeInputCls();
            setTimeout(function () {
                CustomInputService.showKeyboard();
            }, 100);
        };
        this.setFakeInputCls = function () {
            var _a;
            _this.fakeInputCls = (_a = {},
                _a["fake-input"] = true,
                _a['fake-input-disabled'] = _this._disabled,
                _a['focus'] = _this.focus,
                _a);
        };
        this.setContainerCls = function () {
            _this.clsFakeContainerLeft = _this._moneyKeyboardAlign === 'left';
        };
        this.onKeyboardClick = function (keyboardItemValue) {
            /** @type {?} */
            var valueAfterChange;
            // 删除键
            if (keyboardItemValue === 'delete') {
                valueAfterChange = _this._value.substring(0, _this._value.length - 1);
                _this.onChange.emit(valueAfterChange);
                // 确认键
            }
            else if (keyboardItemValue === 'confirm') {
                valueAfterChange = _this._value;
                _this.onChange.emit(valueAfterChange);
                _this.onInputBlur(_this._value);
                // 收起键
            }
            else if (keyboardItemValue === 'hide') {
                valueAfterChange = _this._value;
                _this.onInputBlur(valueAfterChange);
            }
            else {
                if (_this._maxLength !== undefined &&
                    +_this._maxLength >= 0 &&
                    (_this._value + keyboardItemValue).length > _this._maxLength) {
                    valueAfterChange = (_this._value + keyboardItemValue).substr(0, _this._maxLength);
                    _this.onChange.emit(valueAfterChange);
                }
                else {
                    valueAfterChange = _this._value + keyboardItemValue;
                    _this.onChange.emit(valueAfterChange);
                }
            }
            _this._ngZone.run(function () {
                _this._value = valueAfterChange;
            });
        };
    }
    Object.defineProperty(CustomInput.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (typeof v === undefined || v === null) {
                this._value = '';
            }
            else if (this._maxLength !== undefined && this._maxLength >= 0) {
                this._value = v.substr(0, this._maxLength);
            }
            else {
                this._value = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = this._defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "maxLength", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "editable", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._editable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "disabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "moneyKeyboardAlign", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._moneyKeyboardAlign = value;
            this.setContainerCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomInput.prototype, "setFocus", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._setFocus = value.focus;
                if (this._setFocus) {
                    this.inputFocus();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CustomInput.prototype.onFakeInputClick = /**
     * @return {?}
     */
    function () {
        if (this._preventKeyboard) {
            return;
        }
        this.inputFocus();
    };
    /**
     * @return {?}
     */
    CustomInput.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._preventKeyboard = this._disabled || !this._editable;
        this.setFakeInputCls();
        this.setContainerCls();
    };
    /**
     * @return {?}
     */
    CustomInput.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeBlurListener();
        if (CustomInputService) {
            CustomInputService.hideKeyboard();
            CustomInputService.compRef = null;
        }
        /** @type {?} */
        var container = document.querySelector("#" + this.keyboardPrefixCls + "-container");
        if (container) {
            container.remove();
        }
    };
    CustomInput.decorators = [
        { type: Component, args: [{
                    selector: 'CustomInput',
                    template: "<div *ngIf=\"value===''\" class=\"fake-input-placeholder\">\n  {{placeholder}}\n</div>\n<div [ngClass]=\"fakeInputCls\" (click)=\"onFakeInputClick()\">\n  {{value}}\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [CustomInputService]
                }] }
    ];
    /** @nocollapse */
    CustomInput.ctorParameters = function () { return [
        { type: ElementRef },
        { type: CustomInputService },
        { type: NgZone }
    ]; };
    CustomInput.propDecorators = {
        value: [{ type: Input }],
        defaultValue: [{ type: Input }],
        maxLength: [{ type: Input }],
        placeholder: [{ type: Input }],
        editable: [{ type: Input }],
        disabled: [{ type: Input }],
        moneyKeyboardAlign: [{ type: Input }],
        setFocus: [{ type: Input }],
        onChange: [{ type: Output }],
        onBlur: [{ type: Output }],
        onFocus: [{ type: Output }],
        clsFakeContainer: [{ type: HostBinding, args: ['class.fake-input-container',] }],
        clsFakeContainerLeft: [{ type: HostBinding, args: ['class.fake-input-container-left',] }]
    };
    return CustomInput;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItemModule = /** @class */ (function () {
    function InputItemModule() {
    }
    InputItemModule.decorators = [
        { type: NgModule, args: [{
                    exports: [InputItem, CustomKeyboard, CustomInput],
                    declarations: [InputItem, CustomKeyboard, CustomInput],
                    entryComponents: [CustomKeyboard],
                    imports: [CommonModule, FormsModule, ReactiveFormsModule]
                },] }
    ];
    return InputItemModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Button = /** @class */ (function () {
    function Button(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.prefixCls = 'am-button';
        this.ngTemplate = false;
        this._className = '';
        this._classList = [];
        this._size = 'large';
        this._loading = false;
        this._active = false;
        this._inline = false;
        this._disabled = false;
        this._icon = '';
        this._userAgent = (/** @type {?} */ (navigator)).userAgent || (/** @type {?} */ (navigator)).vendor || (/** @type {?} */ (window)).opera;
        this.onClick = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, this.prefixCls);
        this._className = this._el.className;
    }
    Object.defineProperty(Button.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = value;
            if (value) {
                if (this._el.querySelector('icon')) {
                    this._el.querySelector('icon').parentNode.removeChild(this._el.querySelector('icon'));
                }
            }
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "inline", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inline;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inline = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.ngTemplate = true;
                this._icon = value;
            }
            else {
                this.ngTemplate = false;
                this._icon = /** @type {?} */ (value);
                this.setClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._className = this._className + ' ' + v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.touchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = true;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.touchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = false;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this.onClick.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Button.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    /**
     * @return {?}
     */
    Button.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._el.querySelector('img')) {
            /** @type {?} */
            var amSize = this._size === 'small' ? 'am-icon-xxs' : 'am-icon-md';
            this._el.querySelector('img').setAttribute('class', "am-icon " + this.prefixCls + "-icon " + amSize);
            this._render.addClass(this._el, this.prefixCls + "-icon");
        }
    };
    /**
     * @return {?}
     */
    Button.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        this.iconType = this._loading ? 'loading' : this._icon;
        this._classList = [
            this._type && this.prefixCls + "-" + this._type,
            this._size === 'small' && this.prefixCls + "-" + this._size,
            this._disabled && this.prefixCls + "-disabled",
            this._loading && this.prefixCls + "-loading",
            this.iconType && this.prefixCls + "-icon",
            this._active && this.prefixCls + "-active",
            this._inline && this.prefixCls + "-inline"
        ].filter(function (item) {
            return !!item;
        });
        this._el.className = this._className + ' ' + this._classList.join(' ');
    };
    Button.decorators = [
        { type: Component, args: [{
                    selector: '[Button], nzm-button',
                    encapsulation: ViewEncapsulation.None,
                    template: "<Icon *ngIf=\"!ngTemplate\"\n      class=\"{{prefixCls}}-icon\"\n      [type]=\"iconType\"\n      [size]=\"size ==='small' ? 'xxs' : 'md'\"\n></Icon>\n<ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"icon\"></ng-template>\n<ng-content select=\"img\"></ng-content>\n<div class=\"{{prefixCls}}-content\">\n  <span>\n    <ng-content></ng-content>\n  </span>\n</div>"
                }] }
    ];
    /** @nocollapse */
    Button.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Button.propDecorators = {
        type: [{ type: Input }],
        size: [{ type: Input }],
        disabled: [{ type: Input }],
        loading: [{ type: Input }],
        inline: [{ type: Input }],
        icon: [{ type: Input }],
        className: [{ type: Input }],
        onClick: [{ type: Output }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }, { type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return Button;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var svgSprite = function (contents) { return "\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n  id=\"__ANTD_MOBILE_SVG_SPRITE_NODE__\"\n  style=\"position:absolute;width:0;height:0\"\n>\n  <defs>\n    " + contents + "\n  </defs>\n</svg>\n"; };
var IconHandler = /** @class */ (function () {
    function IconHandler() {
        this.contents = [];
        // both minified by https://github.com/svg/svgo
        this.icons = {
            check: '<svg viewBox="0 0 44 44"><path fill-rule="evenodd" d="M34.538 8L38 11.518 17.808 32 8 22.033l3.462-3.518 6.346 6.45z"/></svg>',
            'check-circle': '<svg viewBox="0 0 48 48"><path d="M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24zM13.1 23.2l-2.2 2.1 10 9.9L38.1 15l-2.2-2-15.2 17.8-7.6-7.6z" fill-rule="evenodd"/></svg>',
            'check-circle-o': '<svg viewBox="0 0 48 48"><g fill-rule="evenodd"><path d="M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24zm0-3c11.598 0 21-9.402 21-21S35.598 3 24 3 3 12.402 3 24s9.402 21 21 21z"/><path d="M12.2 23.2L10 25.3l10 9.9L37.2 15 35 13 19.8 30.8z"/></g></svg>',
            cross: '<svg viewBox="0 0 44 44"><path fill-rule="evenodd" d="M24.008 21.852l8.97-8.968L31.092 11l-8.97 8.968L13.157 11l-1.884 1.884 8.968 8.968-9.24 9.24 1.884 1.885 9.24-9.24 9.24 9.24 1.885-1.884-9.24-9.24z"/></svg>',
            'cross-circle': '<svg viewBox="0 0 48 48"><g fill-rule="evenodd"><path d="M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24zm0-3c11.598 0 21-9.402 21-21S35.598 3 24 3 3 12.402 3 24s9.402 21 21 21z"/><path d="M24.34 22.22l-7.775-7.775a1.5 1.5 0 1 0-2.12 2.12l7.773 7.775-7.774 7.775a1.5 1.5 0 1 0 2.12 2.12l7.775-7.773 7.774 7.774a1.5 1.5 0 1 0 2.12-2.12L26.46 24.34l7.774-7.774a1.5 1.5 0 1 0-2.12-2.12l-7.776 7.773z"/></g></svg>',
            'cross-circle-o': '<svg viewBox="0 0 48 48"><path d="M24 48c13.255 0 24-10.745 24-24S37.255 0 24 0 0 10.745 0 24s10.745 24 24 24zm.353-25.77l-7.593-7.593c-.797-.8-1.538-.822-2.263-.207-.724.614-.56 1.617-.124 2.067l7.852 7.847-7.72 7.723c-.727.728-.56 1.646-.066 2.177.493.532 1.553.683 2.31-.174l7.588-7.584 7.644 7.623c.796.798 1.608.724 2.21.145.605-.58.72-1.442-.074-2.24l-7.657-7.67 7.545-7.52c.81-.697.9-1.76.297-2.34-.92-.885-1.85-.338-2.264.078l-7.685 7.667z" fill-rule="evenodd"/></svg>',
            // Todo: simplify direction to 2, use css transform
            left: '<svg viewBox="0 0 44 44"><defs><path id="a" d="M-129-845h24v24h-24z"/></defs><clipPath id="b"><use xlink:href="#a" overflow="visible"/></clipPath><g clip-path="url(#b)"><defs><path id="c" d="M-903-949H947V996H-903z"/></defs></g><path d="M16.247 21.4L28.48 9.165l2.12 2.12-10.117 10.12L30.6 31.524l-2.12 2.12-12.233-12.232.007-.006z"/></svg>',
            right: '<svg viewBox="0 0 44 44"><defs><path id="a" d="M-129-845h24v24h-24z"/></defs><clipPath id="b"><use xlink:href="#a" overflow="visible"/></clipPath><g clip-path="url(#b)"><defs><path id="c" d="M-903-949H947V996H-903z"/></defs></g><path d="M30.6 21.4L18.37 9.165l-2.12 2.12 10.117 10.12-10.118 10.118 2.12 2.12 12.234-12.232-.005-.006z"/></svg>',
            down: '<svg viewBox="0 0 44 44"><path d="M22.355 28.237l-11.483-10.9c-.607-.576-1.714-.396-2.48.41l.674-.71c-.763.802-.73 2.07-.282 2.496l11.37 10.793-.04.04 2.088 2.195L23.3 31.52l12.308-11.682c.447-.425.48-1.694-.282-2.496l.674.71c-.766-.806-1.873-.986-2.48-.41L22.355 28.237z" fill-rule="evenodd"/></svg>',
            up: '<svg viewBox="0 0 44 44"><path fill="none" d="M-1-1h46v46H-1z"/><defs><path id="a" d="M-129-845h24v24h-24z"/></defs><clipPath id="b"><use xlink:href="#a"/></clipPath><g clip-path="url(#b)"><defs><path id="c" d="M-903-949H947V996H-903z"/></defs></g><path d="M23.417 14.23L11.184 26.46l2.12 2.12 10.12-10.117 10.118 10.118 2.12-2.12L23.43 14.228l-.006.005z"/></svg>',
            loading: '<svg viewBox="0 -2 59.75 60.25"><path fill="#ccc" d="M29.69-.527C14.044-.527 1.36 12.158 1.36 27.806S14.043 56.14 29.69 56.14c15.65 0 28.334-12.686 28.334-28.334S45.34-.527 29.69-.527zm.185 53.75c-14.037 0-25.417-11.38-25.417-25.417S15.838 2.39 29.875 2.39s25.417 11.38 25.417 25.417-11.38 25.416-25.417 25.416z"/><path fill="none" stroke="#108ee9" stroke-width="3" stroke-linecap="round" stroke-miterlimit="10" d="M56.587 29.766c.37-7.438-1.658-14.7-6.393-19.552"/></svg>',
            search: '<svg viewBox="0 0 44 44"><path d="M32.98 29.255l8.915 8.293L39.603 40l-8.86-8.242a15.952 15.952 0 0 1-10.753 4.147C11.16 35.905 4 28.763 4 19.952 4 11.142 11.16 4 19.99 4s15.99 7.142 15.99 15.952c0 3.472-1.112 6.685-3 9.303zm.05-9.21c0 7.123-5.7 12.918-12.88 12.918-7.176 0-13.015-5.795-13.015-12.918 0-7.12 5.84-12.917 13.017-12.917 7.178 0 12.88 5.797 12.88 12.917z" fill-rule="evenodd"/></svg>',
            ellipsis: '<svg viewBox="0 0 44 44"><circle cx="21.888" cy="22" r="4.045"/><circle cx="5.913" cy="22" r="4.045"/><circle cx="37.863" cy="22" r="4.045"/></svg>',
            'ellipsis-circle': '<svg viewBox="0 0 44 44"><g fill-rule="evenodd"><path d="M22.13.11C10.05.11.255 9.902.255 21.983S10.05 43.86 22.13 43.86s21.875-9.795 21.875-21.876S34.21.11 22.13.11zm0 40.7c-10.396 0-18.825-8.43-18.825-18.826S11.735 3.16 22.13 3.16c10.396 0 18.825 8.428 18.825 18.824S32.525 40.81 22.13 40.81z"/><circle cx="21.888" cy="22.701" r="2.445"/><circle cx="12.23" cy="22.701" r="2.445"/><circle cx="31.546" cy="22.701" r="2.445"/></g></svg>',
            'exclamation-circle': '<svg viewBox="0 0 64 64"><path d="M59.58 40.89L41.193 9.11C39.135 5.382 35.723 3 31.387 3c-3.11 0-6.52 2.382-8.58 6.11L4.42 40.89c-2.788 4.635-3.126 8.81-1.225 12.22C5.015 56.208 7.572 58 13 58h36.773c5.428 0 9.21-1.792 11.03-4.89 1.9-3.41 1.565-7.583-1.224-12.22zm-2.452 11c-.635 1.694-3.802 2.443-7.354 2.443H13c-3.59 0-5.493-.75-6.13-2.444-1.71-2.41-1.374-5.263 0-8.557l18.387-31.777c2.116-3.168 4.394-4.89 6.13-4.89 2.96 0 5.238 1.722 7.354 4.89l18.387 31.777c1.374 3.294 1.713 6.146 0 8.556zm-25.74-33c-.405 0-1.227.835-1.227 2.443v15.89c0 1.608.823 2.444 1.227 2.444 1.628 0 2.452-.836 2.452-2.445v-15.89c0-1.607-.825-2.443-2.453-2.443zm0 23.22c-.405 0-1.227.79-1.227 1.223v2.445c0 .434.823 1.222 1.227 1.222 1.628 0 2.452-.788 2.452-1.222v-2.445c0-.434-.825-1.222-2.453-1.222z" fill-rule="evenodd"/></svg>',
            'info-circle': '<svg viewBox="0 0 44 44"><circle cx="13.828" cy="19.63" r="1.938"/><circle cx="21.767" cy="19.63" r="1.938"/><circle cx="29.767" cy="19.63" r="1.938"/><path d="M22.102 4.16c-9.918 0-17.958 7.147-17.958 15.962 0 4.935 2.522 9.345 6.48 12.273v5.667l.04.012a2.627 2.627 0 1 0 4.5 1.455h.002l5.026-3.54c.628.06 1.265.094 1.91.094 9.92 0 17.96-7.146 17.96-15.96C40.06 11.306 32.02 4.16 22.1 4.16zm-.04 29.902c-.902 0-1.78-.08-2.642-.207l-5.882 4.234c-.024.024-.055.04-.083.06l-.008.005a.51.51 0 0 1-.284.095.525.525 0 0 1-.525-.525l.005-6.375c-3.91-2.516-6.456-6.544-6.456-11.1 0-7.628 7.107-13.812 15.875-13.812s15.875 6.184 15.875 13.812-7.107 13.812-15.875 13.812z"/></svg>',
            'question-circle': '<svg viewBox="0 0 44 44"><g fill-rule="evenodd"><path d="M21.186 3c-10.853 0-19.36 8.506-19.36 19.358C1.827 32.494 10.334 41 21.187 41c10.133 0 18.64-8.506 18.64-18.642C39.827 11.506 31.32 3 21.187 3m15.64 19c0 8.823-7.178 16-16 16s-16-7.177-16-16 7.178-16 16-16 16 7.177 16 16z"/><path d="M22.827 31.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m4-15.48c0 .957-.203 1.822-.61 2.593-.427.792-1.117 1.612-2.073 2.457-.867.734-1.453 1.435-1.754 2.096-.302.7-.453 1.693-.453 2.98a.828.828 0 0 1-.823.854.828.828 0 0 1-.584-.22.877.877 0 0 1-.24-.635c0-1.305.168-2.38.506-3.227.336-.883.93-1.682 1.78-2.4 1.01-.883 1.71-1.692 2.1-2.428.336-.645.503-1.38.503-2.21-.02-.935-.3-1.7-.85-2.288-.655-.717-1.62-1.075-2.897-1.075-1.506 0-2.596.535-3.27 1.6-.46.754-.688 1.645-.688 2.677a.92.92 0 0 1-.266.66.747.747 0 0 1-.56.25.73.73 0 0 1-.584-.194c-.16-.164-.24-.393-.24-.69 0-1.82.585-3.272 1.755-4.357C18.645 11.486 19.928 11 21.434 11h.293c1.452 0 2.638.414 3.56 1.24 1.028.903 1.54 2.163 1.54 3.78z"/></g></svg>',
            voice: '<svg viewBox="0 0 38 33"><g fill-rule="evenodd"><path d="M17.838 28.8c-.564-.468-1.192-.983-1.836-1.496-4.244-3.385-5.294-3.67-6.006-3.67-.014 0-.027.005-.04.005-.015 0-.028-.006-.042-.006H3.562c-.734 0-.903-.203-.903-.928v-12.62c0-.49.057-.8.66-.8H9.1c.694 0 1.76-.28 6.4-3.63.83-.596 1.638-1.196 2.337-1.722V28.8zM19.682.19c-.463-.22-1.014-.158-1.417.157-.02.016-1.983 1.552-4.152 3.125C10.34 6.21 9.243 6.664 9.02 6.737H3.676c-.027 0-.053.003-.08.004H1.183c-.608 0-1.1.487-1.1 1.086V25.14c0 .598.492 1.084 1.1 1.084h8.71c.22.08 1.257.55 4.605 3.24 1.947 1.562 3.694 3.088 3.712 3.103.25.22.568.333.89.333.186 0 .373-.038.55-.116.48-.213.79-.684.79-1.204V1.38c0-.506-.294-.968-.758-1.19z" mask="url(#mask-2)"/><path d="M31.42 16.475c0-3.363-1.854-6.297-4.606-7.876-.125-.067-.42-.193-.625-.193-.613 0-1.11.488-1.11 1.09 0 .404.22.764.55.952 2.13 1.19 3.566 3.44 3.566 6.024 0 2.627-1.486 4.913-3.677 6.087-.32.19-.53.54-.53.935 0 .602.495 1.09 1.106 1.09.26.002.568-.15.568-.15 2.835-1.556 4.754-4.538 4.754-7.96" mask="url(#mask-4)"/><path d="M30.14 3.057c-.205-.122-.41-.22-.658-.22-.608 0-1.1.485-1.1 1.084 0 .434.26.78.627.978 4.042 2.323 6.76 6.636 6.76 11.578 0 4.938-2.715 9.248-6.754 11.572-.354.19-.66.55-.66.993 0 .6.494 1.085 1.102 1.085.243 0 .438-.092.65-.213 4.692-2.695 7.848-7.7 7.848-13.435 0-5.723-3.142-10.718-7.817-13.418" mask="url(#mask-6)"/></g></svg>',
            plus: '<svg viewBox="0 0 30 30"><path d="M14 14H0v2h14v14h2V16h14v-2H16V0h-2v14z" fill-rule="evenodd"/></svg>',
            minus: '<svg viewBox="0 0 30 2"><path d="M0 0h30v2H0z" fill-rule="evenodd"/></svg>',
            dislike: '<svg viewBox="0 0 72 72"><g fill="none" fill-rule="evenodd"><path d="M36 72c19.882 0 36-16.118 36-36S55.882 0 36 0 0 16.118 0 36s16.118 36 36 36zm0-2c18.778 0 34-15.222 34-34S54.778 2 36 2 2 17.222 2 36s15.222 34 34 34z" fill="#FFF"/><path fill="#FFF" d="M47 22h2v6h-2zm-24 0h2v6h-2z"/><path d="M21 51s4.6-7 15-7 15 7 15 7" stroke="#FFF" stroke-width="2"/></g></svg>',
            fail: '<svg viewBox="0 0 72 72"><g fill="none" fill-rule="evenodd"><path d="M36 72c19.882 0 36-16.118 36-36S55.882 0 36 0 0 16.118 0 36s16.118 36 36 36zm0-2c18.778 0 34-15.222 34-34S54.778 2 36 2 2 17.222 2 36s15.222 34 34 34z" fill="#FFF"/><path d="M22 22l28.304 28.304m-28.304 0L50.304 22" stroke="#FFF" stroke-width="2"/></g></svg>',
            success: '<svg viewBox="0 0 72 72"><g fill="none" fill-rule="evenodd"><path d="M36 72c19.882 0 36-16.118 36-36S55.882 0 36 0 0 16.118 0 36s16.118 36 36 36zm0-2c18.778 0 34-15.222 34-34S54.778 2 36 2 2 17.222 2 36s15.222 34 34 34z" fill="#FFF"/><path stroke="#FFF" stroke-width="2" d="M19 34.54l11.545 11.923L52.815 24"/></g></svg>'
        };
    }
    /**
     * @return {?}
     */
    IconHandler.prototype.renderSvgSprite = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var symbols = Object.keys(this.icons)
            .map(function (iconName) {
            /** @type {?} */
            var svgContent = _this.icons[iconName].split('svg')[1];
            return "<symbol id=" + iconName + svgContent + "symbol>";
        })
            .join('');
        return svgSprite(symbols);
    };
    /**
     * @return {?}
     */
    IconHandler.prototype.load = /**
     * @return {?}
     */
    function () {
        if (!document) {
            return;
        }
        /** @type {?} */
        var existing = document.getElementById('__ANTD_MOBILE_SVG_SPRITE_NODE__');
        /** @type {?} */
        var mountNode = document.body;
        if (!existing) {
            mountNode.insertAdjacentHTML('afterbegin', this.renderSvgSprite());
        }
    };
    IconHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    IconHandler.ctorParameters = function () { return []; };
    return IconHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconComponent = /** @class */ (function () {
    function IconComponent(_iconHandler) {
        this._iconHandler = _iconHandler;
        this.clsMap = {};
        this._type = '';
        this._size = 'md';
        this._src = '';
        this.color = '';
        this._iconHandler.load();
    }
    Object.defineProperty(IconComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "src", {
        get: /**
         * @return {?}
         */
        function () {
            return this._src;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._src = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IconComponent.prototype.setClsMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.clsMap = (_a = {},
            _a["am-icon-" + this._type] = true,
            _a["am-icon-" + this._size] = true,
            _a);
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Icon, nzm-icon',
                    template: "<svg *ngIf=\"type\"\n     class=\"am-icon\"\n     [ngClass]=\"clsMap\"\n     [ngStyle]=\"{color: color}\"\n>\n  <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" attr.xlink:href=\"#{{type}}\"></use>\n</svg>\n<img *ngIf=\"src\" src=\"{{src}}\" class=\"am-icon\" [ngClass]=\"clsMap\">\n<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [IconHandler]
                }] }
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: IconHandler }
    ]; };
    IconComponent.propDecorators = {
        color: [{ type: Input }],
        type: [{ type: Input }],
        src: [{ type: Input }],
        size: [{ type: Input }]
    };
    return IconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [IconComponent],
                    declarations: [IconComponent]
                },] }
    ];
    return IconModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WingBlank = /** @class */ (function () {
    function WingBlank() {
        this.prefixCls = 'am-wingblank';
        this.size = 'lg';
        this.amWingBlank = true;
    }
    Object.defineProperty(WingBlank.prototype, "amWingBlnkSm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'sm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WingBlank.prototype, "amWingBlnkMd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WingBlank.prototype, "amWingBlnkLg", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'lg';
        },
        enumerable: true,
        configurable: true
    });
    WingBlank.decorators = [
        { type: Component, args: [{
                    selector: 'WingBlank, nzm-wingblank',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    WingBlank.ctorParameters = function () { return []; };
    WingBlank.propDecorators = {
        size: [{ type: Input }],
        amWingBlank: [{ type: HostBinding, args: ['class.am-wingblank',] }],
        amWingBlnkSm: [{ type: HostBinding, args: ['class.am-wingblank-sm',] }],
        amWingBlnkMd: [{ type: HostBinding, args: ['class.am-wingblank-md',] }],
        amWingBlnkLg: [{ type: HostBinding, args: ['class.am-wingblank-lg',] }]
    };
    return WingBlank;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WingBlankModule = /** @class */ (function () {
    function WingBlankModule() {
    }
    WingBlankModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [WingBlank],
                    exports: [WingBlank],
                    imports: [CommonModule]
                },] }
    ];
    return WingBlankModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WhiteSpace = /** @class */ (function () {
    function WhiteSpace() {
        this.prefixCls = 'am-whitespace';
        this.size = 'md';
        this.amWhiteSpace = true;
    }
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceXs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'xs';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceSm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'sm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceMd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceLg", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'lg';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceXl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'xl';
        },
        enumerable: true,
        configurable: true
    });
    WhiteSpace.decorators = [
        { type: Component, args: [{
                    selector: 'WhiteSpace, nzm-whitespace',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    WhiteSpace.ctorParameters = function () { return []; };
    WhiteSpace.propDecorators = {
        size: [{ type: Input }],
        amWhiteSpace: [{ type: HostBinding, args: ['class.am-whitespace',] }],
        amWhitespaceXs: [{ type: HostBinding, args: ['class.am-whitespace-xs',] }],
        amWhitespaceSm: [{ type: HostBinding, args: ['class.am-whitespace-sm',] }],
        amWhitespaceMd: [{ type: HostBinding, args: ['class.am-whitespace-md',] }],
        amWhitespaceLg: [{ type: HostBinding, args: ['class.am-whitespace-lg',] }],
        amWhitespaceXl: [{ type: HostBinding, args: ['class.am-whitespace-xl',] }]
    };
    return WhiteSpace;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WhiteSpaceModule = /** @class */ (function () {
    function WhiteSpaceModule() {
    }
    WhiteSpaceModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [WhiteSpace],
                    exports: [WhiteSpace],
                    imports: [CommonModule]
                },] }
    ];
    return WhiteSpaceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var List = /** @class */ (function () {
    function List() {
        this.defaultProps = {
            prefixCls: 'am-list'
        };
        this._renderHeader = '';
        this._renderFooter = '';
        this._className = '';
    }
    Object.defineProperty(List.prototype, "className", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._className = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "renderHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this._renderHeader;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._renderHeader = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "renderFooter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._renderFooter;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._renderFooter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "hostClassName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'am-list ' + this._className;
        },
        enumerable: true,
        configurable: true
    });
    List.decorators = [
        { type: Component, args: [{
                    selector: 'List, nzm-list',
                    template: "<div *ngIf=\"renderHeader\" class=\"{{defaultProps.prefixCls}}-header\">\n  {{renderHeader()}}\n</div>\n<div class=\"{{defaultProps.prefixCls}}-body\">\n  <ng-content></ng-content>\n</div>\n<div *ngIf=\"renderFooter\" class=\"{{defaultProps.prefixCls}}-footer\">\n  {{renderFooter()}}\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    List.ctorParameters = function () { return []; };
    List.propDecorators = {
        className: [{ type: Input }],
        renderHeader: [{ type: Input }],
        renderFooter: [{ type: Input }],
        hostClassName: [{ type: HostBinding, args: ['class',] }]
    };
    return List;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ListItem = /** @class */ (function () {
    function ListItem() {
        this.defaultProps = {
            prefixCls: 'am-list',
            align: 'middle',
            error: false,
            multipleLine: false,
            wrap: false,
            platform: 'ios',
            rippleStyle: {}
        };
        this.arrowCls = {};
        this.lineCls = {};
        this.wrapCls = '';
        this.rippleCls = {};
        this.rippleClicked = false;
        this._thumb_component = false;
        this._thumb_src = '';
        this._extra_component = false;
        this._extra_title = '';
        this._arrow = '';
        this._disabled = false;
        this._className = '';
        this._active = false;
        this.onClick = new EventEmitter();
    }
    Object.defineProperty(ListItem.prototype, "extra", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extra;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._extra_component = true;
                this._extra = value;
            }
            else {
                this._extra_component = false;
                this._extra_title = /** @type {?} */ (value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "extra_component", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extra_component;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "extra_title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extra_title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "className", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._className = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "arrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._arrow;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._arrow = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "multipleLine", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.multipleLine = value === '' ? true : value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "error", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.error = value === '' ? true : value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "wrap", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.wrap = value === '' ? true : value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "align", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.align = value;
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "platform", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.platform = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "disabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'boolean') {
                this._disabled = value;
            }
            else {
                if (value === 'true') {
                    this._disabled = true;
                }
                else {
                    this._disabled = false;
                }
            }
            this.setClsMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "thumb", {
        get: /**
         * @return {?}
         */
        function () {
            return this._thumb;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._thumb_component = true;
                this._thumb = value;
            }
            else {
                this._thumb_component = false;
                this._thumb_src = /** @type {?} */ (value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "thumb_component", {
        get: /**
         * @return {?}
         */
        function () {
            return this._thumb_component;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "thumb_src", {
        get: /**
         * @return {?}
         */
        function () {
            return this._thumb_src;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "bingClassName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.wrapCls;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ListItem.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onItemClick(event);
    };
    /**
     * @return {?}
     */
    ListItem.prototype.start = /**
     * @return {?}
     */
    function () {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = true;
            this.setClsMap();
        }
    };
    /**
     * @return {?}
     */
    ListItem.prototype.move = /**
     * @return {?}
     */
    function () {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    };
    /**
     * @return {?}
     */
    ListItem.prototype.end = /**
     * @return {?}
     */
    function () {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    };
    /**
     * @return {?}
     */
    ListItem.prototype.mouse_start = /**
     * @return {?}
     */
    function () {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = true;
            this.setClsMap();
        }
    };
    /**
     * @return {?}
     */
    ListItem.prototype.mouse_end = /**
     * @return {?}
     */
    function () {
        if (!this._disabled && this.onClick.observers.length > 0) {
            this._active = false;
            this.setClsMap();
        }
    };
    /**
     * @return {?}
     */
    ListItem.prototype.setClsMap = /**
     * @return {?}
     */
    function () {
        var e_1, _a, _b, _c, _d, _e, _f;
        /** @type {?} */
        var classNameList = this._className.split(' ');
        /** @type {?} */
        var classNameObj = {};
        this.wrapCls = '';
        try {
            for (var classNameList_1 = __values(classNameList), classNameList_1_1 = classNameList_1.next(); !classNameList_1_1.done; classNameList_1_1 = classNameList_1.next()) {
                var value = classNameList_1_1.value;
                if (value) {
                    classNameObj = __assign({}, classNameObj, (_b = {}, _b["" + value] = true, _b));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (classNameList_1_1 && !classNameList_1_1.done && (_a = classNameList_1.return)) _a.call(classNameList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        /** @type {?} */
        var wrapClsObj = __assign((_c = {}, _c[this.defaultProps.prefixCls + "-item"] = true, _c[this.defaultProps.prefixCls + "-item-disabled"] = this._disabled, _c[this.defaultProps.prefixCls + "-item-active"] = this._active, _c[this.defaultProps.prefixCls + "-item-error"] = this.defaultProps.error, _c[this.defaultProps.prefixCls + "-item-top"] = this.defaultProps.align === 'top', _c[this.defaultProps.prefixCls + "-item-middle"] = this.defaultProps.align === 'middle', _c[this.defaultProps.prefixCls + "-item-bottom"] = this.defaultProps.align === 'bottom', _c), classNameObj);
        for (var key in wrapClsObj) {
            if (wrapClsObj[key]) {
                this.wrapCls += " " + key;
            }
        }
        this.rippleCls = (_d = {},
            _d[this.defaultProps.prefixCls + "-ripple"] = true,
            _d[this.defaultProps.prefixCls + "-ripple-animate"] = this.rippleClicked,
            _d);
        this.lineCls = (_e = {},
            _e[this.defaultProps.prefixCls + "-line"] = true,
            _e[this.defaultProps.prefixCls + "-line-multiple"] = this.defaultProps.multipleLine,
            _e[this.defaultProps.prefixCls + "-line-wrap"] = this.defaultProps.wrap,
            _e);
        this.arrowCls = (_f = {},
            _f[this.defaultProps.prefixCls + "-arrow"] = true,
            _f[this.defaultProps.prefixCls + "-arrow-horizontal"] = this._arrow === 'horizontal',
            _f[this.defaultProps.prefixCls + "-arrow-vertical"] = this._arrow === 'down' || this._arrow === 'up',
            _f[this.defaultProps.prefixCls + "-arrow-vertical-up"] = this._arrow === 'up',
            _f);
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    ListItem.prototype.onItemClick = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        var _this = this;
        /** @type {?} */
        var isAndroid = this.defaultProps.platform === 'android';
        if (isAndroid) {
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
                this.debounceTimeout = null;
            }
            /** @type {?} */
            var Item = ev.currentTarget;
            /** @type {?} */
            var RippleWidth = Math.max(Item.offsetHeight, Item.offsetWidth);
            /** @type {?} */
            var ClientRect_1 = ev.currentTarget.getBoundingClientRect();
            /** @type {?} */
            var pointX = ev.clientX - ClientRect_1.left - Item.offsetWidth / 2;
            /** @type {?} */
            var pointY = ev.clientY - ClientRect_1.top - Item.offsetWidth / 2;
            /** @type {?} */
            var coverRippleStyle = {
                width: RippleWidth + "px",
                height: RippleWidth + "px",
                left: pointX + "px",
                top: pointY + "px"
            };
            this.defaultProps.rippleStyle = coverRippleStyle;
            this.rippleClicked = true;
            this.setClsMap();
            this.debounceTimeout = setTimeout(function () {
                _this.rippleClicked = false;
                _this.defaultProps.rippleStyle = { display: 'none' };
                _this.setClsMap();
            }, 1000);
        }
        this.onClick.emit(ev);
    };
    /**
     * @return {?}
     */
    ListItem.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.defaultProps.rippleStyle = { display: 'none' };
        this.setClsMap();
    };
    /**
     * @return {?}
     */
    ListItem.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.debounceTimeout) {
            clearTimeout(this.debounceTimeout);
            this.debounceTimeout = null;
        }
    };
    ListItem.decorators = [
        { type: Component, args: [{
                    selector: 'ListItem, nzm-list-item',
                    template: "<div *ngIf=\"thumb_src && !thumb_component\" class=\"{{defaultProps.prefixCls}}-thumb\">\n  <img src={{thumb_src}}/>\n</div>\n<div *ngIf=\"thumb && thumb_component\" class=\"{{defaultProps.prefixCls}}-thumb\">\n  <ng-template [ngTemplateOutlet]=\"thumb\"></ng-template>\n</div>\n<div [ngClass]=\"lineCls\">\n  <div class=\"{{defaultProps.prefixCls}}-content\">\n    <ng-content></ng-content>\n  </div>\n  <div *ngIf=\"extra_title && !extra_component\"\n       class=\"{{defaultProps.prefixCls}}-extra\"\n       [innerHTML]=\"extra_title\"\n  ></div>\n  <div *ngIf=\"extra && extra_component\" class=\"{{defaultProps.prefixCls}}-extra\">\n    <ng-template [ngTemplateOutlet]=\"extra\"></ng-template>\n  </div>\n  <div *ngIf=\"arrow\" [ngClass]=\"arrowCls\" aria-hidden=\"true\"></div>\n</div>\n<div [ngClass]=\"rippleCls\" [ngStyle]=\"defaultProps.rippleStyle\"></div>\n\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ListItem.ctorParameters = function () { return []; };
    ListItem.propDecorators = {
        extra: [{ type: Input }],
        className: [{ type: Input }],
        arrow: [{ type: Input }],
        multipleLine: [{ type: Input }],
        error: [{ type: Input }],
        wrap: [{ type: Input }],
        align: [{ type: Input }],
        platform: [{ type: Input }],
        disabled: [{ type: Input }],
        thumb: [{ type: Input }],
        onClick: [{ type: Output }],
        bingClassName: [{ type: HostBinding, args: ['class',] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }],
        start: [{ type: HostListener, args: ['touchstart',] }],
        move: [{ type: HostListener, args: ['touchmove',] }],
        end: [{ type: HostListener, args: ['touchend',] }],
        mouse_start: [{ type: HostListener, args: ['mousedown',] }],
        mouse_end: [{ type: HostListener, args: ['mouseup',] }]
    };
    return ListItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Brief = /** @class */ (function () {
    function Brief() {
        this.defaultProps = {
            prefixCls: 'am-list'
        };
    }
    Brief.decorators = [
        { type: Component, args: [{
                    selector: 'Brief, nzm-brief',
                    template: "<div class=\"{{defaultProps.prefixCls}}-brief\">\n  <ng-content></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    return Brief;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ListModule = /** @class */ (function () {
    function ListModule() {
    }
    ListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule],
                    exports: [List, ListItem, Brief],
                    declarations: [List, ListItem, Brief]
                },] }
    ];
    return ListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var NZ_BUTTON_DIRECTIVES = [Button];
var ButtonModule = /** @class */ (function () {
    function ButtonModule() {
    }
    ButtonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: NZ_BUTTON_DIRECTIVES,
                    exports: NZ_BUTTON_DIRECTIVES,
                    imports: [CommonModule, IconModule, WingBlankModule, WhiteSpaceModule, ListModule]
                },] }
    ];
    return ButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Switch = /** @class */ (function () {
    function Switch() {
        this.prefixCls = 'am-switch';
        this.wrapCls = 'am-switch';
        this.checkboxCls = {
            'checkbox-disabled': false
        };
        this.colorStyle = {};
        this._color = '';
        this._platform = 'ios';
        this._disabled = false;
        this.onChange = new EventEmitter();
        this.onClick = new EventEmitter();
        this.dispaly = true;
    }
    Object.defineProperty(Switch.prototype, "color", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._color = value;
            this.colorStyle = { background: this._color };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "platform", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._platform = value;
            this.wrapCls = value === 'android' ? this.prefixCls + "-android" : this.prefixCls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "checked", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.switchChecked = value;
            this.colorStyle = { background: value ? this._color : '' };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.checkboxCls = {
                'checkbox-disabled': value
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} checkedValue
     * @return {?}
     */
    Switch.prototype.changeSwitch = /**
     * @param {?} checkedValue
     * @return {?}
     */
    function (checkedValue) {
        this.switchChecked = checkedValue;
        this.colorStyle = { background: checkedValue ? this._color : '' };
        this.onChange.emit(checkedValue);
    };
    /**
     * @return {?}
     */
    Switch.prototype.click = /**
     * @return {?}
     */
    function () {
        this.onClick.emit(this.switchChecked);
    };
    Switch.decorators = [
        { type: Component, args: [{
                    selector: 'Switch, nzm-switch',
                    template: "<label class=\"{{prefixCls}}\" [ngClass]=\"wrapCls\">\n  <input #switchValue\n         type=\"checkbox\"\n         name=\"name\"\n         class=\"{{prefixCls}}-checkbox\"\n         [checked]=\"switchChecked\"\n         [value]=\"switchChecked\"\n         [disabled]=\"disabled\"\n         (change)=\"changeSwitch(switchValue.checked)\"\n  />\n  <div class=\"checkbox\"\n       [ngClass]=\"checkboxCls\"\n       [ngStyle]=\"colorStyle\"\n       (click)=\"click()\"\n  ></div>\n</label>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return Switch; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    Switch.ctorParameters = function () { return []; };
    Switch.propDecorators = {
        color: [{ type: Input }],
        name: [{ type: Input }],
        platform: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        onClick: [{ type: Output }],
        dispaly: [{ type: HostBinding, args: ['style.display',] }]
    };
    return Switch;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SwitchModule = /** @class */ (function () {
    function SwitchModule() {
    }
    SwitchModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Switch],
                    declarations: [Switch],
                    imports: [CommonModule, WingBlankModule]
                },] }
    ];
    return SwitchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar$1 = /** @class */ (function () {
    function SearchBar(_elementRef, _localeProvider) {
        var _a;
        this._elementRef = _elementRef;
        this._localeProvider = _localeProvider;
        this.prefixCls = 'am-search';
        this.cancelCls = (_a = {},
            _a[this.prefixCls + "-cancel"] = true,
            _a);
        this._defaultValue = '';
        this._value = '';
        this._placeholder = '';
        this._showCancelButton = false;
        this._disabled = false;
        this._focus = false;
        this._isSubmit = false;
        this._isCustomText = false;
        this._isClearClicking = false;
        this._blurFromOnClear = false;
        this.locale = {};
        this._unsubscribe$ = new Subject();
        this.onSubmit = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.onClear = new EventEmitter();
    }
    Object.defineProperty(SearchBar.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = value;
            this.inputElementRef.nativeElement.value = this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v || '';
            this.inputElementRef.nativeElement.value = this._value;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "showCancelButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showCancelButton;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showCancelButton = value;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "cancelText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._cancelText;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined) {
                this._cancelText = value;
                this._isCustomText = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "maxLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxLength;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBar.prototype, "setFocus", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (value.focusValue) {
                    this._focus = true;
                    this.inputElementRef.nativeElement.focus();
                    this._blurFromOnClear = true;
                    this.onSearchbarFocus();
                }
                else {
                    this._blurFromOnClear = false;
                    this.onSearchbarBlur();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchBar.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _a, _b, _c;
        this.wrapCls = (_a = {},
            _a["" + this.prefixCls] = true,
            _a[this.prefixCls + "-start"] = !!(this._focus || (this._value && this._value.length > 0)) && !this._disabled,
            _a);
        this.cancelCls = (_b = {},
            _b[this.prefixCls + "-cancel"] = true,
            _b[this.prefixCls + "-cancel-show"] = this._showCancelButton || this._focus || (this._value && this._value.length > 0),
            _b[this.prefixCls + "-cancel-anim"] = this._focus,
            _b);
        this.clearCls = (_c = {},
            _c[this.prefixCls + "-clear"] = this._value && this._value.length > 0,
            _c[this.prefixCls + "-clear-show"] = this._value && this._value.length > 0 && !this._isSubmit,
            _c[this.prefixCls + "-clear-active"] = this._isClearClicking,
            _c);
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        if (this._inputContainerRef.className.indexOf(this.prefixCls + "-start") > -1) {
            /** @type {?} */
            var realWidth = this._syntheticPhContainerRef.getBoundingClientRect().width;
            this._syntheticPhRef.style.width = Math.ceil(realWidth) + 'px';
            if (!this._showCancelButton) {
                this._rightBtnRef.style.marginRight = '0';
            }
        }
        else {
            this._syntheticPhRef.style.width = '100%';
            if (!this._showCancelButton) {
                this._rightBtnInitMarginLeft = window.getComputedStyle(this._rightBtnRef)['margin-left'];
                /** @type {?} */
                var btnMarginRight = this._rightBtnRef.offsetWidth + parseInt(this._rightBtnInitMarginLeft, 10);
                this._rightBtnRef.style.marginRight = '-' + btnMarginRight + 'px';
            }
        }
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.onSearchbarBlur = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        setTimeout(function () {
            if (!self._blurFromOnClear && self._value === '' && self._focus) {
                self._focus = false;
                self._value = '';
                self.onBlur.emit();
                self.setClass();
            }
            self._blurFromOnClear = false;
        }, 50);
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.onSearchbarFocus = /**
     * @return {?}
     */
    function () {
        this._focus = true;
        this._isSubmit = false;
        this.onFocus.emit();
        this.setClass();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SearchBar.prototype.onSearchbarChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this._focus = true;
        this.onChange.emit(e);
        this.setClass();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SearchBar.prototype.onSearchSubmit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this._value = e.target[0].value;
        this._isSubmit = true;
        this.onSubmit.emit(this._value);
        this.setClass();
        this._blurFromOnClear = true;
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.onSearchbarCancel = /**
     * @return {?}
     */
    function () {
        this._focus = false;
        this._value = '';
        this.onCancel.emit();
        this.setClass();
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.onSearchbarClear = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._blurFromOnClear = true;
        this._isClearClicking = true;
        this.onSearchbarChange('');
        this.inputElementRef.nativeElement.focus();
        this.onClear.emit(this._value);
        this.setClass();
        setTimeout(function () {
            _this._value = '';
            _this._isClearClicking = false;
            _this._blurFromOnClear = false;
            _this.setClass();
        }, 100);
        this.onSearchbarFocus();
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setClass();
        this._localeProvider.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this.locale = _this._localeProvider.getLocaleSubObj('SearchBar');
            _this._cancelText = _this._isCustomText ? _this._cancelText : _this.locale.cancelText;
        });
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._syntheticPhContainerRef = this._elementRef.nativeElement.getElementsByClassName(this.prefixCls + "-synthetic-ph-container")[0];
        this._syntheticPhRef = this._elementRef.nativeElement.getElementsByClassName(this.prefixCls + "-synthetic-ph")[0];
        this._rightBtnRef = this._elementRef.nativeElement.getElementsByClassName('cancel')[0];
        this._inputContainerRef = this._elementRef.nativeElement.getElementsByClassName("" + this.prefixCls)[0];
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.setStyle();
    };
    /**
     * @return {?}
     */
    SearchBar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    SearchBar.decorators = [
        { type: Component, args: [{
                    selector: 'SearchBar, nzm-search-bar',
                    template: "<form name=\"myForm\"\n      class=\"{{prefixCls}}\"\n      [ngClass]=\"wrapCls\"\n      action=\"#\"\n      (submit)=\"onSearchSubmit($event)\"\n>\n  <div class=\"{{prefixCls}}-input\">\n    <div class=\"{{prefixCls}}-synthetic-ph\"\n         style=\"box-sizing:unset\"\n         [@cancelButtonState]=\"showCancelButton?'visible' : 'hidden'\"\n    >\n      <span class=\"{{prefixCls}}-synthetic-ph-container\">\n        <i class=\"{{prefixCls}}-synthetic-ph-icon\"></i>\n        <span class=\"{{prefixCls}}-synthetic-ph-placeholder\"\n              [ngStyle]=\"{'visibility' : (placeholder && !value) ? 'visible' : 'hidden'}\"\n        >\n          {{placeholder}}\n        </span>\n      </span>\n    </div>\n    <input #search\n           class=\"{{prefixCls}}-value\"\n           style=\"outline:none;\"\n           [name]=\"'search'\"\n           [type]=\"'search'\"\n           [disabled]=\"disabled\"\n           [maxlength]=\"maxLength\"\n           [placeholder]=\"placeholder\"\n           [(ngModel)]=\"value\"\n           (blur)=\"onSearchbarBlur()\"\n           (focus)=\"onSearchbarFocus()\"\n           (ngModelChange)=\"onSearchbarChange($event)\"\n    />\n    <a [ngClass]=\"clearCls\"\n       style=\"box-sizing: content-box;transition: 0s\"\n       (click)=\"onSearchbarClear()\"\n    ></a>\n  </div>\n  <div class=\"cancel\"\n       [ngClass]=\"cancelCls\"\n       (click)=\"onSearchbarCancel()\"\n  >\n    {{cancelText}}\n  </div>\n</form>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return SearchBar; }),
                            multi: true
                        }
                    ],
                    animations: [
                        trigger('cancelButtonState', [
                            state('visible', style({ width: '*' })),
                            state('hidden', style({ width: '100%' })),
                            transition('visible =>hidden', [animate(300, style({ width: '100%' }))]),
                            transition('hidden => visible', [animate(300, style({ width: '*' }))])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    SearchBar.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LocaleProviderService }
    ]; };
    SearchBar.propDecorators = {
        inputElementRef: [{ type: ViewChild, args: ['search',] }],
        defaultValue: [{ type: Input }],
        value: [{ type: Input }],
        placeholder: [{ type: Input }],
        showCancelButton: [{ type: Input }],
        cancelText: [{ type: Input }],
        disabled: [{ type: Input }],
        maxLength: [{ type: Input }],
        setFocus: [{ type: Input }],
        onSubmit: [{ type: Output }],
        onChange: [{ type: Output }],
        onFocus: [{ type: Output }],
        onBlur: [{ type: Output }],
        onCancel: [{ type: Output }],
        onClear: [{ type: Output }]
    };
    return SearchBar;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LocaleProviderPipe = /** @class */ (function () {
    function LocaleProviderPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} keyPath
     * @return {?}
     */
    LocaleProviderPipe.prototype.transform = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this._locale.getLocaleValue(keyPath);
    };
    LocaleProviderPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'localeProvider'
                },] }
    ];
    /** @nocollapse */
    LocaleProviderPipe.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    return LocaleProviderPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ɵ0$1 = zh_CN;
var LocaleProviderModule = /** @class */ (function () {
    function LocaleProviderModule() {
    }
    LocaleProviderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [LocaleProviderPipe],
                    exports: [LocaleProviderPipe],
                    providers: [{ provide: LOCAL_PROVIDER_TOKEN, useValue: ɵ0$1 }, LOCALE_PROVIDER_SERVICE_PROVIDER]
                },] }
    ];
    return LocaleProviderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBarModule = /** @class */ (function () {
    function SearchBarModule() {
    }
    SearchBarModule.decorators = [
        { type: NgModule, args: [{
                    exports: [SearchBar$1],
                    declarations: [SearchBar$1],
                    imports: [CommonModule, FormsModule, LocaleProviderModule],
                    providers: [LocaleProviderModule]
                },] }
    ];
    return SearchBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Stepper = /** @class */ (function () {
    function Stepper() {
        this.prefixCls = 'am-stepper';
        this._max = Infinity;
        this._min = -Infinity;
        this._step = 1;
        this._disabled = false;
        this._readOnly = false;
        this._showNumber = false;
        this._upDisabled = false;
        this._downDisabled = false;
        this._isUpClick = false;
        this._isDownClick = false;
        this.onChange = new EventEmitter();
        this.clsStepper = true;
        this.clsStpDisabled = this._disabled;
        this.clsShowNum = this._showNumber;
    }
    Object.defineProperty(Stepper.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._defaultValue = value;
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._disabled = true;
                this._downDisabled = true;
                this._upDisabled = true;
            }
            this.clsStpDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readOnly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readOnly = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "showNumber", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showNumber = value;
            this.clsShowNum = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Stepper.prototype.onIncrease = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._upDisabled) {
            this._value = this._value + this._step;
            this.onChange.emit(this._value);
            if (this._value + this._step > this._max) {
                this._upDisabled = true;
            }
            if (this._value - this._step >= this._min) {
                this._downDisabled = false;
            }
            this._isUpClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isUpClick = false;
                _this.setCls();
            }, 100);
        }
    };
    /**
     * @return {?}
     */
    Stepper.prototype.onDecrease = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._downDisabled) {
            this._value = this._value - this._step;
            this.onChange.emit(this._value);
            if (this._value - this._step < this._min) {
                this._downDisabled = true;
            }
            if (this._value + this._step <= this._max) {
                this._upDisabled = false;
            }
            this._isDownClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isDownClick = false;
                _this.setCls();
            }, 100);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Stepper.prototype.inputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        this._value = value ? parseInt(value, null) : 0;
        if (value < this._min) {
            this._value = this._min;
        }
        if (value > this._max) {
            this._value = this._max;
        }
        this.onChange.emit(this._value);
    };
    /**
     * @return {?}
     */
    Stepper.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        this.upDisableCls = (_a = {},
            _a[this.prefixCls + "-handler-up-disabled"] = this._upDisabled,
            _a[this.prefixCls + "-handler-active"] = this._isUpClick,
            _a);
        this.downDisableCls = (_b = {},
            _b[this.prefixCls + "-handler-down-disabled"] = this._downDisabled,
            _b[this.prefixCls + "-handler-active"] = this._isDownClick,
            _b);
    };
    /**
     * @return {?}
     */
    Stepper.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this._value + this._step > this._max) {
            this._upDisabled = true;
        }
        if (this._value - this._step < this._min) {
            this._downDisabled = true;
        }
        this.setCls();
    };
    Stepper.decorators = [
        { type: Component, args: [{
                    selector: 'Stepper , nzm-stepper',
                    template: "<div class=\"{{prefixCls}}-handler-wrap\">\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-up\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"upDisableCls\"\n          (click)=\"onIncrease()\">\n          <Icon [type]=\"'plus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-down\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"downDisableCls\"\n          (click)=\"onDecrease()\">\n          <Icon [type]=\"'minus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n</div>\n<div class=\"{{prefixCls}}-input-wrap\">\n    <input class=\"{{prefixCls}}-input\"\n           style=\"outline:none\"\n           [disabled]=\"disabled\"\n           [readonly]=\"readOnly\"\n           [autocomplete]=\"'off'\"\n           [max]=\"max\"\n           [min]=\"min\"\n           [(ngModel)]=\"value\"\n           (change)=\"inputChange($event)\">\n</div>"
                }] }
    ];
    /** @nocollapse */
    Stepper.ctorParameters = function () { return []; };
    Stepper.propDecorators = {
        max: [{ type: Input }],
        min: [{ type: Input }],
        value: [{ type: Input }],
        step: [{ type: Input }],
        defaultValue: [{ type: Input }],
        disabled: [{ type: Input }],
        readOnly: [{ type: Input }],
        showNumber: [{ type: Input }],
        onChange: [{ type: Output }],
        clsStepper: [{ type: HostBinding, args: ['class.am-stepper',] }],
        clsStpDisabled: [{ type: HostBinding, args: ['class.am-stepper-disabled',] }],
        clsShowNum: [{ type: HostBinding, args: ['class.showNumber',] }]
    };
    return Stepper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var StepperModule = /** @class */ (function () {
    function StepperModule() {
    }
    StepperModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Stepper],
                    declarations: [Stepper],
                    imports: [CommonModule, FormsModule, IconModule]
                },] }
    ];
    return StepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Step = /** @class */ (function () {
    function Step(_el) {
        this._el = _el;
        this.prefixCls = 'am-steps';
        this.stepItemCls = {};
        this.isIconString = true;
        this.clsStepItem = true;
    }
    Object.defineProperty(Step.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._status = value;
                this.setClass();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Step.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Step.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            return this._description;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._description = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Step.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (typeof value !== 'string') {
                    this.isIconString = false;
                }
                this._icon = value;
                this.setClass();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Step.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        this.iconCls = (_a = {},
            _a[this.prefixCls + "-icon"] = true,
            _a);
        this.stepItemCls = Object.assign(this.stepItemCls, (_b = {},
            _b[this.prefixCls + "-item-" + this.status] = true,
            _b[this.prefixCls + "-item-custom"] = this.icon,
            _b));
    };
    /**
     * @return {?}
     */
    Step.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    Step.decorators = [
        { type: Component, args: [{
                    selector: 'Step, nzm-step',
                    template: "<div [ngClass]=\"stepItemCls\">\n  <div class=\"{{prefixCls}}-item-tail\">\n    {{tailContent}}\n  </div>\n  <div class=\"{{prefixCls}}-item-icon\">\n    <span *ngIf=\"!isIconString\" [ngClass]=\"iconCls\">\n      <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n    </span>\n    <span *ngIf=\"isIconString && (status=== 'error' || status==='finish' || status==='wait' )\" [ngClass]=\"iconCls\">\n      <Icon [type]=\"icon\" [size]=\"iconSize\">\n      </Icon>\n    </span>\n    <span *ngIf=\"isIconString && !(status=== 'error' || status==='finish' || status==='wait')\" [ngClass]=\"iconCls\">{{stepNumber}}\n    </span>\n  </div>\n  <div class=\"{{prefixCls}}-item-content\">\n    <div class=\"{{prefixCls}}-item-title\">\n      {{title}}\n    </div>\n    <div *ngIf=\"description\" class=\"{{prefixCls}}-item-description\">{{description}}</div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return Step; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    Step.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Step.propDecorators = {
        status: [{ type: Input }],
        title: [{ type: Input }],
        description: [{ type: Input }],
        icon: [{ type: Input }],
        clsStepItem: [{ type: HostBinding, args: ['class.am-steps-item',] }]
    };
    return Step;
}());
/** @enum {string} */
var StatusEnum = {
    WAIT: 'wait',
    PROCESS: 'process',
    FINISH: 'finish',
    ERROR: 'error',
};
/** @enum {string} */
var DirectionEnum = {
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Steps = /** @class */ (function () {
    function Steps(_elf, _render) {
        this._elf = _elf;
        this._render = _render;
        this.prefixCls = 'am-steps';
        this._current = 0;
        this._status = StatusEnum.PROCESS;
        this._direction = DirectionEnum.VERTICAL;
        this.clsSteps = true;
    }
    Object.defineProperty(Steps.prototype, "current", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value >= 0) {
                this._current = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "size", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "status", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = value;
            if (this.stepItems) {
                this.setStepStyle();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "direction", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Steps.prototype.setStepStyle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var itemCount = this.stepItems.length;
        /** @type {?} */
        var itemArr = this.stepItems['_results'];
        for (var index = 0; index < itemCount; index++) {
            /** @type {?} */
            var step = itemArr[index];
            step.stepNumber = index + 1;
            if (index < itemCount - 1 && itemArr[index + 1].status === StatusEnum.ERROR) {
                step.stepItemCls = step.stepItemCls
                    ? Object.assign(step.stepItemCls, { 'error-tail': true })
                    : { 'error-tail': true };
            }
            /** @type {?} */
            var icon = step.icon;
            if (!step.status) {
                if (index === this._current) {
                    step.status = this._status;
                }
                else if (index < this._current) {
                    step.status = StatusEnum.FINISH;
                }
                else {
                    step.status = StatusEnum.WAIT;
                }
            }
            if (!icon) {
                if (index < this._current) {
                    icon = 'check-circle-o';
                }
                else if (index > this._current) {
                    icon = 'ellipsis';
                    step.stepItemCls = step.stepItemCls
                        ? Object.assign(step.stepItemCls, { 'ellipsis-item': true })
                        : { 'ellipsis-item': true };
                }
                if ((this._status === StatusEnum.ERROR && index === this._current) || step.status === StatusEnum.ERROR) {
                    icon = 'cross-circle-o';
                }
            }
            step.icon = icon;
            step.iconSize = this._size === 'small' ? (this._status === StatusEnum.WAIT ? 'xxs' : 'xs') : 'md';
            step.setClass();
        }
    };
    /**
     * @return {?}
     */
    Steps.prototype.setCls = /**
     * @return {?}
     */
    function () {
        if (this._direction === DirectionEnum.HORIZONTAL) {
            this.clsStepsLabelVtl = true;
            this.clsStepsHztl = true;
            this.clsStepsVtl = false;
        }
        else if (this._direction === DirectionEnum.VERTICAL) {
            this.clsStepsVtl = true;
            this.clsStepsHztl = false;
        }
        if (this._size === 'small') {
            this.clsStepsSmall = true;
        }
        else {
            this.clsStepsSmall = false;
        }
    };
    /**
     * @return {?}
     */
    Steps.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    Steps.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.setStepStyle();
        }, 0);
    };
    Steps.decorators = [
        { type: Component, args: [{
                    selector: 'Steps,nzm-steps',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    Steps.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Steps.propDecorators = {
        stepItems: [{ type: ContentChildren, args: [Step,] }],
        current: [{ type: Input }],
        size: [{ type: Input }],
        status: [{ type: Input }],
        direction: [{ type: Input }],
        clsSteps: [{ type: HostBinding, args: ['class.am-steps',] }],
        clsStepsSmall: [{ type: HostBinding, args: ['class.am-steps-small',] }],
        clsStepsLabelVtl: [{ type: HostBinding, args: ['class.am-steps-label-vertical',] }],
        clsStepsVtl: [{ type: HostBinding, args: ['class.am-steps-vertical',] }],
        clsStepsHztl: [{ type: HostBinding, args: ['class.am-steps-horizontal',] }]
    };
    return Steps;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var StepsModule = /** @class */ (function () {
    function StepsModule() {
    }
    StepsModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Steps, Step],
                    declarations: [Steps, Step],
                    imports: [CommonModule, FormsModule, IconModule]
                },] }
    ];
    return StepsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CarouselSlideComponent = /** @class */ (function () {
    function CarouselSlideComponent() {
        this.container = true;
        this.height = 'auto';
    }
    CarouselSlideComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CarouselSlide, nzm-carousel-slide',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    CarouselSlideComponent.propDecorators = {
        container: [{ type: HostBinding, args: ['class.carousel-container',] }],
        width: [{ type: HostBinding, args: ['style.width.px',] }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        left: [{ type: HostBinding, args: ['style.left.px',] }],
        top: [{ type: HostBinding, args: ['style.top.px',] }],
        margin: [{ type: HostBinding, args: ['style.margin',] }]
    };
    return CarouselSlideComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} event
 * @return {?}
 */
function getEventTarget(event) {
    if (event.type === 'mousedown' || event.type === 'mousemove' || event.type === 'mouseup' || event.type === 'mouseleave') {
        return event;
    }
    else {
        if (event && event.changedTouches && event.changedTouches[0]) {
            return event.changedTouches[0];
        }
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent(_ele) {
        this._ele = _ele;
        this.style = {
            height: 'auto',
            width: '100%',
            transform: 'translate3d(0px, 0px, 0px)',
            margin: ''
        };
        this._nodeArr = [];
        this._lastIndex = 0;
        this._isMouseDown = false;
        this._rationWidth = 0;
        this._currentSlideWidth = 0;
        this._currentSlideHeight = 0;
        this._transition = '';
        this._spaceWidth = 0;
        this.speed = 500;
        this.selectedIndex = 0;
        this.dots = true;
        this.vertical = false;
        this.autoplay = false;
        this.autoplayInterval = 3000;
        this.infinite = false;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.frameOverflow = 'hidden';
        this.cellSpacing = 0;
        this.slideWidth = 1;
        this.swipeSpeed = 12;
        this.dragging = true;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.carouselWrapper = true;
        this.carouselwrap = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.dragging) {
            return;
        }
        this.stopTimer();
        this._isMouseDown = true;
        this.touchObject = {
            startX: getEventTarget(event).pageX,
            startY: getEventTarget(event).pageY,
            direction: this.touchObject.direction
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        var direction = this.swipeDirection(this.touchObject.startX, getEventTarget(event).pageX, this.touchObject.startY, getEventTarget(event).pageY).direction;
        if (direction !== 0) {
            event.preventDefault();
        }
        /** @type {?} */
        var length = this.vertical
            ? Math.abs(getEventTarget(event).pageY - this.touchObject.startY)
            : Math.abs(getEventTarget(event).pageX - this.touchObject.startX);
        /** @type {?} */
        var offset = -this.touchObject.direction * length - this.selectedIndex * this._rationWidth;
        this.touchObject = {
            startX: this.touchObject.startX,
            startY: this.touchObject.startY,
            endX: getEventTarget(event).pageX,
            endY: getEventTarget(event).pageY,
            length: length,
            direction: direction,
            offset: offset
        };
        if (direction !== 0) {
            this.setSlideStyles(this.selectedIndex, this.touchObject.direction);
        }
        this.getListStyles(offset);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        this._isMouseDown = false;
        if (this.touchObject.length > this.swipeSpeed) {
            this.carousel(this.touchObject.direction);
        }
        else {
            this.getListStyles(this.touchObject.direction * this.touchObject.length + this.touchObject.offset);
            this.style['transition'] = this._transition;
        }
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.initCarouselSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nativeElement = this._ele.nativeElement;
        this.slideHeight = nativeElement.querySelector('carouselslide').clientHeight;
        this._currentSlideHeight = this.slideHeight * this.slideWidth;
        this._currentSlideWidth = nativeElement.clientWidth;
        this._rationWidth = this.vertical ? this._currentSlideWidth : this._currentSlideWidth * this.slideWidth;
        this._spaceWidth = ((this.vertical ? this.slideHeight : this._currentSlideWidth) - this._rationWidth) / 2;
    };
    /**
     * @param {?} items
     * @return {?}
     */
    CarouselComponent.prototype.carouselInit = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        this.infinite = this.infinite || true;
        this._nodeArr = items['_results'];
        this.dragging = this.dragging ? this.dragging : false;
        if (this._nodeArr.length > 1) {
            this._lastIndex = this._nodeArr.length - 1;
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    v.width = _this.vertical ? 'auto' : _this._rationWidth - _this.cellSpacing;
                    v.left = _this.vertical ? 0 : index === _this._lastIndex ? -_this._rationWidth : index * _this._rationWidth;
                    v.top = _this.vertical ? (index === _this._lastIndex ? -_this._rationWidth : index * _this._rationWidth) : 0;
                    v.margin = _this.vertical ? _this.cellSpacing / 2 + "px auto" : "auto " + _this.cellSpacing / 2 + "px";
                });
                _this.startTimer();
            }, 0);
        }
        else if (this._nodeArr.length === 1) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v) {
                    v.width = _this._rationWidth - _this.cellSpacing;
                    v.left = 0;
                    v.top = 0;
                    v.margin = "auto " + _this.cellSpacing / 2 + "px";
                });
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.startTimer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.autoplay) {
            return;
        }
        this.stopTimer();
        this._timer = this.autoplayInterval
            ? setInterval(function () {
                _this.carousel(1);
            }, this.autoplayInterval)
            : 0;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        clearInterval(this._timer);
    };
    /**
     * @param {?} moveDirection
     * @return {?}
     */
    CarouselComponent.prototype.carousel = /**
     * @param {?} moveDirection
     * @return {?}
     */
    function (moveDirection) {
        if (this.vertical) {
            if (moveDirection === 1) {
                this.moveUp();
            }
            else if (moveDirection === -1) {
                this.moveDown();
            }
        }
        else {
            if (moveDirection === 1) {
                this.moveLeft();
            }
            else if (moveDirection === -1) {
                this.moveRight();
            }
        }
        this.style['transition'] = this._transition;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveUp = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveLeft = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveRight = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    /**
     * @param {?} pre
     * @return {?}
     */
    CarouselComponent.prototype.getAfterNode = /**
     * @param {?} pre
     * @return {?}
     */
    function (pre) {
        var _this = this;
        /** @type {?} */
        var nextIndex;
        if (pre) {
            if (this.selectedIndex <= 0) {
                this.getListStyles(this._rationWidth);
                setTimeout(function () {
                    _this._nodeArr.forEach(function (v, tempIndex) {
                        if (tempIndex === 0) {
                            v.left = _this.vertical ? 0 : _this._nodeArr.length * _this._rationWidth;
                            v.top = _this.vertical ? _this._nodeArr.length * _this._rationWidth : 0;
                        }
                        else {
                            v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                            v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                        }
                    });
                    _this.getListStyles(-_this._rationWidth * (_this.items.length - 1));
                }, this.speed);
                nextIndex = !this.infinite ? null : this._lastIndex;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex - 1;
            this.getListStyles(nextIndex * this._rationWidth * this.touchObject.direction);
            this._nodeArr.forEach(function (v, tempIndex) {
                if (0 === tempIndex && nextIndex === _this._nodeArr.length - 2) {
                    v.left = 0;
                    v.top = 0;
                }
            });
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
        else {
            if (this.selectedIndex >= this._lastIndex) {
                this.setSlideStyles(this.selectedIndex, 1);
                this.getListStyles(-(this._lastIndex + 1) * this._rationWidth);
                nextIndex = !this.infinite ? null : 0;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex + 1;
            this.setSlideStyles(this.selectedIndex, 1);
            this.getListStyles(-nextIndex * this._rationWidth);
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.caculateDirectionLeftCurrentIndex = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex + 1) % this.items.length;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.caculateDirectionRightCurrentIndex = /**
     * @return {?}
     */
    function () {
        if (this.selectedIndex === 0) {
            this.selectedIndex = this.items.length;
        }
        /** @type {?} */
        var previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex - 1) % this.items.length;
    };
    /**
     * @param {?} afterIndex
     * @return {?}
     */
    CarouselComponent.prototype.gotoCarousel = /**
     * @param {?} afterIndex
     * @return {?}
     */
    function (afterIndex) {
        var _this = this;
        if (afterIndex === null) {
            return;
        }
        this.getCurrentIndex();
        if (afterIndex === 0) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    if (index === _this._nodeArr.length - 1) {
                        v.left = _this.vertical ? 0 : -_this._rationWidth;
                        v.top = _this.vertical ? -_this._rationWidth : 0;
                    }
                    else {
                        v.left = _this.vertical ? 0 : index * _this._rationWidth;
                        v.top = _this.vertical ? index * _this._rationWidth : 0;
                    }
                });
                _this.startTimer();
                _this.getListStyles(0);
            }, this.speed);
        }
        this.selectedIndex = afterIndex;
        this.afterChange.emit(this.selectedIndex);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.getCurrentIndex = /**
     * @return {?}
     */
    function () {
        if (this.touchObject.direction === 1) {
            this.caculateDirectionLeftCurrentIndex();
        }
        else {
            this.caculateDirectionRightCurrentIndex();
        }
    };
    /**
     * @param {?} index
     * @param {?} direction
     * @param {?=} xDist
     * @return {?}
     */
    CarouselComponent.prototype.setSlideStyles = /**
     * @param {?} index
     * @param {?} direction
     * @param {?=} xDist
     * @return {?}
     */
    function (index, direction, xDist) {
        var _this = this;
        if (xDist === void 0) { xDist = 0; }
        if (direction === 1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index < _this._nodeArr.length && index - 1 === tempIndex) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length + tempIndex) * _this._rationWidth : 0;
                    }
                }
                else if (_this._nodeArr.length - 1 === tempIndex && index !== 2) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length - 1) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length - 1) * _this._rationWidth : 0;
                    }
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 1 && _this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 0 && !_this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
        else if (direction === -1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index === 0 && _this._nodeArr.length - 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 2 && index + 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === 1 && 0 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth * tempIndex;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index > 1) {
                    v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
    };
    /**
     * @param {?=} offset
     * @return {?}
     */
    CarouselComponent.prototype.getListStyles = /**
     * @param {?=} offset
     * @return {?}
     */
    function (offset) {
        if (offset === void 0) { offset = 0; }
        /** @type {?} */
        var positionOffset = offset +
            (this.vertical
                ? (this.slideHeight - this._currentSlideHeight) / 2
                : (this._currentSlideWidth - this._rationWidth) / 2) -
            this.cellSpacing;
        this.style = {
            height: this._currentSlideHeight + 'px',
            width: this.items.length * this._rationWidth + 'px',
            transform: this.vertical
                ? "translate3d(0px, " + positionOffset + "px, 0px)"
                : "translate3d(" + positionOffset + "px, 0px, 0px)",
            margin: this.vertical ? (this.cellSpacing / 2) * -1 + "px 0px" : "0px " + (this.cellSpacing / 2) * -1 + "px"
        };
    };
    /**
     * @param {?} x1
     * @param {?} x2
     * @param {?} y1
     * @param {?} y2
     * @return {?}
     */
    CarouselComponent.prototype.swipeDirection = /**
     * @param {?} x1
     * @param {?} x2
     * @param {?} y1
     * @param {?} y2
     * @return {?}
     */
    function (x1, x2, y1, y2) {
        /** @type {?} */
        var xDist = x1 - x2;
        /** @type {?} */
        var yDist = y1 - y2;
        /** @type {?} */
        var r = Math.atan2(yDist, xDist);
        /** @type {?} */
        var swipeAngle = Math.round((r * 180) / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return {
                direction: -1,
                xDist: xDist
            };
        }
        if (this.vertical === true) {
            if (swipeAngle >= 35 + 33 && swipeAngle <= 135) {
                return {
                    direction: 1,
                    xDist: xDist
                };
            }
            else {
                return {
                    direction: -1,
                    xDist: xDist
                };
            }
        }
        return {
            direction: 0,
            xDist: xDist
        };
    };
    Object.defineProperty(CarouselComponent.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? this.selectedIndex : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "pageCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? this.items.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "dotindicatorStatus", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? (this.items.length > 1) : this.dots;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.touchObject = { direction: 1 };
        this._transition = "transform " + this.speed / 1000 + "s";
        this.items.changes.subscribe(function (items) {
            _this.carouselInit(items);
        });
        this.initCarouselSize();
        this.getListStyles();
        this.carouselInit(this.items);
        /** @type {?} */
        var nativeElement = this._ele.nativeElement;
        /** @type {?} */
        var targetNode = nativeElement.querySelector('carouselslide');
        /** @type {?} */
        var config = { attributes: true, childList: true, subtree: true };
        /** @type {?} */
        var callback = function (mutationsList) {
            var e_1, _a;
            try {
                for (var mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    if (mutation.type == 'attributes') {
                        if (_this.slideHeight !== nativeElement.querySelector('carouselslide').clientHeight) {
                            _this.initCarouselSize();
                            _this.getListStyles();
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        this.observer = new MutationObserver(callback);
        this.observer.observe(targetNode, config);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.observer.disconnect();
        this.observer = null;
        this.stopTimer();
    };
    CarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Carousel, nzm-carousel',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div class=\"slider-frame\" [ngStyle]=\"{overflow: frameOverflow}\">\n  <ul class=\"slider-list\" [ngStyle]=\"style\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n<DotIndicator *ngIf=\"dotindicatorStatus\"\n              class=\"am-carousel-wrap-dot\"\n              [page]=\"page\"\n              [dotStyle]=\"dotStyle\"\n              [pageCount]=\"pageCount\"\n              [dotActiveStyle]=\"dotActiveStyle\"\n></DotIndicator>\n"
                }] }
    ];
    /** @nocollapse */
    CarouselComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CarouselComponent.propDecorators = {
        items: [{ type: ContentChildren, args: [CarouselSlideComponent,] }],
        speed: [{ type: Input }],
        selectedIndex: [{ type: Input }],
        dots: [{ type: Input }],
        vertical: [{ type: Input }],
        autoplay: [{ type: Input }],
        autoplayInterval: [{ type: Input }],
        infinite: [{ type: Input }],
        dotStyle: [{ type: Input }],
        dotActiveStyle: [{ type: Input }],
        frameOverflow: [{ type: Input }],
        cellSpacing: [{ type: Input }],
        slideWidth: [{ type: Input }],
        swipeSpeed: [{ type: Input }],
        dragging: [{ type: Input }],
        afterChange: [{ type: Output }],
        beforeChange: [{ type: Output }],
        carouselWrapper: [{ type: HostBinding, args: ['class.am-carousel',] }],
        carouselwrap: [{ type: HostBinding, args: ['class.carousel',] }],
        panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }],
        cancel: [{ type: HostListener, args: ['touchcancel', ['$event'],] }]
    };
    return CarouselComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DotIndicatorComponent = /** @class */ (function () {
    function DotIndicatorComponent() {
        this.items = [];
        this._page = 0;
        this._pageCount = 0;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.dotColor = 'white';
        this.dotIndicator = true;
    }
    Object.defineProperty(DotIndicatorComponent.prototype, "page", {
        set: /**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            this._page = p;
            this.updateSelected();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotIndicatorComponent.prototype, "pageCount", {
        set: /**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            this._pageCount = p || 0;
            this.updateItems();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DotIndicatorComponent.prototype.updateItems = /**
     * @return {?}
     */
    function () {
        this.items = new Array(this._pageCount);
        for (var i = 0; i < this._pageCount; i++) {
            this.items[i] = { active: i == this._page };
        }
    };
    /**
     * @return {?}
     */
    DotIndicatorComponent.prototype.updateSelected = /**
     * @return {?}
     */
    function () {
        if (this.items.length != this._pageCount) {
            return this.updateItems();
        }
        if (this.items.length == 0) {
            return;
        }
        for (var i = 0; i < this._pageCount; i++) {
            this.items[i].active = false;
        }
        this.items[this._page].active = true;
    };
    DotIndicatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DotIndicator, nzm-dot-indicator',
                    template: "<div class=\"am-carousel-wrap\">\n  <div *ngFor=\"let item of items\"\n       class=\"am-carousel-wrap-dot\"\n       [class.am-carousel-wrap-dot-active]=\"item.active\"\n  >\n    <span [ngStyle]=\"item.active ? dotActiveStyle : dotStyle\"></span>\n  </div>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    DotIndicatorComponent.propDecorators = {
        page: [{ type: Input }],
        pageCount: [{ type: Input }],
        dotStyle: [{ type: Input }],
        dotActiveStyle: [{ type: Input }],
        dotColor: [{ type: Input }],
        dotIndicator: [{ type: HostBinding, args: ['class.dot-indicator',] }]
    };
    return DotIndicatorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CarouselModule = /** @class */ (function () {
    function CarouselModule() {
    }
    CarouselModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [CarouselComponent, CarouselSlideComponent, DotIndicatorComponent],
                    exports: [CarouselComponent, CarouselSlideComponent, DotIndicatorComponent]
                },] }
    ];
    return CarouselModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return coerceBooleanProperty(value);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Checkbox = /** @class */ (function () {
    function Checkbox() {
        var _a;
        this.prefixCls = 'am-checkbox';
        this.classMap = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-checked"] = this.checked,
            _a[this.prefixCls + "-disabled"] = this.disabled,
            _a);
        this._checked = false;
        this._disabled = false;
        this._ngModelOnChange = Function.prototype;
        this._ngModelOnTouched = Function.prototype;
        this.onChange = new EventEmitter();
        this.checkBoxWrapper = true;
    }
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this._disabled) {
                this._checked = value;
                this.updateClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Checkbox.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this._disabled) {
            this.updateValue(!this._checked);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Checkbox.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._ngModelOnChange(value);
        this.onChange.emit({ name: this.name, value: this.value, checked: value });
        this.checked = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Checkbox.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (null !== value) {
            this.checked = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Checkbox.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Checkbox.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnTouched = fn;
    };
    /**
     * @return {?}
     */
    Checkbox.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateClassMap();
    };
    /**
     * @return {?}
     */
    Checkbox.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.updateClassMap();
    };
    /**
     * @return {?}
     */
    Checkbox.prototype.updateClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.classMap = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-checked"] = this.checked,
            _a[this.prefixCls + "-disabled"] = this.disabled,
            _a);
    };
    Checkbox.decorators = [
        { type: Component, args: [{
                    selector: '[Checkbox], [nzm-checkbox]',
                    template: "<span [ngClass]=\"classMap\">\n  <input type=\"checkbox\"\n         class=\"{{prefixCls}}-input\"\n         [attr.name]=\"name\"\n         [attr.value]=\"value\"\n         [checked]=\"checked\"\n  >\n  <span class=\"{{prefixCls}}-inner\"></span>\n</span>\n<ng-content></ng-content>\n",
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return Checkbox; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    Checkbox.ctorParameters = function () { return []; };
    Checkbox.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        checkBoxWrapper: [{ type: HostBinding, args: ['class.am-checkbox-wrapper',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return Checkbox;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AgreeItem = /** @class */ (function () {
    function AgreeItem() {
        this.prefixCls = 'am-checkbox';
        this.checked = false;
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.checkboxAgree = true;
    }
    /**
     * @return {?}
     */
    AgreeItem.prototype.agree = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AgreeItem.prototype.change = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onChange.emit(event);
    };
    AgreeItem.decorators = [
        { type: Component, args: [{
                    selector: 'AgreeItem, nzm-agree-item',
                    template: "<label Checkbox\n       class=\"{{prefixCls}}-agree-label\"\n       [name]=\"name\"\n       [value]=\"value\"\n       [checked]=\"checked\"\n       [disabled]=\"disabled\"\n       (click)=\"agree()\"\n       (onChange)=\"change($event)\"\n>\n  <ng-content></ng-content>\n</label>"
                }] }
    ];
    /** @nocollapse */
    AgreeItem.ctorParameters = function () { return []; };
    AgreeItem.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        checkboxAgree: [{ type: HostBinding, args: ['class.am-checkbox-agree',] }]
    };
    return AgreeItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CheckboxItem = /** @class */ (function () {
    function CheckboxItem() {
        this.prefixCls = 'am-checkbox';
        this.checked = false;
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CheckboxItem.prototype.onCheckboxClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
        if (this.onClick.observers.length > 0) {
            this.onClick.emit(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CheckboxItem.prototype.change = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onChange.emit(event);
    };
    CheckboxItem.decorators = [
        { type: Component, args: [{
                    selector: 'CheckboxItem, nzm-checkbox-item',
                    template: "<ListItem [className]=\"'am-checkbox-item ' + (disabled ? 'am-checkbox-item-disabled' : '')\"\n          [disabled]=\"disabled\"\n          [thumb]=\"checkbox\"\n          (onClick)=\"onCheckboxClick($event)\"\n>\n  <ng-content></ng-content>\n</ListItem>\n<ng-template #checkbox>\n  <label Checkbox\n         [name]=\"name\"\n         [value]=\"value\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         (onChange)=\"change($event)\"\n  >\n  </label>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    CheckboxItem.ctorParameters = function () { return []; };
    CheckboxItem.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        onClick: [{ type: Output }]
    };
    return CheckboxItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CheckboxModule = /** @class */ (function () {
    function CheckboxModule() {
    }
    CheckboxModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, ListModule],
                    declarations: [Checkbox, CheckboxItem, AgreeItem],
                    exports: [Checkbox, CheckboxItem, AgreeItem]
                },] }
    ];
    return CheckboxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Radio = /** @class */ (function () {
    function Radio() {
        var _a;
        this.prefixCls = 'am-radio';
        this.classMap = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-checked"] = this.checked,
            _a[this.prefixCls + "-disabled"] = this.disabled,
            _a);
        this._checked = false;
        this._disabled = false;
        this._ngModelOnChange = Function.prototype;
        this._ngModelOnTouched = Function.prototype;
        this.onChange = new EventEmitter();
        this.radioWrapper = true;
    }
    Object.defineProperty(Radio.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._checked = value;
            this.updateClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Radio.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Radio.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this._disabled && !this._checked) {
            this.updateValue(true);
        }
    };
    /**
     * @param {?} checkValue
     * @return {?}
     */
    Radio.prototype.updateValue = /**
     * @param {?} checkValue
     * @return {?}
     */
    function (checkValue) {
        this._ngModelOnChange(checkValue);
        this.onChange.emit({
            name: this.name,
            value: this.value,
            checked: checkValue
        });
        this.checked = checkValue;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Radio.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (null !== value) {
            this.checked = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Radio.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Radio.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._ngModelOnTouched = fn;
    };
    /**
     * @return {?}
     */
    Radio.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateClassMap();
    };
    /**
     * @return {?}
     */
    Radio.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.updateClassMap();
    };
    /**
     * @return {?}
     */
    Radio.prototype.updateClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.classMap = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-checked"] = this.checked,
            _a[this.prefixCls + "-disabled"] = this.disabled,
            _a);
    };
    Radio.decorators = [
        { type: Component, args: [{
                    selector: '[Radio], [nzm-radio]',
                    template: "<span [ngClass]=\"classMap\">\n  <input type=\"radio\"\n         class=\"{{prefixCls}}-input\"\n         [attr.name]=\"name\"\n         [attr.value]=\"value\"\n         [checked]=\"checked\"\n  >\n  <span class=\"{{prefixCls}}-inner\"></span>\n</span>\n<ng-content></ng-content>\n",
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return Radio; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    Radio.ctorParameters = function () { return []; };
    Radio.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        radioWrapper: [{ type: HostBinding, args: ['class.am-radio-wrapper',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return Radio;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RadioItem = /** @class */ (function () {
    function RadioItem() {
        this.prefixCls = 'am-radio';
        this.checked = false;
        this.disabled = false;
        this.onClick = new EventEmitter();
        this.onChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    RadioItem.prototype.onRadioItemClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled && !this.checked) {
            this.checked = true;
            this.onChange.emit({
                name: this.name,
                value: this.value,
                checked: true
            });
        }
        if (this.onClick.observers.length > 0) {
            this.onClick.emit(event);
        }
    };
    RadioItem.decorators = [
        { type: Component, args: [{
                    selector: 'RadioItem, nzm-radio-item',
                    template: "<ListItem [className]=\"'am-radio-item ' + (disabled ? 'am-radio-item-disabled' : '')\"\n          [extra]=\"radio\"\n          [disabled]=\"disabled\"\n          (onClick)=\"onRadioItemClick($event)\"\n>\n  <ng-content></ng-content>\n</ListItem>\n<ng-template #radio>\n  <label Radio\n         [name]=\"name\"\n         [value]=\"value\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n  ></label>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    RadioItem.ctorParameters = function () { return []; };
    RadioItem.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        onClick: [{ type: Output }],
        onChange: [{ type: Output }]
    };
    return RadioItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RadioModule = /** @class */ (function () {
    function RadioModule() {
    }
    RadioModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, ListModule],
                    declarations: [Radio, RadioItem],
                    exports: [Radio, RadioItem]
                },] }
    ];
    return RadioModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ProgressComponent = /** @class */ (function () {
    function ProgressComponent() {
        this.prefixCls = 'am-progress';
        this._percent = 0;
        this._exceedance = false;
        this.unfilled = true;
        this.position = 'fixed';
        this.barStyle = {};
        this.max = 100;
        this.outer = true;
    }
    Object.defineProperty(ProgressComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = value;
            if (value > 100) {
                this._exceedance = true;
            }
            else {
                this._exceedance = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.percent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "fixOuter", {
        get: /**
         * @return {?}
         */
        function () {
            return 'fixed' === this.position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "hideOuter", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.unfilled && !this._exceedance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "exceedance", {
        get: /**
         * @return {?}
         */
        function () {
            return this._exceedance;
        },
        enumerable: true,
        configurable: true
    });
    ProgressComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Progress, nzm-progress',
                    template: "<div class=\"{{prefixCls}}-bar\" [ngStyle]=\"barStyle\" [style.width.%]=\"percent\"></div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ProgressComponent.ctorParameters = function () { return []; };
    ProgressComponent.propDecorators = {
        unfilled: [{ type: Input }],
        position: [{ type: Input }],
        barStyle: [{ type: Input }],
        percent: [{ type: Input }],
        max: [{ type: HostBinding, args: ['attr.max',] }],
        value: [{ type: HostBinding, args: ['attr.value',] }],
        outer: [{ type: HostBinding, args: ['class.am-progress-outer',] }],
        fixOuter: [{ type: HostBinding, args: ['class.am-progress-fixed-outer',] }],
        hideOuter: [{ type: HostBinding, args: ['class.am-progress-hide-outer',] }],
        exceedance: [{ type: HostBinding, args: ['class.am-progress-exceedance',] }]
    };
    return ProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ProgressModule = /** @class */ (function () {
    function ProgressModule() {
    }
    ProgressModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [ProgressComponent],
                    exports: [ProgressComponent]
                },] }
    ];
    return ProgressModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AccordionService = /** @class */ (function () {
    function AccordionService() {
        this.accordion = false;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    AccordionService.prototype.getComponent = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        this.accordion = component.accordion;
        this.component = component;
    };
    AccordionService.decorators = [
        { type: Injectable }
    ];
    return AccordionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AccordionGroupComponent = /** @class */ (function () {
    function AccordionGroupComponent(_accordionService, _cdr) {
        this._accordionService = _accordionService;
        this._cdr = _cdr;
        this.isShowChild = true;
        this.isOpened = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onChange = new EventEmitter();
        this._amItem = true;
        this._isActive = this.isOpened;
        this._addon = true;
    }
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.checkAndToggle = /**
     * @return {?}
     */
    function () {
        this.toggle();
    };
    Object.defineProperty(AccordionGroupComponent.prototype, "slide", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isOpened ? 'down' : 'up';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.isShowChild = true;
        /** @type {?} */
        var isOpenedBeforeWeChange = this.isOpened;
        if (this._accordionService.accordion) {
            this._accordionService.component.closeAll();
        }
        this.isOpened = !isOpenedBeforeWeChange;
        if (this.isOpened) {
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
        this.onChange.emit(this.isOpened);
    };
    /**
     * @return {?}
     */
    AccordionGroupComponent.prototype.openOnInitialization = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.isOpened = true;
            _this._cdr.detectChanges();
        }, 0);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AccordionGroupComponent.prototype.slideAnimationDoen = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.fromState === 'down' && event.toState === 'up') {
            this.isShowChild = false;
        }
    };
    AccordionGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'AccordionPanel',
                    template: "<div role=\"tab\"\n     class=\"am-accordion-header\"\n     data-scale=\"true\"\n     [attr.aria-expanded]=\"isOpened\"\n     (click)=\"checkAndToggle()\"\n>\n  <i class=\"arrow\"></i>\n  {{header}}\n</div>\n<div role=\"tabpanel\"\n     class=\"am-accordion-content\"\n     [ngClass]=\"{'am-accordion-content-active':isOpened}\"\n     [@slide]=\"slide\"\n     (@slide.done)=\"slideAnimationDoen($event)\" \n>\n  <div *ngIf=\"isShowChild\" class=\"am-accordion-content-box\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('slide', [
                            state('up', style({ height: 0 })),
                            state('down', style({ height: '*' })),
                            transition('down => up', [animate(200, style({ height: 0 }))]),
                            transition('up => down', [
                                animate(200, style({
                                    height: '*'
                                }))
                            ])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: AccordionService },
        { type: ChangeDetectorRef }
    ]; };
    AccordionGroupComponent.propDecorators = {
        key: [{ type: Input }],
        header: [{ type: Input }],
        isOpened: [{ type: Input }],
        disabled: [{ type: Input }],
        onOpen: [{ type: Output }],
        onClose: [{ type: Output }],
        onChange: [{ type: Output }],
        _amItem: [{ type: HostBinding, args: ['class.am-accordion-item',] }],
        _isActive: [{ type: HostBinding, args: ['class.am-accordion-item-active',] }],
        _addon: [{ type: HostBinding, args: ['class.addon',] }]
    };
    return AccordionGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(_accordionService) {
        this._accordionService = _accordionService;
        this.expandAll = false;
        this.openAnimation = {};
        this.accordion = false;
        this.onChange = new EventEmitter();
        this.amAccordion = true;
        this._accordionService.getComponent(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AccordionComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var result = [];
        this.groups.toArray().forEach(function (group) {
            if (group.isOpened) {
                if (_this.accordion) {
                    result = group.key;
                }
                else {
                    result.push(group.key);
                }
            }
        });
        this.onChange.emit(result);
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.closeAll = /**
     * @return {?}
     */
    function () {
        this.groups.toArray().forEach(function (group) {
            group.isOpened = false;
        });
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expandAll && this.groups && this.groups.length > 0) {
            this._oldGroups = this.groups.toArray();
            this._oldGroups.forEach(function (group, index) {
                group.openOnInitialization();
            });
            this._subscription = this.groups.changes.subscribe(function (change) {
                /** @type {?} */
                var newGroups = _this.groups.toArray().filter(function (group) {
                    return _this._oldGroups.indexOf(group) === -1;
                });
                newGroups.forEach(function (group) {
                    group.openOnInitialization();
                });
                _this._oldGroups = _this.groups.toArray();
            });
        }
        /** @type {?} */
        var currentActiveKey = [];
        if (this.activeKey !== undefined && this.activeKey.length > 0 && !this.accordion && this.groups && this.groups.length > 0) {
            currentActiveKey = this.toArray(this.activeKey);
            this.groups.forEach(function (group, index) {
                currentActiveKey.forEach(function (key) {
                    if (index === parseInt(key, 0)) {
                        setTimeout(function () {
                            group.isOpened = true;
                        }, 0);
                    }
                });
            });
        }
        else if (this.defaultActiveKey !== undefined && !this.expandAll && !this.accordion && this.groups && this.groups.length > 0) {
            this.groups.forEach(function (group, index) {
                if (index === parseInt(_this.defaultActiveKey, 0)) {
                    setTimeout(function () {
                        group.isOpened = true;
                    }, 0);
                }
            });
        }
    };
    /**
     * @param {?} activeKey
     * @return {?}
     */
    AccordionComponent.prototype.toArray = /**
     * @param {?} activeKey
     * @return {?}
     */
    function (activeKey) {
        /** @type {?} */
        var currentActiveKey = activeKey;
        if (!Array.isArray(currentActiveKey)) {
            currentActiveKey = currentActiveKey !== undefined && currentActiveKey !== '' ? [currentActiveKey] : [];
        }
        return currentActiveKey;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AccordionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["accordion"]) {
            this._accordionService.getComponent(this);
        }
        if (changes["expandAll"] || changes["accordion"]) {
            this.init();
        }
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Accordion, nzm-accordion',
                    template: "<ng-content></ng-content>",
                    providers: [AccordionService]
                }] }
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return [
        { type: AccordionService }
    ]; };
    AccordionComponent.propDecorators = {
        groups: [{ type: ContentChildren, args: [forwardRef(function () { return AccordionGroupComponent; }),] }],
        expandAll: [{ type: Input }],
        activeKey: [{ type: Input }],
        defaultActiveKey: [{ type: Input }],
        openAnimation: [{ type: Input }],
        accordion: [{ type: Input }],
        onChange: [{ type: Output }],
        amAccordion: [{ type: HostBinding, args: ['class.am-accordion',] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return AccordionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
    AccordionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, WhiteSpaceModule],
                    declarations: [AccordionComponent, AccordionGroupComponent],
                    exports: [AccordionComponent, AccordionGroupComponent]
                },] }
    ];
    return AccordionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NoticeBarComponent = /** @class */ (function () {
    function NoticeBarComponent(_iconHandler) {
        this._iconHandler = _iconHandler;
        this.isShow = false;
        this.isStopScroll = false;
        this.marqueeScroll = 'scrolling';
        this.style = {};
        this._timer = null;
        this.marqueeProps = { loop: true, leading: 500, trailing: 8000, fps: 200, style: {} };
        this.noticeBarcontent = '';
        this.onClick = new EventEmitter();
        this._iconHandler.load();
    }
    Object.defineProperty(NoticeBarComponent.prototype, "stopScrolling", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isStopScroll = value;
            if (value) {
                this.marqueeScroll = 'scrolling-stop';
                clearTimeout(this._timer);
                this._timer = setTimeout(function () {
                    this.marqueeScroll = 'scrolling';
                }, 1000);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeBarComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._mode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeBarComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeBarComponent.prototype, "action", {
        get: /**
         * @return {?}
         */
        function () {
            return this._action;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._action = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.click = /**
     * @return {?}
     */
    function () {
        this.onClick.emit(this._mode);
        if (this._mode === 'closable') {
            this.isShow = false;
        }
    };
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.dataProcess = /**
     * @return {?}
     */
    function () {
        this.isShow = true;
        this.style = {
            width: '200%'
        };
        if (window.innerWidth < this._width) {
            /** @type {?} */
            var count = this.marqueeProps.loop ? 'infinite' : 1;
            this.style = {
                width: this._width * 2 + 'px',
                'animation-delay': this.marqueeProps.leading + "ms",
                'animation-duration': (1 / this.marqueeProps.fps) * 1000 + "s",
                'animation-iteration-count': "" + count
            };
            scroll.call(this);
        }
        else {
            this.marqueeScroll = 'scrolling-stop';
        }
    };
    /**
     * @return {?}
     */
    NoticeBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        document.addEventListener('touchstart', function () {
            _this.marqueeScroll = 'scrolling-stop';
        });
        document.addEventListener('touchend', function () {
            _this.marqueeScroll = 'scrolling';
        });
        this._width = getRectWidth(this.noticeBarcontent);
        this.dataProcess();
    };
    NoticeBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'NoticeBar, nzm-notice-bar',
                    template: "<div role=\"alert\" *ngIf=\"isShow\" class=\"am-notice-bar\" (click)=\"click()\">\n  <div *ngIf=\"icon !== null\" class=\"am-notice-bar-icon\">\n    <ng-template [ngTemplateOutlet]=\"icon || voice\"></ng-template>\n  </div>\n  <div class=\"am-notice-bar-content\">\n    <div class=\"marquee\">\n      <div [ngClass]=\"marqueeScroll\" [ngStyle]=\"style\">\n        <span>{{noticeBarcontent}}</span>\n        <span>{{noticeBarcontent}}</span>\n      </div>\n    </div>\n  </div>\n  <div role=\"button\" *ngIf=\"mode && action !== null\" class=\"am-notice-bar-operation\">\n    <ng-template *ngIf=\"mode === 'closable'\" [ngTemplateOutlet]=\"action || cross\"></ng-template>\n    <ng-template *ngIf=\"mode === 'link'\" [ngTemplateOutlet]=\"action || right\"></ng-template>\n  </div>\n</div>\n\n<ng-template #voice>\n  <Icon [type]=\"'voice'\" [size]=\"'xxs'\"></Icon>\n</ng-template>\n<ng-template #cross>\n  <Icon [type]=\"'cross'\" [size]=\"'md'\"></Icon>\n</ng-template>\n<ng-template #right>\n  <Icon [type]=\"'right'\" [size]=\"'md'\"></Icon>\n</ng-template>\n",
                    providers: [IconHandler]
                }] }
    ];
    /** @nocollapse */
    NoticeBarComponent.ctorParameters = function () { return [
        { type: IconHandler }
    ]; };
    NoticeBarComponent.propDecorators = {
        stopScrolling: [{ type: Input }],
        mode: [{ type: Input }],
        icon: [{ type: Input }],
        action: [{ type: Input }],
        marqueeProps: [{ type: Input }],
        noticeBarcontent: [{ type: Input }],
        onClick: [{ type: Output }]
    };
    return NoticeBarComponent;
}());
/**
 * @return {?}
 */
function scroll() {
    /** @type {?} */
    var styleDom = document.getElementById('notice_bar_animation_cls');
    if (styleDom) {
        return;
    }
    styleDom = document.createElement('style');
    styleDom.setAttribute('id', 'notice_bar_animation_cls');
    styleDom.innerHTML = "@-webkit-keyframes noticebarmarquee{ 0% { left: 0px; } 100% { left: -" + this._width + "px; }}";
    document.body.appendChild(styleDom);
}
/**
 * @param {?} text
 * @return {?}
 */
function getRectWidth(text) {
    /** @type {?} */
    var _dom = document.createElement('div');
    _dom.innerHTML = text;
    _dom.style.position = 'absolute';
    _dom.style.left = '-9999';
    _dom.style.whiteSpace = 'nowrap';
    _dom.style.fontSize = '14px';
    document.body.appendChild(_dom);
    /** @type {?} */
    var _w = _dom.clientWidth + 20;
    document.body.removeChild(_dom);
    return _w;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NoticeBarModule = /** @class */ (function () {
    function NoticeBarModule() {
    }
    NoticeBarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [IconModule, CommonModule],
                    declarations: [NoticeBarComponent],
                    exports: [NoticeBarComponent],
                    providers: [],
                    entryComponents: []
                },] }
    ];
    return NoticeBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ToastComponent = /** @class */ (function () {
    function ToastComponent(_zone) {
        this._zone = _zone;
        this.prefixCls = 'am-toast';
        this.isContentString = true;
        this.transitionName = 'am-fade-enter am-fade-enter-active';
        this._iconType = '';
        this._content = '';
        this.mask = true;
        this.amToast = true;
    }
    Object.defineProperty(ToastComponent.prototype, "content", {
        get: /**
         * @return {?}
         */
        function () {
            return this._content;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value instanceof TemplateRef) {
                this.isContentString = false;
            }
            else {
                this.isContentString = true;
            }
            this._zone.run(function () {
                _this._content = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastComponent.prototype, "iconType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._zone.run(function () {
                _this._iconType = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastComponent.prototype, "amToastMask", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastComponent.prototype, "amToastNoMask", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.mask;
        },
        enumerable: true,
        configurable: true
    });
    ToastComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Toast',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div class=\"{{prefixCls}}-notice {{prefixCls}}-notice-closable {{transitionName}}\">\n  <div class=\"{{prefixCls}}-notice-content\">\n    <div role=\"alert\"\n         *ngIf=\"iconType\"\n         class=\"{{prefixCls}}-text {{prefixCls}}-text-icon\"\n         aria-live=\"assertive\"\n    >\n      <Icon [type]=\"iconType\" [size]=\"'lg'\"></Icon>\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n    </div>\n    <div *ngIf=\"!iconType\" class=\"{{prefixCls}}-text\" role=\"alert\" aria-live=\"assertive\">\n      <div *ngIf=\"isContentString\" class=\"{{prefixCls}}-text-info\">{{content}}</div>\n      <ng-template *ngIf=\"!isContentString\" [ngTemplateOutlet]=\"content\"></ng-template>\n    </div>\n  </div>\n  <a class=\"{{prefixCls}}-notice-close\">\n    <span class=\"{{prefixCls}}-notice-close-x\"></span>\n  </a>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ToastComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    ToastComponent.propDecorators = {
        mask: [{ type: Input }],
        content: [{ type: Input }],
        iconType: [{ type: Input }],
        amToast: [{ type: HostBinding, args: ['class.am-toast',] }],
        amToastMask: [{ type: HostBinding, args: ['class.am-toast-mask',] }],
        amToastNoMask: [{ type: HostBinding, args: ['class.am-toast-nomask',] }]
    };
    return ToastComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ToastModule = /** @class */ (function () {
    function ToastModule() {
    }
    ToastModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule, WingBlankModule],
                    exports: [ToastComponent],
                    declarations: [ToastComponent]
                },] }
    ];
    return ToastModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BaseOptions = /** @class */ (function () {
    function BaseOptions() {
        this.visible = false;
        this.focus = true;
        this.closable = false;
        this.maskClosable = true;
        this.transparent = false;
        this.popup = false;
        this.transitionName = 'am-zoom';
        this.maskTransitionName = 'am-fade';
    }
    return BaseOptions;
}());
var ModalOptions = /** @class */ (function (_super) {
    __extends(ModalOptions, _super);
    function ModalOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModalOptions.decorators = [
        { type: Injectable }
    ];
    return ModalOptions;
}(BaseOptions));
var AlertOptions = /** @class */ (function (_super) {
    __extends(AlertOptions, _super);
    function AlertOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlertOptions.decorators = [
        { type: Injectable }
    ];
    return AlertOptions;
}(BaseOptions));
var PromptOptions = /** @class */ (function (_super) {
    __extends(PromptOptions, _super);
    function PromptOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PromptOptions.decorators = [
        { type: Injectable }
    ];
    return PromptOptions;
}(BaseOptions));
var OperationOptions = /** @class */ (function (_super) {
    __extends(OperationOptions, _super);
    function OperationOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OperationOptions.decorators = [
        { type: Injectable }
    ];
    return OperationOptions;
}(BaseOptions));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ModalComponent = /** @class */ (function () {
    function ModalComponent(_option) {
        this._option = _option;
        this.defaultProps = {
            visible: false,
            prefixCls: 'am-modal',
            transparent: false,
            popup: false,
            animationType: 'slide-down',
            animated: true,
            style: {},
            footer: [],
            closable: false,
            maskClosable: false,
            operation: false,
            platform: 'ios',
            className: '',
            wrapClassName: '',
            message: '',
            actions: [],
            callbackOrActions: [],
            type: '',
            defaultValue: '',
            placeholders: []
        };
        this.value = '';
        this.passwordValue = '';
        this.autoFocus = { focus: true, date: new Date() };
        this.transitionName = '';
        this.maskTransitionName = '';
        this.isTitleString = true;
        this.isMessageString = true;
        this.wrapCls = {};
        this.cls = {};
        this.btnGroupClass = {};
        this.data = {};
        this._title = '';
        this._message = '';
        this._focus = true;
        this.onClose = new EventEmitter();
    }
    Object.defineProperty(ModalComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isTitleString = false;
            }
            else {
                this.isTitleString = true;
            }
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "visible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                this.leaveAnimation();
            }
            else {
                this.defaultProps.visible = value;
                if (this.defaultProps.animated) {
                    if (this.defaultProps.transparent) {
                        this.transitionName = this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
                    }
                    else {
                        this.transitionName = this.maskTransitionName = 'am-slide-up-enter am-slide-up-enter-active';
                    }
                    if (this.defaultProps.popup) {
                        this.transitionName =
                            this.defaultProps.animationType === 'slide-up'
                                ? 'am-slide-up-enter am-slide-up-enter-active'
                                : 'am-slide-down-enter am-slide-down-enter-active';
                        this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
                    }
                }
                this.setClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "closable", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.closable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "maskClosable", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.maskClosable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "popup", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.popup = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "animationType", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.animationType = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "transparent", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.transparent = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "footer", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.footer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "platform", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.platform = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "message", {
        get: /**
         * @return {?}
         */
        function () {
            return this._message;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isMessageString = false;
            }
            else {
                this.isMessageString = true;
            }
            this._message = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "className", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.className = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "wrapClassName", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.wrapClassName = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "actions", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.footer = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.defaultValue = value !== undefined ? value : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "placeholders", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.placeholders = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "operation", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.operation = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "focus", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._focus = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ModalComponent.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a, _b, _c;
        this.wrapCls = (_a = {},
            _a[this.defaultProps.wrapClassName] = true,
            _a[this.defaultProps.prefixCls + "-wrap-popup"] = this.defaultProps.popup,
            _a);
        this.cls = (_b = {},
            _b[this.defaultProps.className] = true,
            _b[this.defaultProps.prefixCls + "-transparent"] = this.defaultProps.transparent,
            _b[this.defaultProps.prefixCls + "-popup"] = this.defaultProps.popup,
            _b[this.defaultProps.prefixCls + "-popup-" + this.defaultProps.animationType] = this.defaultProps.popup && this.defaultProps.animationType,
            _b[this.defaultProps.prefixCls + "-android"] = this.defaultProps.platform === 'android',
            _b);
        this.btnGroupClass = (_c = {},
            _c[this.defaultProps.prefixCls + "-button-group-" + (this.defaultProps.footer.length === 2 && !this.defaultProps.operation ? 'h' : 'v')] = true,
            _c[this.defaultProps.prefixCls + "-button-group-" + (this.defaultProps.operation ? 'operation' : 'normal')] = true,
            _c);
    };
    /**
     * @param {?} type
     * @param {?} value
     * @return {?}
     */
    ModalComponent.prototype.inputChange = /**
     * @param {?} type
     * @param {?} value
     * @return {?}
     */
    function (type, value) {
        this.data[type] = value;
    };
    /**
     * @return {?}
     */
    ModalComponent.prototype.leaveAnimation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.defaultProps.animated) {
            if (this.defaultProps.transparent) {
                this.transitionName = this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
            }
            else {
                this.transitionName = this.maskTransitionName = 'am-slide-up-leave am-slide-up-leave-active';
            }
            if (this.defaultProps.popup) {
                this.transitionName =
                    this.defaultProps.animationType === 'slide-up'
                        ? 'am-slide-up-leave am-slide-up-leave-active'
                        : 'am-slide-down-leave am-slide-down-leave-active';
                this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
            }
        }
        setTimeout(function () {
            _this.defaultProps.visible = false;
        }, 200);
    };
    /**
     * @return {?}
     */
    ModalComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        if ((!this.defaultProps.closable || !this.defaultProps.maskClosable) && !this.defaultProps.popup) {
            return;
        }
        if (this._option.close) {
            this._option.close();
        }
        else {
            this.leaveAnimation();
            this.onClose.emit();
        }
    };
    /**
     * @return {?}
     */
    ModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    ModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Modal',
                    template: "<div *ngIf=\"defaultProps.visible\">\n  <div class=\"{{defaultProps.prefixCls}}-mask {{maskTransitionName}}\"></div>\n  <div role=\"dialog\"\n       class=\"{{defaultProps.prefixCls}}-wrap {{transitionName}}\"\n       [ngClass]=\"wrapCls\"\n       (click)=\"close()\"\n  >\n    <div role=\"document\"\n         class=\"{{defaultProps.prefixCls}}\"\n         [ngClass]=\"cls\"\n    >\n      <div class=\"{{defaultProps.prefixCls}}-content\">\n        <div *ngIf=\"defaultProps.closable\"\n             class=\"{{defaultProps.prefixCls}}-close\"\n             (click)=\"close()\"\n      >\n          <span class=\"{{defaultProps.prefixCls}}-close-x\"></span>\n        </div>\n        <div class=\"{{defaultProps.prefixCls}}-header\">\n          <div *ngIf=\"isTitleString\" class=\"{{defaultProps.prefixCls}}-title\">{{title}}</div>\n          <ng-template *ngIf=\"!isTitleString\" [ngTemplateOutlet]=\"title\"></ng-template>\n        </div>\n        <div class=\"{{defaultProps.prefixCls}}-body\">\n          <ng-content></ng-content>\n          <div *ngIf=\"isMessageString\" class=\"{{defaultProps.prefixCls}}-alert-content\">{{message}}</div>\n          <ng-template *ngIf=\"!isMessageString\" [ngTemplateOutlet]=\"message\"></ng-template>\n          <ng-template *ngIf=\"defaultProps.type === 'default'\" [ngTemplateOutlet]=\"promptDefault\"></ng-template>\n          <ng-template *ngIf=\"defaultProps.type === 'secure-text'\" [ngTemplateOutlet]=\"promptSecure\"></ng-template>\n          <ng-template *ngIf=\"defaultProps.type === 'login-password'\" [ngTemplateOutlet]=\"promptPassword\"></ng-template>\n        </div>\n        <div class=\"{{defaultProps.prefixCls}}-footer\">\n          <div [ngClass]=\"btnGroupClass\" role=\"group\">\n            <div Button\n                 role=\"button\"\n                 *ngFor=\"let button of defaultProps.footer\"\n                 [className]=\"'am-modal-button'\"\n                 (onClick)=\"button.onPress()\"\n            >\n              {{button.text}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #promptPassword>\n  <div class=\"{{defaultProps.prefixCls}}-input-container\">\n    <div class=\"{{defaultProps.prefixCls}}-input\">\n        <input \n          #inputElement \n          autofocus\n          [type]=\"'text'\" \n          [defaultValue]=\"defaultProps.defaultValue || ''\" \n          [placeholder]=\"defaultProps.placeholders[0] || ''\"\n          [(ngModel)]=\"value\" \n          (ngModelChange)=\"inputChange('text', $event)\" \n        >\n    </div>\n    <div className=\"{{defaultProps.prefixCls}}-input\">\n        <input \n          #inputElement \n          [type]=\"'password'\" \n          [defaultValue]=\"defaultProps.defaultValue || ''\" \n          [placeholder]=\"defaultProps.placeholders[0] || ''\"\n          [(ngModel)]=\"passwordValue\" \n          (ngModelChange)=\"inputChange('password', $event)\" \n        >\n    </div>\n  </div>\n</ng-template>\n<ng-template #promptSecure>\n  <div className=\"{{defaultProps.prefixCls}}-input-container\">\n    <div className=\"{{defaultProps.prefixCls}}-input\">\n        <input \n          #inputElement \n          autofocus\n          [type]=\"'password'\" \n          [defaultValue]=\"defaultProps.defaultValue || ''\" \n          [placeholder]=\"defaultProps.placeholders[0] || ''\"\n          [(ngModel)]=\"passwordValue\" \n          (ngModelChange)=\"inputChange('password', $event)\" \n        >\n    </div>\n  </div>\n</ng-template>\n<ng-template #promptDefault>\n  <div className=\"{{defaultProps.prefixCls}}-input-container\">\n    <div className=\"{{defaultProps.prefixCls}}-input\">\n      <input \n        #inputElement \n        autofocus\n        [type]=\"'text'\" \n        [defaultValue]=\"defaultProps.defaultValue || ''\" \n        [placeholder]=\"defaultProps.placeholders[0] || ''\"\n        [(ngModel)]=\"value\" \n        (ngModelChange)=\"inputChange('text', $event)\" \n      >\n    </div>\n  </div>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [NgSwitch, NgSwitchCase, ModalOptions]
                }] }
    ];
    /** @nocollapse */
    ModalComponent.ctorParameters = function () { return [
        { type: ModalOptions }
    ]; };
    ModalComponent.propDecorators = {
        inputElementRef: [{ type: ViewChild, args: ['inputElement',] }],
        title: [{ type: Input }],
        visible: [{ type: Input }],
        closable: [{ type: Input }],
        maskClosable: [{ type: Input }],
        popup: [{ type: Input }],
        animationType: [{ type: Input }],
        transparent: [{ type: Input }],
        footer: [{ type: Input }],
        platform: [{ type: Input }],
        message: [{ type: Input }],
        className: [{ type: Input }],
        wrapClassName: [{ type: Input }],
        actions: [{ type: Input }],
        defaultValue: [{ type: Input }],
        type: [{ type: Input }],
        placeholders: [{ type: Input }],
        operation: [{ type: Input }],
        focus: [{ type: Input }],
        onClose: [{ type: Output }]
    };
    return ModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ModalModule = /** @class */ (function () {
    function ModalModule() {
    }
    ModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ListModule, WingBlankModule, WhiteSpaceModule, ButtonModule, InputItemModule, FormsModule, ReactiveFormsModule],
                    exports: [ModalComponent],
                    declarations: [ModalComponent],
                    providers: [NgSwitch, NgSwitchCase]
                },] }
    ];
    return ModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverOptions = /** @class */ (function () {
    function PopoverOptions() {
        this.showArrow = false;
        this.mask = false;
        this.placement = 'bottom';
        this.appendToBody = false;
        this.className = '';
        this.autoClose = true;
    }
    return PopoverOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverComponentOptions = /** @class */ (function (_super) {
    __extends(PopoverComponentOptions, _super);
    function PopoverComponentOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopoverComponentOptions.decorators = [
        { type: Injectable }
    ];
    return PopoverComponentOptions;
}(PopoverOptions));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverComponent = /** @class */ (function () {
    function PopoverComponent(options) {
        this.options = options;
        this.defaultProps = {
            prefixCls: 'am-popover'
        };
        this.maskCls = {};
        this.popoverCls = {};
    }
    /**
     * @return {?}
     */
    PopoverComponent.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        this.maskCls = (_a = {},
            _a[this.defaultProps.prefixCls + "-mask"] = this.options.mask,
            _a[this.defaultProps.prefixCls + "-mask-hidden"] = !this.options.mask,
            _a);
        this.popoverCls = (_b = {},
            _b["" + this.defaultProps.prefixCls] = true,
            _b[this.defaultProps.prefixCls + "-placement-" + this.options.placement] = true,
            _b[this.defaultProps.prefixCls + "-" + this.options.className] = true,
            _b);
    };
    /**
     * @return {?}
     */
    PopoverComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    PopoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.options.onAfterViewInit();
    };
    PopoverComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Popover',
                    template: "<ng-content></ng-content>\n<div [ngClass]=\"maskCls\" (click)=\"options.hidePopover()\"></div>\n<div [ngClass]=\"popoverCls\" style=\"color: currentcolor;\">\n  <div class=\"{{defaultProps.prefixCls}}-content\">\n    <div *ngIf=\"options.showArrow\" class=\"{{defaultProps.prefixCls}}-arrow\"></div>\n    <div class=\"{{defaultProps.prefixCls}}-inner\">\n      <div class=\"{{defaultProps.prefixCls}}-inner-wrapper\">\n        <ng-template [ngTemplateOutlet]=\"options.overlay\" [ngTemplateOutletContext]=\"{options: options}\">\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PopoverComponent.ctorParameters = function () { return [
        { type: PopoverComponentOptions }
    ]; };
    return PopoverComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @return {?}
 */
function getAllStyles(element) { return window.getComputedStyle(element); }
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
function getStyle(element, prop) { return getAllStyles(element)[prop]; }
/**
 * @param {?} element
 * @return {?}
 */
function isStaticPositioned(element) {
    return (getStyle(element, 'position') || 'static') === 'static';
}
/**
 * @param {?} element
 * @return {?}
 */
function getOffsetParent(element) {
    /** @type {?} */
    var offsetParentEl = element.offsetParent || document.documentElement;
    while (offsetParentEl && offsetParentEl !== document.documentElement && isStaticPositioned(offsetParentEl)) {
        offsetParentEl = offsetParentEl.offsetParent;
    }
    return offsetParentEl || document.documentElement;
}
/**
 * @param {?} element
 * @param {?} round
 * @return {?}
 */
function getOffset(element, round) {
    if (round === void 0) {
        round = true;
    }
    /** @type {?} */
    var elBcr = element.getBoundingClientRect();
    /** @type {?} */
    var viewportOffset = {
        top: window.pageYOffset - document.documentElement.clientTop,
        left: window.pageXOffset - document.documentElement.clientLeft
    };
    /** @type {?} */
    var elOffset = {
        height: elBcr.height || element.offsetHeight,
        width: elBcr.width || element.offsetWidth,
        top: elBcr.top + viewportOffset.top,
        bottom: elBcr.bottom + viewportOffset.top,
        left: elBcr.left + viewportOffset.left,
        right: elBcr.right + viewportOffset.left
    };
    if (round) {
        elOffset.height = Math.round(elOffset.height);
        elOffset.width = Math.round(elOffset.width);
        elOffset.top = Math.round(elOffset.top);
        elOffset.bottom = Math.round(elOffset.bottom);
        elOffset.left = Math.round(elOffset.left);
        elOffset.right = Math.round(elOffset.right);
    }
    return elOffset;
}
/**
 * @param {?} element
 * @param {?} round
 * @return {?}
 */
function getPosition(element, round) {
    if (round === void 0) {
        round = true;
    }
    /** @type {?} */
    var elPosition;
    /** @type {?} */
    var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
    if (getStyle(element, 'position') === 'fixed') {
        elPosition = element.getBoundingClientRect();
    }
    else {
        /** @type {?} */
        var offsetParentEl = getOffsetParent(element);
        elPosition = getOffset(element, false);
        if (offsetParentEl !== document.documentElement) {
            parentOffset = getOffset(offsetParentEl, false);
        }
        parentOffset.top += offsetParentEl.clientTop;
        parentOffset.left += offsetParentEl.clientLeft;
    }
    elPosition.top -= parentOffset.top;
    elPosition.bottom -= parentOffset.top;
    elPosition.left -= parentOffset.left;
    elPosition.right -= parentOffset.left;
    if (round) {
        elPosition.top = Math.round(elPosition.top);
        elPosition.bottom = Math.round(elPosition.bottom);
        elPosition.left = Math.round(elPosition.left);
        elPosition.right = Math.round(elPosition.right);
    }
    return elPosition;
}
/**
 * @param {?} hostElement
 * @param {?} targetElement
 * @param {?} placement
 * @param {?} appendToBody
 * @return {?}
 */
function getPositionElements(hostElement, targetElement, placement, appendToBody) {
    /** @type {?} */
    var hostElPosition = appendToBody ? getOffset(hostElement, false) : getPosition(hostElement, false);
    /** @type {?} */
    var targetElStyles = getAllStyles(targetElement);
    /** @type {?} */
    var targetElBCR = targetElement.getBoundingClientRect();
    /** @type {?} */
    var placementPrimary = placement.split('-')[0] || 'top';
    /** @type {?} */
    var placementSecondary = placement.split('-')[1] || 'center';
    /** @type {?} */
    var targetElPosition = {
        'height': targetElBCR.height || targetElement.offsetHeight,
        'width': targetElBCR.width || targetElement.offsetWidth,
        'top': 0,
        'bottom': targetElBCR.height || targetElement.offsetHeight,
        'left': 0,
        'right': targetElBCR.width || targetElement.offsetWidth
    };
    switch (placementPrimary) {
        case 'top':
            targetElPosition.top =
                hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));
            break;
        case 'bottom':
            targetElPosition.top = hostElPosition.top + hostElPosition.height;
            break;
        case 'left':
            targetElPosition.left =
                hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));
            break;
        case 'right':
            targetElPosition.left = hostElPosition.left + hostElPosition.width;
            break;
    }
    switch (placementSecondary) {
        case 'top':
            targetElPosition.top = hostElPosition.top;
            break;
        case 'bottom':
            targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;
            break;
        case 'left':
            targetElPosition.left = hostElPosition.left;
            break;
        case 'right':
            targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;
            break;
        case 'center':
            if (placementPrimary === 'top' || placementPrimary === 'bottom') {
                targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;
            }
            else {
                targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;
            }
            break;
    }
    targetElPosition.top = Math.round(targetElPosition.top);
    targetElPosition.bottom = Math.round(targetElPosition.bottom);
    targetElPosition.left = Math.round(targetElPosition.left);
    targetElPosition.right = Math.round(targetElPosition.right);
    return targetElPosition;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onSelect = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PopoverDirective.prototype.togglePopover = /**
     * @return {?}
     */
    function () {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    };
    /**
     * @param {?} placement
     * @return {?}
     */
    PopoverDirective.prototype.positionMap = /**
     * @param {?} placement
     * @return {?}
     */
    function (placement) {
        switch (placement) {
            case 'topLeft':
                return 'top-left';
            case 'topRight':
                return 'top-right';
            case 'bottomLeft':
                return 'bottom-left';
            case 'bottomRight':
                return 'bottom-right';
            case 'leftTop':
                return 'left-top';
            case 'leftBottom':
                return 'left-bottom';
            case 'rightTop':
                return 'right-top';
            case 'rightBottom':
                return 'right-bottom';
            case 'fullScreen':
            case 'landScape':
                return 'bottom';
            default:
                return placement;
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopoverDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes["visible"] && changes["visible"].currentValue) {
            setTimeout(function () {
                _this.showPopover();
            }, 0);
        }
        else {
            setTimeout(function () {
                _this.hidePopover();
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hidePopover();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PopoverDirective.prototype.onDocumentClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.popover &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target)) {
            this.hidePopover();
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.showPopover = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.popover) {
            setTimeout(function () {
                _this._eventListeners = [
                    _this._renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('window', 'resize', function () { return _this.positionPopover(); })
                ];
            });
            /** @type {?} */
            var options_1 = new PopoverComponentOptions();
            options_1.placement = this.placement;
            Object.assign(options_1, this._defaultOptions, {
                hidePopover: function (event) {
                    _this.hidePopover();
                },
                onAfterViewInit: function () {
                    _this.positionPopover();
                    /** @type {?} */
                    var children = document.getElementsByClassName('am-popover-inner-wrapper')[0].children;
                    if (children.length > 0) {
                        var _loop_1 = function (i) {
                            children[i].id = "" + i;
                            children[i].addEventListener('click', function () {
                                if (_this.onSelect) {
                                    _this.onSelect.emit(children[i]);
                                    if (options_1.autoClose) {
                                        _this.hidePopover();
                                    }
                                }
                            }, false);
                        };
                        // 首先我们检查它是否包含子节点
                        for (var i = 0; i < children.length; i++) {
                            _loop_1(i);
                        }
                    }
                }
            });
            /** @type {?} */
            var optionalParams = [
                'mask',
                'showArrow',
                'placement',
                'appendToBody',
                'overlay',
                'className',
                'autoClose'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    (/** @type {?} */ (options_1))[param] = _this[param];
                }
            });
            /** @type {?} */
            var componentFactory = this._cfr.resolveComponentFactory(PopoverComponent);
            /** @type {?} */
            var childInjector = Injector.create([
                {
                    provide: PopoverComponentOptions,
                    useValue: options_1
                }
            ], this._viewContainerRef.parentInjector);
            this.popover = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.positionPopover = /**
     * @return {?}
     */
    function () {
        if (this.popover) {
            /** @type {?} */
            var popoverElement = this.popover.location.nativeElement.children[1];
            /** @type {?} */
            var popoverPosition = getPositionElements(this._elm.nativeElement, popoverElement, this.positionMap(this.placement) || this._defaultOptions.placement, this.appendToBody || this._defaultOptions.appendToBody);
            if (this.placement === 'landScape') {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else if (this.placement === 'fullScreen') {
                this._renderer.setStyle(popoverElement, 'top', 0 + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', popoverPosition.left + "px");
            }
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.hidePopover = /**
     * @return {?}
     */
    function () {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    PopoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[Popover], [nzm-popover]',
                    providers: [PopoverOptions]
                },] }
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: PopoverOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 }
    ]; };
    PopoverDirective.propDecorators = {
        mask: [{ type: Input }],
        showArrow: [{ type: Input }],
        visible: [{ type: Input }],
        placement: [{ type: Input }],
        overlay: [{ type: Input }],
        onVisibleChange: [{ type: Output }],
        onSelect: [{ type: Output }],
        appendToBody: [{ type: Input }],
        className: [{ type: Input }],
        autoClose: [{ type: Input }],
        togglePopover: [{ type: HostListener, args: ['click',] }]
    };
    return PopoverDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverModule = /** @class */ (function () {
    function PopoverModule() {
    }
    PopoverModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [PopoverDirective, PopoverComponent],
                    imports: [CommonModule],
                    exports: [PopoverDirective, PopoverComponent],
                    entryComponents: [PopoverComponent],
                },] }
    ];
    return PopoverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NavBarComponent = /** @class */ (function () {
    function NavBarComponent() {
        this.defaultProps = {
            prefixCls: 'am-navbar',
            mode: 'dark',
            onLeftClick: function () { }
        };
        this.navbarCls = {};
        this.isIconString = true;
        this.isLeftContentString = true;
        this.isRightContentString = true;
        this.onLeftClick = new EventEmitter();
        this._amNavbar = true;
    }
    Object.defineProperty(NavBarComponent.prototype, "mode", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.mode = value;
            this._amNavbarLight = this.defaultProps.mode === 'light';
            this._amNavbardark = this.defaultProps.mode === 'dark';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isIconString = false;
            }
            else {
                this.isIconString = true;
            }
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "leftContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._leftContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isLeftContentString = false;
            }
            else {
                this.isLeftContentString = true;
            }
            this._leftContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "rightContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rightContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isRightContentString = false;
            }
            else {
                this.isRightContentString = true;
            }
            this._rightContent = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NavBarComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLeftClick.emit(event);
    };
    NavBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Navbar, nzm-nav-bar',
                    template: "<div role=\"button\" class=\"{{defaultProps.prefixCls}}-left\" (click)=\"click($event)\">\n  <ng-template *ngIf=\"!isLeftContentString\" [ngTemplateOutlet]=\"leftContent\"></ng-template>\n  <span *ngIf=\"icon\" class=\"{{defaultProps.prefixCls}}-left-icon\" aria-hidden=\"true\">\n    <Icon *ngIf=\"isIconString\" [type]=\"icon\"></Icon>\n    <ng-template *ngIf=\"!isIconString\" [ngTemplateOutlet]=\"icon\"></ng-template>\n  </span>\n  {{isLeftContentString ? leftContent: null}}\n</div>\n<div class=\"{{defaultProps.prefixCls}}-title\">\n  <ng-content></ng-content>\n</div>\n<div class=\"{{defaultProps.prefixCls}}-right\">\n  {{isRightContentString ? rightContent: null}}\n  <ng-template *ngIf=\"!isRightContentString\" [ngTemplateOutlet]=\"rightContent\"></ng-template>\n</div>"
                }] }
    ];
    /** @nocollapse */
    NavBarComponent.ctorParameters = function () { return []; };
    NavBarComponent.propDecorators = {
        mode: [{ type: Input }],
        icon: [{ type: Input }],
        leftContent: [{ type: Input }],
        rightContent: [{ type: Input }],
        onLeftClick: [{ type: Output }],
        _amNavbar: [{ type: HostBinding, args: ['class.am-navbar',] }],
        _amNavbarLight: [{ type: HostBinding, args: ['class.am-navbar-light',] }],
        _amNavbardark: [{ type: HostBinding, args: ['class.am-navbar-dark',] }]
    };
    return NavBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NavBarModule = /** @class */ (function () {
    function NavBarModule() {
    }
    NavBarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule],
                    exports: [NavBarComponent],
                    declarations: [NavBarComponent]
                },] }
    ];
    return NavBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// 同步自 'rmc-calendar/lib/locale/en_US';
var Calendar = {
    title: 'Calendar',
    today: 'Today',
    month: 'Month',
    year: 'Year',
    am: 'AM',
    pm: 'PM',
    dateTimeFormat: 'MM/dd/yyyy w hh:mm',
    dateFormat: 'yyyy/MM/dd w',
    noChoose: 'No Choose',
    week: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fir', 'Sat'],
    clear: 'Clear',
    selectTime: 'Select Time',
    selectStartTime: 'Select Start Time',
    selectEndTime: 'Select End Time',
    start: 'Start',
    end: 'End',
    begin: 'Start',
    over: 'End',
    begin_over: 'S/E',
    confirm: 'Confirm',
    monthTitle: 'yyyy/MM',
    loadPrevMonth: 'Load Prev Month',
    yesterday: 'Yesterday',
    lastWeek: 'Last Week',
    lastMonth: 'Last Month'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var mergeDateTime = function (date, time) {
    date = date || new Date();
    if (!time)
        return date;
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
};
/** @type {?} */
var formatDate = function (date, format, locale) {
    /** @type {?} */
    var week = locale && locale.week;
    /** @type {?} */
    var o = {
        'M+': date.getMonth() + 1,
        'd+': date.getDate(),
        'h+': date.getHours(),
        'm+': date.getMinutes(),
        's+': date.getSeconds(),
        'q+': Math.floor((date.getMonth() + 3) / 3),
        'w+': week && week[date.getDay()],
        S: date.getMilliseconds()
    };
    if (/(y+)/.test(format))
        format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
    for (var k in o) {
        if (new RegExp('(' + k + ')').test(format)) {
            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
        }
    }
    return format;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(_localeProviderService) {
        var _this = this;
        this._localeProviderService = _localeProviderService;
        this.isShow = false;
        this.showClear = false;
        this.props = /** @type {?} */ ({
            visible: false,
            showHeader: true,
            locale: defaultLocale,
            pickTime: false,
            showShortcut: false,
            prefixCls: 'rmc-calendar',
            type: 'range',
            defaultTimeValue: new Date(2000, 0, 1, 8)
        });
        this.state = /** @type {?} */ ({
            showTimePicker: false,
            timePickerTitle: '',
            startDate: undefined,
            endDate: undefined,
            disConfirmBtn: true,
            clientHight: 0
        });
        this._unsubscribe$ = new Subject();
        this.onCancel = new EventEmitter();
        this.onConfirm = new EventEmitter();
        this.onSelectHasDisableDate = new EventEmitter();
        this.class = 'am-calendar';
        this.selectDate = function (date, useDateTime, oldState, props) {
            if (useDateTime === void 0) { useDateTime = false; }
            if (oldState === void 0) { oldState = {}; }
            if (props === void 0) { props = _this.props; }
            if (!date) {
                return /** @type {?} */ ({});
            }
            /** @type {?} */
            var newState = /** @type {?} */ ({});
            var type = props.type, pickTime = props.pickTime, defaultTimeValue = props.defaultTimeValue, _a = props.locale, locale = _a === void 0 ? /** @type {?} */ ({}) : _a;
            /** @type {?} */
            var newDate = pickTime && !useDateTime ? mergeDateTime(date, defaultTimeValue) : date;
            var startDate = oldState.startDate, endDate = oldState.endDate;
            switch (type) {
                case 'one':
                    newState = __assign({}, newState, { startDate: newDate, disConfirmBtn: false });
                    if (pickTime) {
                        newState = __assign({}, newState, { timePickerTitle: locale.selectTime, showTimePicker: true });
                    }
                    break;
                case 'range':
                    if (!startDate || endDate) {
                        newState = __assign({}, newState, { startDate: newDate, endDate: undefined, disConfirmBtn: true });
                        if (pickTime) {
                            newState = __assign({}, newState, { timePickerTitle: locale.selectStartTime, showTimePicker: true });
                        }
                    }
                    else {
                        newState = __assign({}, newState, { timePickerTitle: +newDate >= +startDate ? locale.selectEndTime : locale.selectStartTime, disConfirmBtn: false, endDate: pickTime && !useDateTime && +newDate >= +startDate
                                ? new Date(+mergeDateTime(newDate, startDate) + 3600000)
                                : newDate });
                    }
                    break;
            }
            return newState;
        };
        this.onSelectedDate = function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            var onSelect = _this.props.onSelect;
            if (onSelect) {
                /** @type {?} */
                var value = onSelect(date, [startDate, endDate]);
                if (value) {
                    _this.shortcutSelect(value[0], value[1]);
                    return;
                }
            }
            _this.state = __assign({}, _this.state, _this.selectDate(date, false, { startDate: startDate, endDate: endDate }));
            _this.showClear = !!_this.state.startDate;
        };
        this.triggerSelectHasDisableDate = function (date) {
            _this.triggerClear();
            _this.onSelectHasDisableDate && _this.onSelectHasDisableDate.emit(date);
        };
        this.onClose = function () {
            _this.state = /** @type {?} */ ({
                showTimePicker: false,
                timePickerTitle: '',
                startDate: undefined,
                endDate: undefined,
                disConfirmBtn: true,
                clientHight: 0
            });
            _this.showClear = !!_this.state.startDate;
        };
        this.triggerConfirm = function () {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (startDate && endDate && +startDate > +endDate) {
                _this.onClose();
                return _this.onConfirm && _this.onConfirm.emit({ startDate: endDate, endDate: startDate });
            }
            _this.onConfirm && _this.onConfirm.emit({ startDate: startDate, endDate: endDate });
            _this.onClose();
        };
        this.triggerClear = function () {
            // 清除数据做延迟，否则同步刷新数据导致报错
            setTimeout(function () {
                _this.state = __assign({}, _this.state, { startDate: undefined, endDate: undefined, showTimePicker: false });
                _this.props.onClear && _this.props.onClear();
                _this.showClear = !!_this.state.startDate;
            }, 0);
        };
        this.onTimeChange = function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (endDate) {
                _this.state.endDate = date;
            }
            else if (startDate) {
                _this.state.startDate = date;
            }
        };
        this.shortcutSelect = function (startDate, endDate, props) {
            if (props === void 0) { props = _this.props; }
            _this.state = __assign({}, _this.state, { startDate: startDate, showTimePicker: false }, _this.selectDate(endDate, true, { startDate: startDate }, props));
            _this.showClear = !!_this.state.startDate;
        };
        this.setClientHeight = function (height) {
            _this.state.clientHight = height;
        };
    }
    Object.defineProperty(CalendarComponent.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'enUS') {
                this.props.locale = Calendar;
            }
            else if (value === 'zhCN') {
                this.props.locale = defaultLocale;
            }
            this._unsubscribe$.next();
            this._unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultTimeValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.defaultTimeValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "prefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.prefixCls = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "enterDirection", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._enterDirection = value;
            if (this._enterDirection === 'horizontal') {
                this.contentAnimateClass = 'slideH-enter slideH-enter-active';
            }
            else {
                this.contentAnimateClass = 'slideV-enter slideV-enter-active';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "visible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.props.visible = value;
            if (value === true || value === 'true') {
                this.showAnimation();
                this.isShow = true;
            }
            else {
                this.hideAnimation();
                setTimeout(function () {
                    _this.isShow = false;
                }, 300);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "getDateExtra", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.getDateExtra = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "minDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.minDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "maxDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.maxDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "pickTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.pickTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "showShortcut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.showShortcut = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "rowSize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.rowSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "infinite", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultValue = value;
            if (value) {
                this.receiveProps(this.props);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "onSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nextProps
     * @return {?}
     */
    CalendarComponent.prototype.receiveProps = /**
     * @param {?} nextProps
     * @return {?}
     */
    function (nextProps) {
        if (nextProps.visible && nextProps.defaultValue) {
            this.shortcutSelect(nextProps.defaultValue[0], nextProps.defaultValue[1], nextProps);
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-enter slideH-enter-active';
        }
        else {
            this.contentAnimateClass = 'slideV-enter slideV-enter-active';
        }
        this.maskAnimateClass = 'fade-enter fade-enter-active';
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.hideAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-leave slideH-leave-active';
        }
        else {
            this.contentAnimateClass = 'slideV-leave slideV-leave-active';
        }
        this.maskAnimateClass = 'fade-leave fade-leave-active';
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.triggerCancel = /**
     * @return {?}
     */
    function () {
        this.props.onCancel && this.props.onCancel();
        this.onClose();
        this.onCancel && this.onCancel.emit();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var defaultValue = this.props.defaultValue;
        if (defaultValue) {
            this.state = __assign({}, this.state, this.selectDate(defaultValue[1], true, { startDate: defaultValue[0] }, this.props));
        }
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this.props.locale = /** @type {?} */ (__assign({}, _this._localeProviderService.getLocaleSubObj('Calendar')));
        });
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Calendar, nzm-calendar',
                    template: "<span *ngIf=\"isShow\">\n  <div class=\"{{'mask ' + maskAnimateClass}}\"></div>\n</span>\n<span *ngIf=\"isShow\">\n  <div class=\"{{'content animate ' + contentAnimateClass}}\">\n    <CalendarHeader [locale]=\"props.locale\"\n                    [closeIcon]=\"closeIconHtml\"\n                    [showClear]=\"showClear\"\n                    (onCancel)=\"triggerCancel()\"\n                    (onClear)=\"triggerClear()\"\n    ></CalendarHeader>\n    <CalendarDatePicker [propsData]=\"props\"\n                        [endDate]=\"state.endDate\"\n                        [startDate]=\"state.startDate\"\n                        [onCellClick]=\"onSelectedDate\"\n                        [onSelectHasDisableDate]=\"triggerSelectHasDisableDate\"\n                        [onLayout]=\"setClientHeight\"\n    ></CalendarDatePicker>\n    <CalendarTimePicker *ngIf=\"state.showTimePicker\"\n                        [propsData]=\"props\"\n                        [title]=\"state.timePickerTitle\"\n                        [clientHeight]=\"state.clientHight\"\n                        [prefixCls]=\"props.timePickerPrefixCls\"\n                        [defaultValue]=\"props.defaultTimeValue\"\n                        [pickerPrefixCls]=\"props.timePickerPickerPrefixCls\"\n                        [value]=\"state.endDate ? state.endDate : state.startDate\"\n                        [onValueChange]=\"onTimeChange\"\n    ></CalendarTimePicker>\n    <CalendarShortcutPanel *ngIf=\"props.showShortcut && !state.showTimePicker\"\n                           [locale]=\"props.locale\"\n                           [onSelect]=\"shortcutSelect\"\n    ></CalendarShortcutPanel>\n    <CalendarConfirmPanel *ngIf=\"state.startDate\"\n                          [startDateTime]=\"state.startDate\"\n                          [endDateTime]=\"state.endDate\"\n                          [propsData]=\"props\"\n                          [disableBtn]=\"state.disConfirmBtn\"\n                          [formatStr]=\"props.pickTime ? props.locale.dateTimeFormat : props.locale.dateFormat\"\n                          [onConfirm]=\"triggerConfirm\"\n    ></CalendarConfirmPanel>\n  </div>\n</span>\n<ng-template #closeIconHtml>\n  <Icon [type]=\"'cross'\"></Icon>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    CalendarComponent.propDecorators = {
        locale: [{ type: Input }],
        defaultTimeValue: [{ type: Input }],
        prefixCls: [{ type: Input }],
        enterDirection: [{ type: Input }],
        visible: [{ type: Input }],
        getDateExtra: [{ type: Input }],
        defaultDate: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        pickTime: [{ type: Input }],
        type: [{ type: Input }],
        showShortcut: [{ type: Input }],
        rowSize: [{ type: Input }],
        infinite: [{ type: Input }],
        defaultValue: [{ type: Input }],
        onSelect: [{ type: Input }],
        onCancel: [{ type: Output }],
        onConfirm: [{ type: Output }],
        onSelectHasDisableDate: [{ type: Output }],
        class: [{ type: HostBinding, args: ['class',] }]
    };
    return CalendarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var HeaderComponent = /** @class */ (function () {
    function HeaderComponent() {
        this.closeIcon_component = false;
        this._closeIcon = 'X';
        this.onCancel = new EventEmitter();
        this.onClear = new EventEmitter();
        this.header = true;
    }
    Object.defineProperty(HeaderComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderComponent.prototype, "closeIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._closeIcon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._closeIcon = value;
                this.closeIcon_component = true;
            }
            else {
                this._closeIcon = /** @type {?} */ (value);
                this.closeIcon_component = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderComponent.prototype, "showClear", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showClear;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showClear = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HeaderComponent.prototype.triggerCancel = /**
     * @return {?}
     */
    function () {
        this.onCancel && this.onCancel.emit();
    };
    /**
     * @return {?}
     */
    HeaderComponent.prototype.triggerClear = /**
     * @return {?}
     */
    function () {
        this.onClear && this.onClear.emit();
    };
    HeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarHeader, nzm-calendar-header',
                    template: "<span *ngIf=\"!closeIcon_component\" class=\"left\" (click)=\"triggerCancel()\" [innerHTML]=\"closeIcon\"></span>\n<span *ngIf=\"closeIcon_component\" class=\"left\" (click)=\"triggerCancel()\">\n  <ng-template [ngTemplateOutlet]=\"closeIcon\"></ng-template>\n</span>\n<span class=\"title\">{{title || locale.title}}</span>\n<span *ngIf=\"showClear\" class=\"right\" (click)=\"triggerClear()\">{{clearIcon || locale.clear}}</span>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    HeaderComponent.ctorParameters = function () { return []; };
    HeaderComponent.propDecorators = {
        locale: [{ type: Input }],
        closeIcon: [{ type: Input }],
        showClear: [{ type: Input }],
        onCancel: [{ type: Output }],
        onClear: [{ type: Output }],
        header: [{ type: HostBinding, args: ['class.header',] }]
    };
    return HeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Models;
(function (Models) {
    var SelectType;
    (function (SelectType) {
        SelectType[SelectType["None"] = 0] = "None";
        SelectType[SelectType["Single"] = 1] = "Single";
        SelectType[SelectType["All"] = 2] = "All";
        SelectType[SelectType["Only"] = 3] = "Only";
        SelectType[SelectType["Start"] = 4] = "Start";
        SelectType[SelectType["Middle"] = 5] = "Middle";
        SelectType[SelectType["End"] = 6] = "End";
    })(SelectType = Models.SelectType || (Models.SelectType = {}));
    /**
     * @record
     */
    function Locale() { }
    Models.Locale = Locale;
    /** @type {?} */
    Locale.prototype.title;
    /** @type {?} */
    Locale.prototype.today;
    /** @type {?} */
    Locale.prototype.month;
    /** @type {?} */
    Locale.prototype.year;
    /** @type {?} */
    Locale.prototype.am;
    /** @type {?} */
    Locale.prototype.pm;
    /** @type {?} */
    Locale.prototype.dateFormat;
    /** @type {?} */
    Locale.prototype.dateTimeFormat;
    /** @type {?} */
    Locale.prototype.noChoose;
    /** @type {?} */
    Locale.prototype.week;
    /** @type {?} */
    Locale.prototype.clear;
    /** @type {?} */
    Locale.prototype.selectTime;
    /** @type {?} */
    Locale.prototype.selectStartTime;
    /** @type {?} */
    Locale.prototype.selectEndTime;
    /** @type {?} */
    Locale.prototype.start;
    /** @type {?} */
    Locale.prototype.end;
    /** @type {?} */
    Locale.prototype.begin;
    /** @type {?} */
    Locale.prototype.over;
    /** @type {?} */
    Locale.prototype.begin_over;
    /** @type {?} */
    Locale.prototype.confirm;
    /** @type {?} */
    Locale.prototype.monthTitle;
    /** @type {?} */
    Locale.prototype.loadPrevMonth;
    /** @type {?} */
    Locale.prototype.yesterday;
    /** @type {?} */
    Locale.prototype.lastWeek;
    /** @type {?} */
    Locale.prototype.lastMonth;
    /**
     * @record
     */
    function CellData() { }
    Models.CellData = CellData;
    /** @type {?} */
    CellData.prototype.tick;
    /** @type {?} */
    CellData.prototype.dayOfMonth;
    /** @type {?} */
    CellData.prototype.selected;
    /** @type {?} */
    CellData.prototype.isFirstOfMonth;
    /** @type {?} */
    CellData.prototype.isLastOfMonth;
    /** @type {?} */
    CellData.prototype.outOfDate;
    /**
     * @record
     */
    function ExtraData() { }
    Models.ExtraData = ExtraData;
    /** @type {?|undefined} */
    ExtraData.prototype.info;
    /** @type {?|undefined} */
    ExtraData.prototype.disable;
    /** @type {?|undefined} */
    ExtraData.prototype.cellCls;
    /** @type {?|undefined} */
    ExtraData.prototype.cellRender;
    /**
     * @record
     */
    function MonthData() { }
    Models.MonthData = MonthData;
    /** @type {?} */
    MonthData.prototype.title;
    /** @type {?} */
    MonthData.prototype.firstDate;
    /** @type {?} */
    MonthData.prototype.lastDate;
    /** @type {?} */
    MonthData.prototype.weeks;
    /** @type {?|undefined} */
    MonthData.prototype.component;
    /** @type {?|undefined} */
    MonthData.prototype.height;
    /** @type {?|undefined} */
    MonthData.prototype.y;
    /** @type {?|undefined} */
    MonthData.prototype.updateLayout;
    /** @type {?|undefined} */
    MonthData.prototype.componentRef;
})(Models || (Models = {}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePicker$1 = /** @class */ (function () {
    function DatePicker() {
        var _this = this;
        this.props = /** @type {?} */ ({
            prefixCls: 'rmc-calendar',
            infinite: false,
            infiniteOpt: false,
            defaultDate: new Date(),
            initalMonths: 6,
            locale: defaultLocale
        });
        this.state = {
            months: []
        };
        this.visibleMonth = [];
        this.getDateWithoutTime = function (date) {
            if (!date)
                return 0;
            return +new Date(date.getFullYear(), date.getMonth(), date.getDate());
        };
        this.genWeekData = function (firstDate) {
            /** @type {?} */
            var minDateTime = _this.getDateWithoutTime(_this.props.minDate);
            /** @type {?} */
            var maxDateTime = _this.getDateWithoutTime(_this.props.maxDate) || Number.POSITIVE_INFINITY;
            /** @type {?} */
            var weeks = [];
            /** @type {?} */
            var nextMonth = _this.getMonthDate(firstDate, 1).firstDate;
            /** @type {?} */
            var currentDay = firstDate;
            /** @type {?} */
            var currentWeek = [];
            weeks.push(currentWeek);
            /** @type {?} */
            var startWeekday = currentDay.getDay();
            if (startWeekday > 0) {
                for (var i = 0; i < startWeekday; i++) {
                    currentWeek.push(/** @type {?} */ ({}));
                }
            }
            while (currentDay < nextMonth) {
                if (currentWeek.length === 7) {
                    currentWeek = [];
                    weeks.push(currentWeek);
                }
                /** @type {?} */
                var dayOfMonth = currentDay.getDate();
                /** @type {?} */
                var tick = +currentDay;
                currentWeek.push({
                    tick: tick,
                    dayOfMonth: dayOfMonth,
                    selected: Models.SelectType.None,
                    isFirstOfMonth: dayOfMonth === 1,
                    isLastOfMonth: false,
                    outOfDate: tick < minDateTime || tick > maxDateTime
                });
                currentDay = new Date(currentDay.getTime() + 3600 * 24 * 1000);
            }
            currentWeek[currentWeek.length - 1].isLastOfMonth = true;
            return weeks;
        };
        this.selectDateRange = function (startDate, endDate, clear) {
            if (clear === void 0) { clear = false; }
            var _a = _this.props, getDateExtra = _a.getDateExtra, type = _a.type, onSelectHasDisableDate = _a.onSelectHasDisableDate;
            if (type === 'one') {
                endDate = undefined;
            }
            /** @type {?} */
            var time1 = _this.getDateWithoutTime(startDate);
            /** @type {?} */
            var time2 = _this.getDateWithoutTime(endDate);
            /** @type {?} */
            var startDateTick = !time2 || time1 < time2 ? time1 : time2;
            /** @type {?} */
            var endDateTick = time2 && time1 > time2 ? time1 : time2;
            /** @type {?} */
            var startMonthDate = _this.getMonthDate(new Date(startDateTick)).firstDate;
            /** @type {?} */
            var endMonthDate = endDateTick ? new Date(endDateTick) : _this.getMonthDate(new Date(startDateTick)).lastDate;
            /** @type {?} */
            var unuseable = [];
            /** @type {?} */
            var needUpdate = false;
            _this.state.months
                .filter(function (m) {
                return m.firstDate >= startMonthDate && m.firstDate <= endMonthDate;
            })
                .forEach(function (m) {
                m.weeks.forEach(function (w) {
                    return w
                        .filter(function (d) {
                        if (!endDateTick) {
                            return d.tick && _this.inDate(startDateTick, d.tick);
                        }
                        else {
                            return d.tick && d.tick >= startDateTick && d.tick <= endDateTick;
                        }
                    })
                        .forEach(function (d) {
                        /** @type {?} */
                        var oldValue = d.selected;
                        if (clear) {
                            d.selected = Models.SelectType.None;
                        }
                        else {
                            /** @type {?} */
                            var info = (getDateExtra && getDateExtra(new Date(d.tick))) || {};
                            if (d.outOfDate || info.disable) {
                                unuseable.push(d.tick);
                            }
                            if (_this.inDate(startDateTick, d.tick)) {
                                if (type === 'one') {
                                    d.selected = Models.SelectType.Single;
                                }
                                else if (!endDateTick) {
                                    d.selected = Models.SelectType.Only;
                                }
                                else if (startDateTick !== endDateTick) {
                                    d.selected = Models.SelectType.Start;
                                }
                                else {
                                    d.selected = Models.SelectType.All;
                                }
                            }
                            else if (_this.inDate(endDateTick, d.tick)) {
                                d.selected = Models.SelectType.End;
                            }
                            else {
                                d.selected = Models.SelectType.Middle;
                            }
                        }
                        needUpdate = needUpdate || d.selected !== oldValue;
                    });
                });
                if (needUpdate && m.componentRef) {
                    m.componentRef.updateWeeks();
                }
            });
            if (unuseable.length > 0) {
                if (onSelectHasDisableDate) {
                    onSelectHasDisableDate(unuseable.map(function (tick) { return new Date(tick); }));
                }
                else {
                    console.warn('Unusable date. You can handle by onSelectHasDisableDate.', unuseable);
                }
            }
        };
        this.computeVisible = function (clientHeight, scrollTop) {
            /** @type {?} */
            var needUpdate = false;
            /** @type {?} */
            var MAX_VIEW_PORT = clientHeight * 2;
            /** @type {?} */
            var MIN_VIEW_PORT = clientHeight;
            /** @type {?} */
            var filterFunc = function (vm) {
                return vm.y &&
                    vm.height &&
                    (vm.y + vm.height > scrollTop - MAX_VIEW_PORT && vm.y < scrollTop + clientHeight + MAX_VIEW_PORT);
            };
            if (_this.props.infiniteOpt && _this.visibleMonth.length > 12) {
                _this.visibleMonth = _this.visibleMonth.filter(filterFunc).sort(function (a, b) { return +a.firstDate - +b.firstDate; });
            }
            // 当小缓冲区不满时填充
            if (_this.visibleMonth.length > 0) {
                /** @type {?} */
                var last = _this.visibleMonth[_this.visibleMonth.length - 1];
                if (last.y !== undefined && last.height && last.y + last.height < scrollTop + clientHeight + MIN_VIEW_PORT) {
                    /** @type {?} */
                    var lastIndex = _this.state.months.indexOf(last);
                    for (var i = 1; i <= 2; i++) {
                        /** @type {?} */
                        var index = lastIndex + i;
                        if (index < _this.state.months.length && _this.visibleMonth.indexOf(_this.state.months[index]) < 0) {
                            _this.visibleMonth.push(_this.state.months[index]);
                        }
                        else {
                            _this.canLoadNext() && _this.genMonthData(undefined, 1);
                        }
                    }
                    needUpdate = true;
                }
                /** @type {?} */
                var first = _this.visibleMonth[0];
                if (first.y !== undefined && first.height && first.y > scrollTop - MIN_VIEW_PORT) {
                    /** @type {?} */
                    var firstIndex = _this.state.months.indexOf(first);
                    for (var i = 1; i <= 2; i++) {
                        /** @type {?} */
                        var index = firstIndex - i;
                        if (index >= 0 && _this.visibleMonth.indexOf(_this.state.months[index]) < 0) {
                            _this.visibleMonth.unshift(_this.state.months[index]);
                            needUpdate = true;
                        }
                    }
                }
            }
            else if (_this.state.months.length > 0) {
                _this.visibleMonth = _this.state.months.filter(filterFunc);
                needUpdate = true;
            }
            return needUpdate;
        };
        this.createOnScroll = function () {
            /** @type {?} */
            var clientHeight = 0;
            /** @type {?} */
            var scrollTop = 0;
            return function (data) {
                var client = data.client, top = data.top;
                clientHeight = client;
                scrollTop = top;
                _this.computeVisible(clientHeight, scrollTop);
                // 以上方法目前无问题，如果后续有性能问题，改用如下方法，但以下方法会导致刷新稍微延迟现象
                // if (timer) {
                //   return;
                // }
                //
                // timer = setTimeout(() => {
                //   timer = undefined;
                //
                //   if (this.computeVisible(clientHeight, scrollTop)) {
                //     console.log('update dom');
                //   }
                // }, 50);
            };
        };
        this.baseOnCellClick = function (day) {
            if (!day.tick)
                return;
            _this.props.onCellClick && _this.props.onCellClick(new Date(day.tick));
        };
    }
    /**
     * @return {?}
     */
    DatePicker.prototype.init = /**
     * @return {?}
     */
    function () {
        var _a = this.props, _b = _a.initalMonths, initalMonths = _b === void 0 ? 6 : _b, defaultDate = _a.defaultDate;
        for (var i = 0; i < initalMonths; i++) {
            this.canLoadNext() && this.genMonthData(defaultDate, i);
        }
        this.visibleMonth = __spread(this.state.months);
    };
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    DatePicker.prototype.receiveProps = /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    function (oldValue, newValue) {
        if (oldValue && newValue) {
            if (oldValue.startDate !== newValue.startDate || oldValue.endDate !== newValue.endDate) {
                if (oldValue.startDate) {
                    this.selectDateRange(oldValue.startDate, oldValue.endDate, true);
                }
                if (newValue.startDate) {
                    this.selectDateRange(newValue.startDate, newValue.endDate);
                }
            }
        }
    };
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    DatePicker.prototype.getMonthDate = /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    function (date, addMonth) {
        if (date === void 0) { date = new Date(); }
        if (addMonth === void 0) { addMonth = 0; }
        /** @type {?} */
        var y = date.getFullYear();
        /** @type {?} */
        var m = date.getMonth();
        return {
            firstDate: new Date(y, m + addMonth, 1),
            lastDate: new Date(y, m + 1 + addMonth, 0)
        };
    };
    /**
     * @return {?}
     */
    DatePicker.prototype.canLoadPrev = /**
     * @return {?}
     */
    function () {
        var minDate = this.props.minDate;
        return (!minDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(minDate).firstDate < +this.state.months[0].firstDate);
    };
    /**
     * @return {?}
     */
    DatePicker.prototype.canLoadNext = /**
     * @return {?}
     */
    function () {
        var maxDate = this.props.maxDate;
        return (!maxDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(maxDate).firstDate > +this.state.months[this.state.months.length - 1].firstDate);
    };
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    DatePicker.prototype.genMonthData = /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    function (date, addMonth) {
        if (addMonth === void 0) { addMonth = 0; }
        if (!date) {
            date = addMonth >= 0 ? this.state.months[this.state.months.length - 1].firstDate : this.state.months[0].firstDate;
        }
        if (!date) {
            date = new Date();
        }
        var locale = this.props.locale;
        var _a = this.getMonthDate(date, addMonth), firstDate = _a.firstDate, lastDate = _a.lastDate;
        /** @type {?} */
        var weeks = this.genWeekData(firstDate);
        /** @type {?} */
        var title = formatDate(firstDate, locale ? locale.monthTitle : 'yyyy/MM', this.props.locale);
        /** @type {?} */
        var data = /** @type {?} */ ({
            title: title,
            firstDate: firstDate,
            lastDate: lastDate,
            weeks: weeks
        });
        data.component = this.genMonthComponent(data);
        if (addMonth >= 0) {
            this.state.months.push(data);
        }
        else {
            this.state.months.unshift(data);
        }
        var _b = this.props, startDate = _b.startDate, endDate = _b.endDate;
        if (startDate) {
            this.selectDateRange(startDate, endDate);
        }
        return data;
    };
    /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    DatePicker.prototype.inDate = /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    function (date, tick) {
        return date <= tick && tick < date + 24 * 3600000;
    };
    return DatePicker;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerComponent = /** @class */ (function (_super) {
    __extends(DatePickerComponent, _super);
    function DatePickerComponent() {
        var _this = _super.call(this) || this;
        _this.transform = '';
        _this._initDelta = 0;
        _this._lastY = 0;
        _this._delta = _this._initDelta;
        _this.amCalendar = true;
        _this.datePicker = true;
        _this.genMonthComponent = function (data) {
            if (!data)
                return;
            return {
                monthData: data,
                locale: _this.props.locale,
                rowSize: _this.props.rowSize,
                onCellClick: _this.baseOnCellClick,
                getDateExtra: _this.props.getDateExtra,
                ref: function (dom) {
                    data.componentRef = dom || data.componentRef || undefined;
                    data.updateLayout = function () {
                        _this.computeHeight(data, dom);
                    };
                    data.updateLayout();
                }
            };
        };
        _this.computeHeight = function (data, singleMonth) {
            if (singleMonth && singleMonth.wrapperDivDOM) {
                if (!data.height && !singleMonth.wrapperDivDOM.clientHeight) {
                    setTimeout(function () { return _this.computeHeight(data, singleMonth); }, 500);
                    return;
                }
                data.height = singleMonth.wrapperDivDOM.clientHeight || data.height || 0;
                data.y = singleMonth.wrapperDivDOM.offsetTop || data.y || 0;
            }
        };
        _this.setLayout = function (dom) {
            if (dom) {
                var onLayout = _this.props.onLayout;
                onLayout && onLayout(dom.clientHeight);
                /** @type {?} */
                var scrollHandler_1 = _this.createOnScroll();
                dom.onscroll = function (evt) {
                    scrollHandler_1({
                        client: dom.clientHeight,
                        full: (/** @type {?} */ (evt.currentTarget)).clientHeight,
                        top: (/** @type {?} */ (evt.currentTarget)).scrollTop
                    });
                };
            }
        };
        _this.setPanel = function (dom) {
            _this._panel = dom;
        };
        return _this;
    }
    Object.defineProperty(DatePickerComponent.prototype, "onCellClick", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onCellClick = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "endDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var oldProps = Object.assign({}, this.props);
            this.props.endDate = value;
            this.receiveProps(oldProps, this.props);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "startDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var oldProps = Object.assign({}, this.props);
            this.props.startDate = value;
            this.receiveProps(oldProps, this.props);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = __assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "onSelectHasDisableDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onSelectHasDisableDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "onLayout", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onLayout = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._lastY = event.touches[0].screenY;
        this._delta = this._initDelta;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var ele = event.currentTarget;
        /** @type {?} */
        var isReachTop = ele.scrollTop === 0;
        if (isReachTop) {
            this._delta = event.touches[0].screenY - this._lastY;
            if (this._delta > 0) {
                event.preventDefault();
                if (this._delta > 80) {
                    this._delta = 80;
                }
            }
            else {
                this._delta = 0;
            }
            this.setTransform(this._panel.style, "translate3d(0," + this._delta + "px,0)");
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onFinish();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.onFinish = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._delta > 40 && this.canLoadPrev()) {
            this.genMonthData(this.state.months[0].firstDate, -1);
            this.visibleMonth = this.state.months.slice(0, this.props.initalMonths);
            this.state.months.forEach(function (m) {
                m.updateLayout && m.updateLayout();
            });
        }
        this.setTransform(this._panel.style, "translate3d(0,0,0)");
        this.setTransition(this._panel.style, '.3s');
        setTimeout(function () {
            _this._panel && _this.setTransition(_this._panel.style, '');
        }, 300);
    };
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.setTransform = /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    function (nodeStyle, value) {
        this.transform = value;
        nodeStyle.transform = value;
        nodeStyle.webkitTransform = value;
    };
    /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.setTransition = /**
     * @param {?} nodeStyle
     * @param {?} value
     * @return {?}
     */
    function (nodeStyle, value) {
        nodeStyle.transition = value;
        nodeStyle.webkitTransition = value;
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
        this.setLayout(this.layoutDom.nativeElement);
        this.setPanel(this.panelDom.nativeElement);
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarDatePicker, nzm-calendar-date-picker',
                    template: "<CalendarWeekPanel [locale]=\"props.locale\"></CalendarWeekPanel>\n<div #layout\n     class=\"wrapper\"\n     style=\"overflow-x:hidden;overflow-y:visible;-webkit-overflow-scrolling:touch;\"\n     (touchstart)=\"onTouchStart($event)\"\n     (touchmove)=\"onTouchMove($event)\"\n     (touchend)=\"onTouchEnd($event)\"\n>\n  <div #panel [ngStyle]=\"{transform: transform}\">\n    <div *ngIf=\"canLoadPrev()\" class=\"load-tip\">{{props.locale.loadPrevMonth}}</div>\n    <div class=\"months\">\n      <SingleMonth *ngFor=\"let item of visibleMonth;let i = index;\"\n                   style=\"display: block;\"\n                   [data]=\"item.component\"\n      ></SingleMonth>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return []; };
    DatePickerComponent.propDecorators = {
        layoutDom: [{ type: ViewChild, args: ['layout',] }],
        panelDom: [{ type: ViewChild, args: ['panel',] }],
        onCellClick: [{ type: Input }],
        endDate: [{ type: Input }],
        startDate: [{ type: Input }],
        propsData: [{ type: Input }],
        onSelectHasDisableDate: [{ type: Input }],
        onLayout: [{ type: Input }],
        amCalendar: [{ type: HostBinding, args: ['class.am-calendar',] }],
        datePicker: [{ type: HostBinding, args: ['class.date-picker',] }]
    };
    return DatePickerComponent;
}(DatePicker$1));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker$1 = {
    okText: 'Ok',
    dismissText: 'Cancel',
    extra: 'please select',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import  DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePicker$2 = {
    okText: 'OK',
    dismissText: 'Cancel',
    extra: 'please select',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import  DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePickerView$1 = {
    okText: 'OK',
    dismissText: 'Cancel',
    extra: 'please select',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Menu$1 = {
    okText: 'Ok',
    cancelText: 'Cancel',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar$2 = {
    cancelText: 'Cancel',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem$2 = {
    confirmLabel: 'Done',
    backspaceLabel: 'Backspace',
    cancelKeyboardLabel: 'CancelKeyboard',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Pagination$1 = {
    prevText: 'Prev',
    nextText: 'Next',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefresh$1 = {
    activateText: 'Refresh immediately after release',
    deactivateText: 'Pull down to refresh',
    finishText: 'Finish refresh',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var en_US = {
    locale: 'en_US',
    Picker: Picker$1,
    DatePicker: DatePicker$2,
    DatePickerView: DatePickerView$1,
    Menu: Menu$1,
    Calendar: Calendar,
    SearchBar: SearchBar$2,
    InputItem: InputItem$2,
    Pagination: Pagination$1,
    PullToRefresh: PullToRefresh$1
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker$2 = {
    okText: 'Ок',
    dismissText: 'Отмена',
    extra: '',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePicker$3 = {
    okText: 'Ок',
    dismissText: 'Отмена',
    extra: '',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePickerView$2 = {
    okText: 'Ок',
    dismissText: 'Отмена',
    extra: '',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Menu$2 = {
    okText: 'Ок',
    cancelText: 'Отмена',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar$3 = {
    cancelText: 'Отмена',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem$3 = {
    confirmLabel: 'Ок',
    backspaceLabel: 'возврат на одну позицию',
    cancelKeyboardLabel: 'Отменить клавиатуру',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Pagination$2 = {
    prevText: 'Назад',
    nextText: 'Вперёд',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefresh$2 = {
    activateText: 'Обновить сразу после выпуска',
    deactivateText: 'Потяните вниз, чтобы обновить',
    finishText: 'Завершить обновление',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ru_RU = {
    locale: 'ru_RU',
    Picker: Picker$2,
    DatePicker: DatePicker$3,
    DatePickerView: DatePickerView$2,
    Menu: Menu$2,
    // Calendar,
    SearchBar: SearchBar$3,
    InputItem: InputItem$3,
    Pagination: Pagination$2,
    PullToRefresh: PullToRefresh$2
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker$3 = {
    okText: 'Ok',
    dismissText: 'Avbryt',
    extra: 'vänligen välj',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePicker$4 = {
    okText: 'Ok',
    dismissText: 'Avbryt',
    extra: 'vänligen välj',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePickerView$3 = {
    okText: 'Ok',
    dismissText: 'Avbryt',
    extra: 'vänligen välj',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Menu$3 = {
    okText: 'Ok',
    cancelText: 'Avbryt',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar$4 = {
    cancelText: 'Avbryt',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem$4 = {
    confirmLabel: 'Ok',
    backspaceLabel: 'Backspace',
    cancelKeyboardLabel: 'CancelKeyboard',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Pagination$3 = {
    prevText: 'Föreg',
    nextText: 'Nästa',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefresh$3 = {
    activateText: 'Uppdatera omedelbart efter utsläpp',
    deactivateText: 'Dra ner för att uppdatera',
    finishText: 'Avsluta uppdateringen',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var sv_SE = {
    locale: 'sv_SE',
    Picker: Picker$3,
    DatePicker: DatePicker$4,
    DatePickerView: DatePickerView$3,
    Menu: Menu$3,
    // Calendar,
    SearchBar: SearchBar$4,
    InputItem: InputItem$4,
    Pagination: Pagination$3,
    PullToRefresh: PullToRefresh$3
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker$4 = {
    okText: 'Ok',
    dismissText: 'Annuller',
    extra: 'Vælg venligst',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePicker$5 = {
    okText: 'Ok',
    dismissText: 'Annuller',
    extra: 'Vælg venligst',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import DatePickerLocale from 'rmc-date-picker/lib/locale/en_US';
var DatePickerView$4 = {
    okText: 'Ok',
    dismissText: 'Annuller',
    extra: 'Vælg venligst',
    // DatePickerLocale,
    year: '',
    month: '',
    day: '',
    hour: '',
    minute: '',
    am: 'AM',
    pm: 'PM'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Menu$4 = {
    okText: 'Ok',
    cancelText: 'Annuller',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// 同步自 'rmc-calendar/lib/locale/en_US';
var Calendar$1 = {
    title: 'Kalender',
    today: 'I dag',
    month: 'Måned',
    year: 'År',
    am: 'AM',
    pm: 'PM',
    dateTimeFormat: 'dd/MM/yyyy w hh:mm',
    dateFormat: 'dd/MM/yyyy w',
    noChoose: 'Intet valgt',
    week: ['Søn', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør'],
    clear: 'Fjern',
    selectTime: 'Vælg tidspunkt',
    selectStartTime: 'Vælg starttidspunkt',
    selectEndTime: 'Vælg sluttidspunkt',
    start: 'Start',
    end: 'Slut',
    begin: 'Start',
    over: 'Slut',
    begin_over: 'Start/Stop',
    confirm: 'Bekræft',
    monthTitle: 'MM yyyy',
    loadPrevMonth: 'Indlæs forrige måned',
    yesterday: 'I går',
    lastWeek: 'Sidste uge',
    lastMonth: 'Sidste måned'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SearchBar$5 = {
    cancelText: 'Annuller',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InputItem$5 = {
    confirmLabel: 'Ok',
    backspaceLabel: 'Backspace',
    cancelKeyboardLabel: 'CancelKeyboard',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Pagination$4 = {
    prevText: 'Forrige',
    nextText: 'Næste',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefresh$4 = {
    activateText: 'Opdater umiddelbart efter slip',
    deactivateText: 'Træk ned for at opdatere',
    finishText: 'Afslut opdatering',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var da_DK = {
    locale: 'da_DK',
    Picker: Picker$4,
    DatePicker: DatePicker$5,
    DatePickerView: DatePickerView$4,
    Menu: Menu$4,
    Calendar: Calendar$1,
    SearchBar: SearchBar$5,
    InputItem: InputItem$5,
    Pagination: Pagination$4,
    PullToRefresh: PullToRefresh$4
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TimePickerComponent = /** @class */ (function () {
    function TimePickerComponent() {
        var _this = this;
        this.defaultProps = /** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        });
        this.props = /** @type {?} */ ({
            minDate: new Date(0, 0, 0, 0, 0),
            maxDate: new Date(9999, 11, 31, 23, 59, 59),
            defaultValue: new Date(2000, 1, 1, 8),
            mode: 'time',
            datePickerViewLocale: zh_CN
        });
        this.timePicker = true;
        this.onDateChange = function (date) {
            var onValueChange = _this.props.onValueChange;
            onValueChange && onValueChange(date);
        };
    }
    Object.defineProperty(TimePickerComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = __assign({}, this.props, value);
            if (this.props.locale && this.props.locale.today === 'Today') {
                this.props.datePickerViewLocale = en_US;
            }
            else {
                this.props.datePickerViewLocale = zh_CN;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "value", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "prefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.prefixCls = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "pickerPrefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.pickerPrefixCls = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "clientHeight", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.clientHeight = value;
            /** @type {?} */
            var height = (value && (value * 3) / 8 - 52) || Number.POSITIVE_INFINITY;
            this.selfHeight = (height > 164 || height < 0 ? 164 : height) + 'px';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "onValueChange", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onValueChange = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} date
     * @return {?}
     */
    TimePickerComponent.prototype.getMinTime = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var minDate = /** @type {?} */ (this.props.minDate);
        if (!date ||
            date.getFullYear() > minDate.getFullYear() ||
            date.getMonth() > minDate.getMonth() ||
            date.getDate() > minDate.getDate()) {
            return this.defaultProps.minDate;
        }
        return minDate;
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    TimePickerComponent.prototype.getMaxTime = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var maxDate = /** @type {?} */ (this.props.maxDate);
        if (!date ||
            date.getFullYear() < maxDate.getFullYear() ||
            date.getMonth() < maxDate.getMonth() ||
            date.getDate() < maxDate.getDate()) {
            return this.defaultProps.maxDate;
        }
        return maxDate;
    };
    TimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarTimePicker, nzm-calendar-time-picker',
                    template: "<div class=\"title\">{{props.title}}</div>\n<DatePickerView [ngStyle]=\"{height: selfHeight, overflow: 'hidden'}\"\n                [mode]=\"props.mode\"\n                [value]=\"props.value\"\n                [locale]=\"props.datePickerViewLocale\"\n                [minDate]=\"getMinTime(props.value || props.defaultValue || undefined)\"\n                [maxDate]=\"getMaxTime(props.value || props.defaultValue || undefined)\"\n                (onValueChange)=\"onDateChange($event)\"\n></DatePickerView>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    TimePickerComponent.ctorParameters = function () { return []; };
    TimePickerComponent.propDecorators = {
        propsData: [{ type: Input }],
        title: [{ type: Input }],
        value: [{ type: Input }],
        prefixCls: [{ type: Input }],
        defaultValue: [{ type: Input }],
        pickerPrefixCls: [{ type: Input }],
        clientHeight: [{ type: Input }],
        onValueChange: [{ type: Input }],
        timePicker: [{ type: HostBinding, args: ['class.time-picker',] }]
    };
    return TimePickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var WeekPanelComponent = /** @class */ (function () {
    function WeekPanelComponent() {
        this.week = ['日', '一', '二', '三', '四', '五', '六'];
        this.weekPanel = true;
    }
    Object.defineProperty(WeekPanelComponent.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WeekPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.week = this._locale.week;
    };
    WeekPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarWeekPanel, nzm-calendar-week-panel',
                    template: "<div class=\"cell cell-grey\">{{week[0]}}</div>\n<div class=\"cell\">{{week[1]}}</div>\n<div class=\"cell\">{{week[2]}}</div>\n<div class=\"cell\">{{week[3]}}</div>\n<div class=\"cell\">{{week[4]}}</div>\n<div class=\"cell\">{{week[5]}}</div>\n<div class=\"cell cell-grey\">{{week[6]}}</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    WeekPanelComponent.ctorParameters = function () { return []; };
    WeekPanelComponent.propDecorators = {
        locale: [{ type: Input }],
        weekPanel: [{ type: HostBinding, args: ['class.week-panel',] }]
    };
    return WeekPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ConfirmPanelComponent = /** @class */ (function () {
    function ConfirmPanelComponent() {
        var _this = this;
        this.props = /** @type {?} */ ({
            formatStr: 'yyyy-MM-dd hh:mm'
        });
        this.confirmPane = true;
        this.triggerConfirm = function () {
            var _a = _this.props, onConfirm = _a.onConfirm, disableBtn = _a.disableBtn;
            !disableBtn && onConfirm();
        };
    }
    Object.defineProperty(ConfirmPanelComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = __assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "disableBtn", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.disableBtn = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "formatStr", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.formatStr = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "startDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.startDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "endDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.endDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "onConfirm", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onConfirm = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ConfirmPanelComponent.prototype.formatTime = /**
     * @return {?}
     */
    function () {
        var _a = this.props, type = _a.type, locale = _a.locale, disableBtn = _a.disableBtn;
        var _b = this.props, startDateTime = _b.startDateTime, endDateTime = _b.endDateTime;
        if (startDateTime && endDateTime && +startDateTime > +endDateTime) {
            /** @type {?} */
            var tmp = startDateTime;
            startDateTime = endDateTime;
            endDateTime = tmp;
        }
        this.startTimeStr = startDateTime ? this.selfFormatDate(startDateTime) : locale.noChoose;
        this.endTimeStr = endDateTime ? this.selfFormatDate(endDateTime) : locale.noChoose;
        /** @type {?} */
        var btnCls = disableBtn ? 'button button-disable' : 'button';
        if (type === 'one') {
            btnCls += ' button-full';
        }
        this.btnCls = btnCls;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ConfirmPanelComponent.prototype.selfFormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _a = this.props, _b = _a.formatStr, formatStr = _b === void 0 ? '' : _b, locale = _a.locale;
        return formatDate(date, formatStr, locale);
    };
    ConfirmPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarConfirmPanel, nzm-calendar-confirm-panel',
                    template: "<div *ngIf=\"props.type === 'range'\" class=\"info\">\n  <p>{{props.locale.start}}: <span class=\"{{!props.startDateTime ? 'grey' : ''}}\">{{startTimeStr}}</span></p>\n  <p>{{props.locale.end}}: <span class=\"{{!props.endDateTime ? 'grey' : ''}}\">{{endTimeStr}}</span></p>\n</div>\n<div [ngClass]=\"btnCls\" (click)=\"triggerConfirm()\">\n  {{props.locale.confirm}}\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ConfirmPanelComponent.ctorParameters = function () { return []; };
    ConfirmPanelComponent.propDecorators = {
        propsData: [{ type: Input }],
        disableBtn: [{ type: Input }],
        formatStr: [{ type: Input }],
        startDateTime: [{ type: Input }],
        endDateTime: [{ type: Input }],
        onConfirm: [{ type: Input }],
        confirmPane: [{ type: HostBinding, args: ['class.confirm-panel',] }]
    };
    return ConfirmPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SingleMonthComponent = /** @class */ (function () {
    function SingleMonthComponent(_elementRef) {
        var _this = this;
        this._elementRef = _elementRef;
        this.props = /** @type {?} */ ({
            rowSize: 'normal'
        });
        this.state = {
            weekComponents: []
        };
        this.singleMonth = true;
        this.genWeek = function (weeksData, index) {
            var _a = _this.props, getDateExtra = _a.getDateExtra, monthData = _a.monthData, onCellClick = _a.onCellClick, locale = _a.locale, rowSize = _a.rowSize;
            /** @type {?} */
            var rowCls = 'row';
            /** @type {?} */
            var weeksDataList = [];
            if (rowSize === 'xl') {
                rowCls += ' row-xl';
            }
            weeksData.forEach(function (day, dayOfWeek) {
                /** @type {?} */
                var extra = (getDateExtra && getDateExtra(new Date(day.tick))) || {};
                /** @type {?} */
                var info = extra.info;
                /** @type {?} */
                var disable = extra.disable || day.outOfDate;
                /** @type {?} */
                var cls = 'date';
                /** @type {?} */
                var lCls = 'left';
                /** @type {?} */
                var rCls = 'right';
                /** @type {?} */
                var infoCls = 'info';
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    cls += ' grey';
                }
                if (disable) {
                    cls += ' disable';
                }
                else if (info) {
                    cls += ' important';
                }
                if (day.selected) {
                    cls += ' date-selected';
                    /** @type {?} */
                    var styleType = day.selected;
                    switch (styleType) {
                        case Models.SelectType.Only:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.All:
                            info = locale.begin_over;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.Start:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                        case Models.SelectType.Middle:
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                if (day.isLastOfMonth || dayOfWeek === 6) {
                                    styleType = Models.SelectType.All;
                                }
                                else {
                                    styleType = Models.SelectType.Start;
                                }
                            }
                            else if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.End;
                            }
                            break;
                        case Models.SelectType.End:
                            info = locale.over;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                    }
                    switch (styleType) {
                        case Models.SelectType.Single:
                        case Models.SelectType.Only:
                        case Models.SelectType.All:
                            cls += ' selected-single';
                            break;
                        case Models.SelectType.Start:
                            cls += ' selected-start';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.Middle:
                            cls += ' selected-middle';
                            lCls += ' date-selected';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.End:
                            cls += ' selected-end';
                            lCls += ' date-selected';
                            break;
                    }
                }
                weeksDataList[dayOfWeek] = {
                    lCls: lCls,
                    cls: cls,
                    day: day,
                    rCls: rCls,
                    infoCls: infoCls,
                    info: info,
                    extra: extra,
                    disable: disable,
                    onCellClick: onCellClick,
                    monthData: monthData
                };
            });
            _this.state.weekComponents[index] = {
                index: index,
                rowCls: rowCls,
                weeksDataList: weeksDataList
            };
        };
        this.updateWeeks = function (monthData) {
            (monthData || _this.props.monthData).weeks.forEach(function (week, index) {
                _this.genWeek(week, index);
            });
        };
        this.setWarpper = function (dom) {
            _this.wrapperDivDOM = dom;
        };
    }
    Object.defineProperty(SingleMonthComponent.prototype, "data", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = __assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    SingleMonthComponent.prototype.onClickCell = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        !item.disable && item.onCellClick && item.onCellClick(item.day, item.monthData);
    };
    /**
     * @return {?}
     */
    SingleMonthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setWarpper(this._elementRef.nativeElement);
        this.props.monthData.weeks.forEach(function (week, index) {
            _this.genWeek(week, index);
        });
    };
    /**
     * @return {?}
     */
    SingleMonthComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.ref = this.props.ref;
        this.ref(this);
    };
    SingleMonthComponent.decorators = [
        { type: Component, args: [{
                    selector: 'SingleMonth, nzm-single-month',
                    template: "<div class=\"month-title\">\n  {{props.monthData.title}}\n</div>\n<div class=\"date\">\n  <div *ngFor=\"let row of state.weekComponents;let i = index;\" [ngClass]=\"row.rowCls\">\n    <div *ngFor=\"let cell of row.weeksDataList;let j = index;\"\n         class=\"{{'cell ' + (row.extra && row.extra.cellCls || '')}}\"\n         (click)=\"onClickCell(cell)\"\n    >\n      <div *ngIf=\"row.extra && row.extra.cellRender\">test</div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" class=\"date-wrapper\">\n        <span [ngClass]=\"cell.lCls\"></span>\n        <div [ngClass]=\"cell.cls\">\n          {{cell.day && cell.day.dayOfMonth || ''}}\n        </div>\n        <span [ngClass]=\"cell.rCls\"></span>\n      </div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" [ngClass]=\"cell.infoCls\">\n        {{cell.info}}\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SingleMonthComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SingleMonthComponent.propDecorators = {
        data: [{ type: Input }],
        singleMonth: [{ type: HostBinding, args: ['class.single-month',] }]
    };
    return SingleMonthComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ShortcutPanelComponent = /** @class */ (function () {
    function ShortcutPanelComponent() {
        var _this = this;
        this.props = /** @type {?} */ ({});
        this.shortcutPanel = true;
        this.onClick = function (type) {
            var onSelect = _this.props.onSelect;
            /** @type {?} */
            var today = new Date();
            switch (type) {
                case 'today':
                    onSelect(new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0), new Date(today.getFullYear(), today.getMonth(), today.getDate(), 12));
                    break;
                case 'yesterday':
                    onSelect(new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1, 0), new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1, 12));
                    break;
                case 'lastweek':
                    onSelect(new Date(today.getFullYear(), today.getMonth(), today.getDate() - 6, 0), new Date(today.getFullYear(), today.getMonth(), today.getDate(), 12));
                    break;
                case 'lastmonth':
                    onSelect(new Date(today.getFullYear(), today.getMonth(), today.getDate() - 29, 0), new Date(today.getFullYear(), today.getMonth(), today.getDate(), 12));
                    break;
            }
        };
    }
    Object.defineProperty(ShortcutPanelComponent.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShortcutPanelComponent.prototype, "onSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    ShortcutPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarShortcutPanel, nzm-calendar-shortcut-panel',
                    template: "<div class=\"item\" (click)=\"onClick('today')\">{{props.locale.today}}</div>\n<div class=\"item\" (click)=\"onClick('yesterday')\">{{props.locale.yesterday}}</div>\n<div class=\"item\" (click)=\"onClick('lastweek')\">{{props.locale.lastWeek}}</div>\n<div class=\"item\" (click)=\"onClick('lastmonth')\">{{props.locale.lastMonth}}</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ShortcutPanelComponent.ctorParameters = function () { return []; };
    ShortcutPanelComponent.propDecorators = {
        locale: [{ type: Input }],
        onSelect: [{ type: Input }],
        shortcutPanel: [{ type: HostBinding, args: ['class.shortcut-panel',] }]
    };
    return ShortcutPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerOptions = /** @class */ (function () {
    function DatePickerOptions() {
        this.mode = 'date';
        this.value = new Date();
        this.minDate = new Date(2000, 6, 1, 0, 0, 0);
        this.maxDate = new Date(2030, 1, 1, 23, 59, 59);
        this.use12Hours = false;
        this.minuteStep = 1;
        this.data = [];
        this.mask = true;
        this.title = '';
        this.okText = '确定';
        this.dismissText = '取消';
        this.disabled = false;
        this.appendToBody = false;
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
    }
    return DatePickerOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function getVelocity() {
    return (function (minInterval, maxInterval) {
        if (minInterval === void 0) { minInterval = 30; }
        if (maxInterval === void 0) { maxInterval = 100; }
        /** @type {?} */
        var _time = 0;
        /** @type {?} */
        var _y = 0;
        /** @type {?} */
        var _velocity = 0;
        /** @type {?} */
        var recorder = {
            record: function (y) {
                /** @type {?} */
                var now = +new Date();
                _velocity = (y - _y) / (now - _time);
                if (now - _time >= minInterval) {
                    _velocity = now - _time <= maxInterval ? _velocity : 0;
                    _y = y;
                    _time = now;
                }
            },
            getVelocity: function (y) {
                if (y !== _y) {
                    recorder.record(y);
                }
                return _velocity;
            },
        };
        return recorder;
    })();
}

var velocity = /*#__PURE__*/Object.freeze({
    getVelocity: getVelocity
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerComponent$1 = /** @class */ (function () {
    function DatePickerComponent(elementRef, options, localeProviderService) {
        this.elementRef = elementRef;
        this.options = options;
        this.localeProviderService = localeProviderService;
        this.transitionName = 'am-slide-up-enter am-slide-up-enter-active';
        this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
        this.modeSwitch = [1, 1, 1, 1, 1, 1];
        this.localMinDate = [];
        this.localMaxDate = [];
        this.currentTime = [];
        this.indexArray = [];
        this.min_date = [];
        this.max_date = [];
        this.current_time = [
            new Date().getFullYear(),
            new Date().getMonth() + 1,
            new Date().getDate(),
            new Date().getHours(),
            new Date().getMinutes()
        ];
        this.clos = 0;
        this.resultArr = [];
        this.data = [];
        this.dataWithStr = [];
        this.startY = 0;
        this.differY = 0;
        this.currentY = 0;
        this.len = 0;
        this.dom = null;
        this.index = 0;
        this.maxY = 0;
        this.lineHeight = 34;
        this.selectedTarget = [];
        this.isMouseDown = false;
        this.localeNew = {};
        this.unsubscribe$ = new Subject();
        this.Velocity = getVelocity();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask')) {
            return;
        }
        this.isMouseDown = true;
        event.preventDefault();
        this.dom = event.target.parentElement.children[2];
        this.len = this.dom.children.length;
        this.maxY = -(this.len - 1);
        if (this.dom.style.transform === 'translateY(0px)') {
            this.currentY = 0;
            this.maxY = -(this.len - 1);
        }
        else if (this.selectedTarget.length > 0) {
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    _this.currentY = item.currentY;
                }
            });
        }
        /** @type {?} */
        var ev = this.getEventTarget(event);
        this.startY = ev.clientY;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var ev = this.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        this.Velocity.record(this.differY);
        this.dom.style.transition = 'transform 0s';
        this.dom.style.transform = "translateY(" + (this.currentY * this.lineHeight + this.differY) + "px)";
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        this.isMouseDown = false;
        event.preventDefault();
        /** @type {?} */
        var ev = this.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        /** @type {?} */
        var time = 0.3;
        /** @type {?} */
        var velocityTemp = this.Velocity.getVelocity(this.differY) * 4;
        if (velocityTemp) {
            this.differY = velocityTemp * 40 + this.differY;
            time = Math.abs(velocityTemp) * 0.1;
        }
        this.dom.style.transition = 'transform ' + (time < 0.3 ? 0.3 : time) + 's';
        if (this.differY <= -this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY <= this.maxY) {
                this.currentY = this.maxY;
            }
        }
        else if (this.differY >= this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY >= 0) {
                this.currentY = 0;
            }
        }
        if (this.selectedTarget.length > 0) {
            /** @type {?} */
            var hasKey_1 = false;
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    hasKey_1 = true;
                    item.targetId = event.target.id;
                    item.currentY = _this.currentY;
                }
            });
            if (!hasKey_1) {
                this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
            }
        }
        else {
            this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
        }
        this.dom.style.transform = "translateY(" + this.currentY * this.lineHeight + "px)";
        this.index = Math.floor(Math.abs(this.currentY / 1)); // 记录当前位移在数组中的索引,必须取整，否则会出现浮点数
        this.current_time[this.indexArray[parseInt(event.target.id, 0)]] = this.resultArr[this.indexArray[parseInt(event.target.id, 0)]] = this.data[parseInt(event.target.id, 0)][this.index];
        if (this.judgeTime(this.current_time, this.max_date)) {
            this.currentTime = this.current_time = this.max_date.slice(0, this.indexArray.length);
            this.resultArr = this.current_time;
            this.options.onValueChange.emit(this.handleReslut());
            this.init();
        }
        else if (this.judgeTime(this.min_date, this.current_time)) {
            this.currentTime = this.current_time = this.min_date.slice(0, this.indexArray.length);
            this.resultArr = this.currentTime;
            this.options.onValueChange.emit(this.handleReslut());
            this.init();
        }
        else {
            this.setCurrentSelected(0, this.differY < 0, this.index);
            this.options.onValueChange.emit(this.handleReslut());
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.initResult();
        this.checkTime();
        this.initReady();
        this.getInitValueIndex();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.reloadPicker = /**
     * @return {?}
     */
    function () {
        if (!this.picker || this.picker === undefined) {
            return;
        }
        this.currentPicker = this.picker.element.nativeElement;
        if (this.currentPicker && this.currentPicker.children.length > 0) {
            /** @type {?} */
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.localeProvider = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (self.options.locale || self.options.locale !== undefined) {
            self.localeProviderService.setLocale(self.options.locale);
        }
        self.localeProviderService.localeChange.pipe(takeUntil(self.unsubscribe$)).subscribe(function (_) {
            self.options.locale = self.localeProviderService.getLocale();
            self.localeNew = self.localeProviderService.getLocaleSubObj('DatePicker');
            self.options.okText = self.localeNew.okText;
            self.options.dismissText = self.localeNew.dismissText;
            self.init();
        });
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.transformDateFormat = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (!date || date === '') {
            return '';
        }
        else {
            return 'yyyy-mm-dd-HH-MM'
                .replace('yyyy', date.getFullYear() + '')
                .replace('mm', date.getMonth() + 1 + '')
                .replace('dd', date.getDate() + '')
                .replace('HH', date.getHours() + '')
                .replace('MM', date.getMinutes() + '');
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    DatePickerComponent.prototype.preZero = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return val < 10 ? '0' + val : val + '';
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.getInitValueIndex = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectedTarget = [];
        this.indexArray.map(function (index, i) {
            _this.data.forEach(function (item, j) {
                item.forEach(function (item1, k) {
                    if (_this.currentTime[index] === item1 && i === j) {
                        _this.selectedTarget.push({ targetId: "" + i, currentY: -k });
                    }
                });
            });
        });
        this.reloadPicker();
    };
    /**
     * @param {?} mode
     * @return {?}
     */
    DatePickerComponent.prototype.checkMode = /**
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        this.modeSwitch = [1, 1, 1, 1, 1, 1];
        switch (mode) {
            case 'date':
                this.modeSwitch = [1, 1, 1, 0, 0, 0];
                break;
            case 'time':
                if (this.options.use12Hours) {
                    this.modeSwitch = [0, 0, 0, 1, 1, 1];
                }
                else {
                    this.modeSwitch = [0, 0, 0, 1, 1, 0];
                }
                break;
            case 'datetime':
                if (this.options.use12Hours) {
                    this.modeSwitch = [1, 1, 1, 1, 1, 1];
                }
                else {
                    this.modeSwitch = [1, 1, 1, 1, 1, 0];
                }
                break;
            case 'year':
                this.modeSwitch = [1, 0, 0, 0, 0];
                break;
            case 'month':
                this.modeSwitch = [1, 1, 0, 0, 0];
                break;
            default:
                break;
        }
        /** @type {?} */
        var tempIndexArray = [];
        for (var i = 0; i < this.modeSwitch.length; i++) {
            if (this.modeSwitch[i] > 0) {
                tempIndexArray.push(i);
            }
        }
        this.clos = tempIndexArray[tempIndexArray.length - 1] - tempIndexArray[0] + 1;
        this.indexArray = tempIndexArray;
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.initResult = /**
     * @return {?}
     */
    function () {
        this.resultArr = [];
        if (this.currentTime.length > 0) {
            this.current_time = this.currentTime;
        }
        for (var i = 0; i < this.clos; i++) {
            /** @type {?} */
            var res = this.currentTime[i];
            if (this.options.mode === 'time') {
                this.resultArr = this.currentTime;
            }
            else {
                this.resultArr.push(res);
            }
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.checkTime = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var min_Date = this.transformDateFormat(this.options.minDate).split('-');
        if (min_Date.length > 0) {
            this.min_date = min_Date.map(function (item) {
                return parseInt(item, 0);
            });
        }
        /** @type {?} */
        var max_Date = this.transformDateFormat(this.options.maxDate).split('-');
        if (max_Date.length > 0) {
            this.max_date = max_Date.map(function (item) {
                return parseInt(item, 0);
            });
        }
        /** @type {?} */
        var min_date = this.min_date;
        /** @type {?} */
        var max_date = this.max_date;
        /** @type {?} */
        var current_time = this.current_time;
        this.localMinDate = [];
        if (this.localMinDate.length === 0) {
            for (var index = 0; index < this.indexArray.length; index++) {
                this.localMinDate.push(min_date[this.indexArray[index]]);
            }
        }
        this.localMaxDate = [];
        if (this.localMaxDate.length === 0) {
            for (var index = 0; index < this.indexArray.length; index++) {
                this.localMaxDate.push(max_date[this.indexArray[index]]);
            }
        }
        if (this.indexArray.length === this.localMinDate.length &&
            this.localMinDate.length === this.localMaxDate.length &&
            this.localMaxDate.length === this.currentTime.length) {
            /** @type {?} */
            var _indexArrayIndex = 0;
            for (var i = 0; i < this.modeSwitch.length; i++) {
                if (this.modeSwitch[i] === 0) {
                    switch (i) {
                        case 0:
                            min_date[i] = new Date().getFullYear();
                            max_date[i] = new Date().getFullYear();
                            break;
                        case 1:
                            min_date[i] = new Date().getMonth() + 1;
                            max_date[i] = new Date().getMonth() + 1;
                            break;
                        case 2:
                            min_date[i] = new Date().getDate();
                            max_date[i] = new Date().getDate();
                            break;
                        case 3:
                            min_date[i] = new Date().getHours();
                            max_date[i] = new Date().getHours();
                            break;
                        case 4:
                            min_date[i] = new Date().getMinutes();
                            max_date[i] = new Date().getMinutes();
                            break;
                        case 5:
                            min_date[i] = 0;
                            max_date[i] = 1;
                            break;
                    }
                }
                else {
                    switch (i) {
                        case 0:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] >= 1900
                                    ? this.localMinDate[_indexArrayIndex]
                                    : new Date().getFullYear();
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] >= 1900
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : new Date().getFullYear() + 1;
                            current_time[i] = this.currentTime[_indexArrayIndex];
                            break;
                        case 1:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] > 0 && this.localMinDate[_indexArrayIndex] <= 12
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 1;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] > 0 && this.localMaxDate[_indexArrayIndex] <= 12
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : 12;
                            current_time[i] = this.currentTime[_indexArrayIndex];
                            break;
                        case 2:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] > 0 &&
                                    this.localMinDate[_indexArrayIndex] <= new Date(min_date[0], min_date[1], 0).getDate()
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 1;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] > 0 &&
                                    this.localMaxDate[_indexArrayIndex] <= new Date(max_date[0], max_date[1], 0).getDate()
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : new Date(max_date[0], max_date[1], 0).getDate();
                            current_time[i] = this.currentTime[_indexArrayIndex];
                            break;
                        case 3:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] >= 0 && this.localMinDate[_indexArrayIndex] <= 23
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 0;
                            if (this.options.use12Hours) {
                                this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                    this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 11
                                        ? this.localMaxDate[_indexArrayIndex]
                                        : 11;
                            }
                            else {
                                this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                    this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 23
                                        ? this.localMaxDate[_indexArrayIndex]
                                        : 23;
                            }
                            current_time[i] = this.currentTime[_indexArrayIndex];
                            break;
                        case 4:
                            this.localMinDate[_indexArrayIndex] = min_date[i] =
                                this.localMinDate[_indexArrayIndex] >= 0 && this.localMinDate[_indexArrayIndex] <= 59
                                    ? this.localMinDate[_indexArrayIndex]
                                    : 0;
                            this.localMaxDate[_indexArrayIndex] = max_date[i] =
                                this.localMaxDate[_indexArrayIndex] >= 0 && this.localMaxDate[_indexArrayIndex] <= 59
                                    ? this.localMaxDate[_indexArrayIndex]
                                    : 59;
                            current_time[i] = this.currentTime[_indexArrayIndex];
                            break;
                    }
                    _indexArrayIndex++;
                }
            }
            /** @type {?} */
            var minT = new Date(min_date[0], min_date[1], min_date[2], min_date[3], min_date[4]).getTime();
            /** @type {?} */
            var maxT = new Date(max_date[0], max_date[1], max_date[2], max_date[3], max_date[4]).getTime();
            /** @type {?} */
            var curT = new Date(current_time[0], current_time[1], current_time[2], current_time[3], current_time[4]).getTime();
            return minT <= curT && curT <= maxT;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} arr1
     * @param {?} arr2
     * @return {?}
     */
    DatePickerComponent.prototype.judgeTime = /**
     * @param {?} arr1
     * @param {?} arr2
     * @return {?}
     */
    function (arr1, arr2) {
        /** @type {?} */
        var date1;
        /** @type {?} */
        var date2;
        date1 = arr1.slice(0, 3).join('-') + ' ' + arr1.slice(3, 5).join(':');
        date2 = arr2.slice(0, 3).join('-') + ' ' + arr2.slice(3, 5).join(':');
        return new Date(date1).getTime() >= new Date(date2).getTime();
    };
    /**
     * @param {?} arr1
     * @param {?} arr2
     * @param {?} length
     * @return {?}
     */
    DatePickerComponent.prototype.judgeEqualArray = /**
     * @param {?} arr1
     * @param {?} arr2
     * @param {?} length
     * @return {?}
     */
    function (arr1, arr2, length) {
        /** @type {?} */
        var status = true;
        for (var i = 0; i < length; i++) {
            if (arr1[i] != arr2[i]) {
                status = false;
            }
        }
        return status;
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.initReady = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var realIdx = 0;
        for (var i = 0; i < this.clos; i++) {
            realIdx = this.indexArray[i];
            /** @type {?} */
            var min = 0;
            /** @type {?} */
            var max = 0;
            /** @type {?} */
            var tempArray = [];
            switch (realIdx) {
                case 0:
                    this.initData(tempArray, this.localMinDate[i], this.localMaxDate[i], this.localeNew.year, i);
                    break;
                case 1:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 1) ? this.localMinDate[i] : 1;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 1) ? this.localMaxDate[i] : 12;
                    this.initData(tempArray, min, max, this.localeNew.month, i);
                    break;
                case 2:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 2) ? this.localMinDate[i] : 1;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 2)
                        ? this.localMaxDate[i]
                        : new Date(this.current_time[0], this.current_time[1], 0).getDate();
                    this.initData(tempArray, min, max, this.localeNew.day, i);
                    break;
                case 3:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 3) ? this.localMinDate[i] : 0;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 3) ? this.localMaxDate[i] : 23;
                    this.initData(tempArray, min, max, this.localeNew.hour, i);
                    break;
                case 4:
                    min = this.judgeEqualArray(this.min_date, this.current_time, 4) ? this.localMinDate[i] : 0;
                    max = this.judgeEqualArray(this.max_date, this.current_time, 4) ? this.localMaxDate[i] : 59;
                    this.initData(tempArray, min, max, this.localeNew.minute, i);
                    break;
                case 5:
                    min = 0;
                    max = 1;
                    this.initData(tempArray, min, max, 'use12Hours', i);
                    break;
            }
        }
    };
    /**
     * @param {?} tempArr
     * @param {?} min
     * @param {?} max
     * @param {?} str
     * @param {?} idx
     * @return {?}
     */
    DatePickerComponent.prototype.initData = /**
     * @param {?} tempArr
     * @param {?} min
     * @param {?} max
     * @param {?} str
     * @param {?} idx
     * @return {?}
     */
    function (tempArr, min, max, str, idx) {
        /** @type {?} */
        var dataWithStr = [];
        for (min; min < max + 1; min++) {
            tempArr.push(min);
            dataWithStr.push(min + str);
        }
        if (this.data.length > this.indexArray.length) {
            this.data = [];
            this.dataWithStr = [];
        }
        if (this.data.length > idx && this.data[idx].toString() !== tempArr.toString()) {
            this.data[idx] = tempArr;
        }
        else if (this.data.length > idx && this.data[idx].toString() === tempArr.toString()) {
            this.data[idx] = tempArr;
        }
        else {
            this.data.push(tempArr);
        }
        if (this.options.locale === undefined || this.options.locale.locale === 'zh_CN') {
            if (this.dataWithStr.length > idx && this.dataWithStr[idx].toString() !== dataWithStr.toString()) {
                this.dataWithStr[idx] = dataWithStr;
            }
            else if (this.dataWithStr.length > idx && this.dataWithStr[idx].toString() === dataWithStr.toString()) {
                this.dataWithStr[idx] = dataWithStr;
            }
            else {
                this.dataWithStr.push(dataWithStr);
            }
        }
        else {
            this.dataWithStr = this.data;
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        this.options.onOk.emit(this.handleReslut());
        this.setTransitionName();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.handleReslut = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = '';
        if (this.options.mode === 'datetime' || this.options.mode === 'time') {
            /** @type {?} */
            var temp = this.resultArr;
            result = temp.slice(0, 3).join('-') + ' ' + temp.slice(3, 5).join(':');
        }
        else {
            result = this.resultArr.map(function (v) { return v; }).join('-');
        }
        this.resultDate = new Date(result.replace(/-/g, '/'));
        if (this.options.minDate.getTime() > this.resultDate.getTime()) {
            if (this.resultArr.length > 0) {
                for (var index = 0; index < this.resultArr.length; index++) {
                    this.resultArr = this.min_date;
                    this.currentTime = this.resultArr;
                    this.current_time = this.currentTime;
                }
            }
            this.resultDate = this.options.minDate;
        }
        return this.resultDate;
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.options.onDismiss.emit();
        this.setTransitionName();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.setTransitionName = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transitionName = 'am-slide-up-leave am-slide-up-leave-active';
        this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
        setTimeout(function () {
            _this.options.hidePicker();
        }, 200);
    };
    /**
     * @param {?} checkIdx
     * @param {?} sta
     * @param {?} indexT
     * @return {?}
     */
    DatePickerComponent.prototype.setCurrentSelected = /**
     * @param {?} checkIdx
     * @param {?} sta
     * @param {?} indexT
     * @return {?}
     */
    function (checkIdx, sta, indexT) {
        if (checkIdx >= this.clos - 1) {
            return;
        }
        /** @type {?} */
        var status = null;
        if (sta) {
            status = this.judgeEqualArray(this.min_date, this.resultArr, checkIdx + 1);
        }
        else {
            status = this.judgeEqualArray(this.max_date, this.resultArr, checkIdx + 1);
        }
        if (!status) {
            /** @type {?} */
            var min = 0;
            /** @type {?} */
            var max = 0;
            /** @type {?} */
            var str = '';
            /** @type {?} */
            var realIdx = this.indexArray[checkIdx];
            switch (realIdx) {
                case 0:
                    min = 1;
                    max = 12;
                    str = '月';
                    break;
                case 1:
                    min = 1;
                    max = new Date(this.current_time[0], this.current_time[1], 0).getDate();
                    str = '日';
                    break;
                case 2:
                    min = 0;
                    max = 23;
                    str = '时';
                    break;
                case 3:
                    min = 0;
                    max = 59;
                    str = '分';
                    break;
            }
            this.initRangeArr(min, max, indexT, checkIdx + 1, str);
        }
        this.setCurrentSelected(checkIdx + 1, sta, indexT);
    };
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} indexT
     * @param {?} checkIdx
     * @param {?} str
     * @return {?}
     */
    DatePickerComponent.prototype.initRangeArr = /**
     * @param {?} min
     * @param {?} max
     * @param {?} indexT
     * @param {?} checkIdx
     * @param {?} str
     * @return {?}
     */
    function (min, max, indexT, checkIdx, str) {
        var _this = this;
        /** @type {?} */
        var realIdx = this.indexArray[checkIdx];
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var targetLong = 0;
        for (var index = min; index < max + 1; index++) {
            arr.push(index);
        }
        if (arr.indexOf(this.resultArr[checkIdx]) == -1) {
            if (-this.selectedTarget[checkIdx].currentY > max - min) {
                indexT = max - min;
                this.selectedTarget[checkIdx].currentY = -indexT;
            }
            targetLong = -arr.length * this.lineHeight;
        }
        else {
            targetLong = -arr.indexOf(this.resultArr[checkIdx]) * this.lineHeight;
            this.selectedTarget[checkIdx].currentY = -arr.indexOf(this.resultArr[checkIdx]);
        }
        if (this.data[checkIdx].toString() !== arr.toString()) {
            this.current_time[realIdx] = -targetLong / this.lineHeight + 1;
            this.resultArr[checkIdx] = -targetLong / this.lineHeight + 1;
            this.data[checkIdx] = arr;
            this.dataWithStr[checkIdx] =
                this.options.locale.locale === 'zh_CN'
                    ? arr.map(function (item) {
                        return item + str;
                    })
                    : arr;
            setTimeout(function () {
                _this.selectedTarget.forEach(function (item, i) {
                    if (i >= checkIdx) {
                        _this.currentPicker.children[i].children[2].style.transition = '';
                        /** @type {?} */
                        var index = parseInt(item.currentY, 0);
                        _this.currentPicker.children[i].children[2].style.transform = "translateY(" + index * _this.lineHeight + "px)";
                    }
                });
            }, 0);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.getEventTarget = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type === 'mousedown' ||
            event.type === 'mousemove' ||
            event.type === 'mouseup' ||
            event.type === 'mouseleave') {
            return event;
        }
        else {
            if (event && event.changedTouches && event.changedTouches[0]) {
                return event.changedTouches[0];
            }
            return null;
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.localeProvider();
        this.checkMode(this.options.mode);
        /** @type {?} */
        var value = this.transformDateFormat(this.options.value).split('-');
        if (value.length > 0) {
            this.currentTime = value.map(function (item) {
                return parseInt(item, 0);
            });
        }
        this.init();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.reloadPicker();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DatePicker, nzm-date-picker',
                    template: "<div *ngIf=\"options.mask\" class=\"am-picker-popup-mask {{maskTransitionName}}\" (click)=\"cancel()\"></div>\n<div class=\"am-picker-popup {{transitionName}}\" style=\"z-index: 1001\">\n  <div class=\"am-picker-popup-content\">\n    <div class=\"am-picker-popup-body\">\n      <div>\n        <div class=\"am-picker-popup-header\">\n          <div class=\"am-picker-popup-item am-picker-popup-header-left\"\n               (click)=\"cancel()\"\n          >\n            {{options.dismissText}}\n          </div>\n          <div class=\"am-picker-popup-item am-picker-popup-title\">{{options.title}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-header-right\"\n               (click)=\"ok()\"\n          >\n            {{options.okText}}\n          </div>\n        </div>\n        <div #picker\n             class=\"am-picker\"\n             style=\"flex-direction: row; align-items: center;\"\n        >\n          <div *ngFor=\"let item of dataWithStr; let i = index\" class=\"am-picker-col\">\n            <div class=\"am-picker-col-indicator \" style=\"top: 102px;\"></div>\n            <div id={{i}}\n                 class=\"am-picker-col-mask\"\n                 style=\"background-size: 100% 102px;\"\n            ></div>\n            <div class=\"am-picker-col-content\">\n              <div id={{i}}\n                   class=\"am-picker-col-item\"\n                   *ngFor=\"let val of item; let i = index\"\n              >{{val.label?val.label:val}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DatePickerOptions },
        { type: LocaleProviderService }
    ]; };
    DatePickerComponent.propDecorators = {
        picker: [{ type: ViewChild, args: ['picker', { read: ViewContainerRef },] }],
        panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
    };
    return DatePickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerViewComponent = /** @class */ (function (_super) {
    __extends(DatePickerViewComponent, _super);
    function DatePickerViewComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mode = 'date';
        _this.minDate = new Date(2000, 5, 1, 0, 0, 0);
        _this.maxDate = new Date(2030, 1, 1, 23, 59, 59);
        _this.value = new Date();
        _this.disabled = false;
        _this.indicatorStyle = {};
        _this.onValueChange = new EventEmitter();
        _this.amPicker = true;
        return _this;
    }
    Object.defineProperty(DatePickerViewComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this.options.locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.options.locale = value;
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.options.mode = this.mode;
        this.options.minDate = this.minDate;
        this.options.maxDate = this.maxDate;
        this.options.disabled = this.disabled;
        this.options.locale = this.locale;
        this.options.value = this.value;
        this.options.onValueChange = this.onValueChange;
        this.checkMode(this.options.mode);
        /** @type {?} */
        var value = this.transformDateFormat(this.options.value).split('-');
        if (value.length > 0) {
            this.currentTime = value.map(function (item) {
                return parseInt(item, 0);
            });
        }
        this.initResult();
        this.checkTime();
        this.initReady();
        this.getInitValueIndex();
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.reloadPicker = /**
     * @return {?}
     */
    function () {
        if (this.currentPicker) {
            /** @type {?} */
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.localeProvider();
        this.init();
    };
    /**
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.currentPicker = this.elementRef.nativeElement;
        this.reloadPicker();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["value"]) {
            this.options.value = changes["value"].currentValue;
            /** @type {?} */
            var value = this.transformDateFormat(this.options.value).split('-');
            if (value.length > 0) {
                this.currentTime = value.map(function (item) {
                    return parseInt(item, 0);
                });
            }
            if (!this.judgeEqualArray(this.currentTime, this.resultArr, this.resultArr.length) ||
                this.judgeEqualArray(this.currentTime, this.min_date, this.currentTime.length) ||
                this.judgeTime(this.currentTime, this.max_date)) {
                this.init();
            }
        }
        if (changes["mode"] || changes["minDate"] || changes["maxDate"] || changes["disabled"] || changes["locale"]) {
            this.init();
        }
    };
    DatePickerViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DatePickerView, nzm-date-picker-view',
                    template: "<div *ngFor=\"let item of dataWithStr; let i = index\" class=\"am-picker-col\">\n  <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"indicatorStyle\"></div>\n  <div id={{i}} class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\"></div>\n  <div class=\"am-picker-col-content\">\n    <div id={{i}} *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\">{{val.label?val.label:val}}</div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    DatePickerViewComponent.propDecorators = {
        mode: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        indicatorStyle: [{ type: Input }],
        locale: [{ type: Input }],
        onValueChange: [{ type: Output }],
        amPicker: [{ type: HostBinding, args: ['class.am-picker',] }]
    };
    return DatePickerViewComponent;
}(DatePickerComponent$1));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerDirective = /** @class */ (function () {
    function DatePickerDirective(_viewContainerRef, _elm, _defaultOptions, _cfr) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._eventListeners = [];
        this.value = new Date();
        this.onVisibleChange = new EventEmitter(true);
        this.onValueChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.showPicker = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.picker) {
            setTimeout(function () {
                _this._eventListeners = [];
            });
            /** @type {?} */
            var options_1 = new DatePickerOptions();
            Object.assign(options_1, this._defaultOptions, {
                hidePicker: function (event) {
                    _this.hidePicker();
                }
            });
            /** @type {?} */
            var optionalParams = [
                'mode',
                'minDate',
                'maxDate',
                'value',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'locale',
                'appendToBody',
                'onOk',
                'onDismiss',
                'onValueChange'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    (/** @type {?} */ (options_1))[param] = _this[param];
                }
            });
            /** @type {?} */
            var componentFactory = this._cfr.resolveComponentFactory(DatePickerComponent$1);
            /** @type {?} */
            var childInjector = Injector.create([
                {
                    provide: DatePickerOptions,
                    useValue: options_1
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.hidePicker = /**
     * @return {?}
     */
    function () {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onVisibleChange.emit(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["isOpen"]) {
            if (changes["isOpen"].currentValue === true) {
                this.showPicker();
            }
            else {
                this.hidePicker();
            }
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hidePicker();
    };
    DatePickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[DatePicker]'
                },] }
    ];
    /** @nocollapse */
    DatePickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: DatePickerOptions },
        { type: ComponentFactoryResolver }
    ]; };
    DatePickerDirective.propDecorators = {
        isOpen: [{ type: Input }],
        mode: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        use12Hours: [{ type: Input }],
        value: [{ type: Input }],
        mask: [{ type: Input }],
        title: [{ type: Input }],
        okText: [{ type: Input }],
        dismissText: [{ type: Input }],
        disabled: [{ type: Input }],
        locale: [{ type: Input }],
        appendToBody: [{ type: Input }],
        onVisibleChange: [{ type: Output }],
        onValueChange: [{ type: Output }],
        onOk: [{ type: Output }],
        onDismiss: [{ type: Output }],
        togglePicker: [{ type: HostListener, args: ['click',] }]
    };
    return DatePickerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerModule = /** @class */ (function () {
    function DatePickerModule() {
    }
    DatePickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, LocaleProviderModule],
                    exports: [DatePickerComponent$1, DatePickerDirective],
                    declarations: [DatePickerComponent$1, DatePickerDirective],
                    entryComponents: [DatePickerComponent$1],
                    providers: [DatePickerOptions, LocaleProviderModule]
                },] }
    ];
    return DatePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DatePickerViewModule = /** @class */ (function () {
    function DatePickerViewModule() {
    }
    DatePickerViewModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, DatePickerModule, LocaleProviderModule],
                    exports: [DatePickerViewComponent],
                    declarations: [DatePickerViewComponent],
                    providers: [LocaleProviderModule]
                },] }
    ];
    return DatePickerViewModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CalendarModule = /** @class */ (function () {
    function CalendarModule() {
    }
    CalendarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule, DatePickerViewModule, LocaleProviderModule],
                    declarations: [
                        CalendarComponent,
                        HeaderComponent,
                        DatePickerComponent,
                        WeekPanelComponent,
                        SingleMonthComponent,
                        ConfirmPanelComponent,
                        TimePickerComponent,
                        ShortcutPanelComponent
                    ],
                    exports: [
                        CalendarComponent,
                        HeaderComponent,
                        DatePickerComponent,
                        WeekPanelComponent,
                        SingleMonthComponent,
                        ConfirmPanelComponent,
                        TimePickerComponent,
                        ShortcutPanelComponent
                    ],
                    providers: [LocaleProviderModule]
                },] }
    ];
    return CalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverItemComponent = /** @class */ (function () {
    function PopoverItemComponent(_elementRef) {
        this._elementRef = _elementRef;
        this.defaultProps = {
            prefixCls: 'am-popover',
            disabled: false
        };
        this.isActive = false;
        this.select = new EventEmitter();
        this.amPopoverItem = true;
    }
    Object.defineProperty(PopoverItemComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopoverItemComponent.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._style = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopoverItemComponent.prototype, "disabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopoverItemComponent.prototype, "amPopoverItemActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopoverItemComponent.prototype, "amPopoverItemDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    PopoverItemComponent.prototype.touchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.select.emit();
        this.isActive = true;
    };
    /**
     * @return {?}
     */
    PopoverItemComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () { };
    PopoverItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'PopoverItem, nzm-popover-item',
                    template: "<div class=\"{{defaultProps.prefixCls}}-item-container\">\n  <span class=\"{{defaultProps.prefixCls}}-item-icon\" aria-hidden=\"true\">\n    <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n  </span>\n  <span class=\"{{defaultProps.prefixCls}}-item-content\">\n    <ng-content></ng-content>\n  </span>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PopoverItemComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PopoverItemComponent.propDecorators = {
        icon: [{ type: Input }],
        style: [{ type: Input }],
        disabled: [{ type: Input }],
        select: [{ type: Output }],
        amPopoverItem: [{ type: HostBinding, args: ['class.am-popover-item',] }],
        amPopoverItemActive: [{ type: HostBinding, args: ['class.am-popover-item-active',] }],
        amPopoverItemDisabled: [{ type: HostBinding, args: ['class.am-popover-item-disabled',] }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return PopoverItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopoverItemModule = /** @class */ (function () {
    function PopoverItemModule() {
    }
    PopoverItemModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule],
                    exports: [PopoverItemComponent],
                    declarations: [PopoverItemComponent]
                },] }
    ];
    return PopoverItemModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FlexComponent = /** @class */ (function () {
    function FlexComponent() {
        this.defaultProps = {
            prefixCls: 'am-flexbox',
            align: 'center'
        };
        this._direction = '';
        this._justify = '';
        this._alignContent = '';
        this.amFlexbox = true;
    }
    Object.defineProperty(FlexComponent.prototype, "direction", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "wrap", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._wrap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "justify", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._justify = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "align", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.align = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "alignContent", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._alignContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxDirRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction === 'row';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxDirRowReverse", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction === 'row-reverse';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxDirColumn", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction === 'column';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxDirColumnReverse", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction === 'column-reverse';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxNowrap", {
        get: /**
         * @return {?}
         */
        function () {
            return this._wrap === 'nowrap';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxWrap", {
        get: /**
         * @return {?}
         */
        function () {
            return this._wrap === 'wrap';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxWrapReverse", {
        get: /**
         * @return {?}
         */
        function () {
            return this._wrap === 'wrap-reverse';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxJustifyStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._justify === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxJustifyCenter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._justify === 'center';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxJustifyEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._justify === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxJustifyBetween", {
        get: /**
         * @return {?}
         */
        function () {
            return this._justify === 'between';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignAround", {
        get: /**
         * @return {?}
         */
        function () {
            return this._justify === 'around';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.align === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignCenter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.align === 'center';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.align === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignBaseline", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.align === 'baseline';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignStretch", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.align === 'stretch';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignContentStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignCotentCenter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'center';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignContentEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'end';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignContentBetween", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'between';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignContentAround", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'around';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexComponent.prototype, "amFlexboxAlignContentStretch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alignContent === 'stretch';
        },
        enumerable: true,
        configurable: true
    });
    FlexComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Flex, nzm-flex',
                    template: "<ng-content></ng-content>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    FlexComponent.ctorParameters = function () { return []; };
    FlexComponent.propDecorators = {
        direction: [{ type: Input }],
        wrap: [{ type: Input }],
        justify: [{ type: Input }],
        align: [{ type: Input }],
        alignContent: [{ type: Input }],
        amFlexbox: [{ type: HostBinding, args: ['class.am-flexbox',] }],
        amFlexboxDirRow: [{ type: HostBinding, args: ['class.am-flexbox-dir-row',] }],
        amFlexboxDirRowReverse: [{ type: HostBinding, args: ['class.am-flexbox-dir-row-reverse',] }],
        amFlexboxDirColumn: [{ type: HostBinding, args: ['class.am-flexbox-dir-column',] }],
        amFlexboxDirColumnReverse: [{ type: HostBinding, args: ['class.am-flexbox-dir-column-reverse',] }],
        amFlexboxNowrap: [{ type: HostBinding, args: ['class.am-flexbox-nowrap',] }],
        amFlexboxWrap: [{ type: HostBinding, args: ['class.am-flexbox-wrap',] }],
        amFlexboxWrapReverse: [{ type: HostBinding, args: ['class.am-flexbox-wrap-reverse',] }],
        amFlexboxJustifyStart: [{ type: HostBinding, args: ['class.am-flexbox-justify-start',] }],
        amFlexboxJustifyCenter: [{ type: HostBinding, args: ['class.am-flexbox-justify-center',] }],
        amFlexboxJustifyEnd: [{ type: HostBinding, args: ['class.am-flexbox-justify-end',] }],
        amFlexboxJustifyBetween: [{ type: HostBinding, args: ['class.am-flexbox-justify-between',] }],
        amFlexboxAlignAround: [{ type: HostBinding, args: ['class.am-flexbox-justify-around',] }],
        amFlexboxAlignStart: [{ type: HostBinding, args: ['class.am-flexbox-align-start',] }],
        amFlexboxAlignCenter: [{ type: HostBinding, args: ['class.am-flexbox-align-center',] }],
        amFlexboxAlignEnd: [{ type: HostBinding, args: ['class.am-flexbox-align-end',] }],
        amFlexboxAlignBaseline: [{ type: HostBinding, args: ['class.am-flexbox-align-baseline',] }],
        amFlexboxAlignStretch: [{ type: HostBinding, args: ['class.am-flexbox-align-stretch',] }],
        amFlexboxAlignContentStart: [{ type: HostBinding, args: ['class.am-flexbox-align-content-start',] }],
        amFlexboxAlignCotentCenter: [{ type: HostBinding, args: ['class.am-flexbox-align-content-center',] }],
        amFlexboxAlignContentEnd: [{ type: HostBinding, args: ['class.am-flexbox-align-content-end',] }],
        amFlexboxAlignContentBetween: [{ type: HostBinding, args: ['class.am-flexbox-align-content-between',] }],
        amFlexboxAlignContentAround: [{ type: HostBinding, args: ['class.am-flexbox-align-content-around',] }],
        amFlexboxAlignContentStretch: [{ type: HostBinding, args: ['class.am-flexbox-align-content-stretch',] }]
    };
    return FlexComponent;
}());
var FlexItemComponent = /** @class */ (function () {
    function FlexItemComponent() {
        this.defaultProps = {
            prefixCls: 'am-flexbox',
            align: 'center'
        };
        this.flexboxItem = true;
    }
    FlexItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'FlexItem, nzm-flex-item',
                    template: "\n    <ng-content></ng-content>\n  ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    FlexItemComponent.propDecorators = {
        flexboxItem: [{ type: HostBinding, args: ['class.am-flexbox-item',] }]
    };
    return FlexItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FlexModule = /** @class */ (function () {
    function FlexModule() {
    }
    FlexModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [FlexComponent, FlexItemComponent],
                    declarations: [FlexComponent, FlexItemComponent]
                },] }
    ];
    return FlexModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GridComponent = /** @class */ (function () {
    function GridComponent() {
        this.wrapCls = {};
        this.itemCls = {};
        this.carouselProps = {
            dots: false,
            dragging: false
        };
        this.defaultProps = {
            data: [],
            hasLine: true,
            isCarousel: false,
            columnNum: 4,
            carouselMaxRow: 2,
            prefixCls: 'am-grid',
            square: true,
            itemStyle: {}
        };
        this.carouselData = [];
        this.carouselDataTmp = [];
        this.gridData = [];
        this._data = [];
        this.columnNum = 4;
        this.carouselMaxRow = 2;
        this.itemStyle = {};
        this.square = true;
        this.hasLine = true;
        this.activeStyle = true;
        this.OnClick = new EventEmitter();
        this.amGrid = true;
    }
    Object.defineProperty(GridComponent.prototype, "isCarousel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultProps.isCarousel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.isCarousel = value;
            this.init();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "data", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value;
            this.init();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "amGridSquare", {
        get: /**
         * @return {?}
         */
        function () {
            return true === this.square;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "amGridLine", {
        get: /**
         * @return {?}
         */
        function () {
            return true === this.hasLine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "amGridCarousel", {
        get: /**
         * @return {?}
         */
        function () {
            return true === this.isCarousel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    GridComponent.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    GridComponent.prototype.isURL = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value.indexOf('http') >= 0;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    GridComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dataLength = (this._data && this._data.length) || 0;
        /** @type {?} */
        var rowCount = Math.ceil(dataLength / this.columnNum);
        /** @type {?} */
        var rowsArr;
        if (this.defaultProps.isCarousel) {
            if (rowCount % this.carouselMaxRow !== 0) {
                rowCount = rowCount + this.carouselMaxRow - (rowCount % this.carouselMaxRow);
            }
            /** @type {?} */
            var pageCount = Math.ceil(rowCount / this.carouselMaxRow);
            rowsArr = this.getRows(rowCount, dataLength);
            if (pageCount <= 1) {
                this.carouselProps = {
                    dots: false,
                    dragging: false
                };
            }
            else {
                this.carouselProps = {
                    dots: true,
                    dragging: true
                };
            }
            this.carouselDataTmp = this.getCarouselData(rowsArr, pageCount, rowCount);
        }
        else {
            this.gridData = this.getRows(rowCount, dataLength);
        }
    };
    /**
     * @param {?} rowsArr
     * @param {?} pageCount
     * @param {?} rowCount
     * @return {?}
     */
    GridComponent.prototype.getCarouselData = /**
     * @param {?} rowsArr
     * @param {?} pageCount
     * @param {?} rowCount
     * @return {?}
     */
    function (rowsArr, pageCount, rowCount) {
        /** @type {?} */
        var pagesArr = [];
        for (var pageIndex = 0; pageIndex < pageCount; pageIndex++) {
            /** @type {?} */
            var pageRows = [];
            for (var ii = 0; ii < this.carouselMaxRow; ii++) {
                /** @type {?} */
                var rowIndex = pageIndex * this.carouselMaxRow + ii;
                if (rowIndex < rowCount) {
                    pageRows.push(rowsArr[rowIndex]);
                }
                else {
                    // 空节点为了确保末尾页的最后未到底的行有底线(样式中last-child会没线)
                    pageRows.push(null);
                }
            }
            pagesArr.push(pageRows);
        }
        return pagesArr;
    };
    /**
     * @param {?} rowCount
     * @param {?} dataLength
     * @return {?}
     */
    GridComponent.prototype.getRows = /**
     * @param {?} rowCount
     * @param {?} dataLength
     * @return {?}
     */
    function (rowCount, dataLength) {
        /** @type {?} */
        var columnNum = this.columnNum;
        /** @type {?} */
        var rowArr = new Array();
        for (var i = 0; i < rowCount; i++) {
            rowArr[i] = new Array();
            for (var j = 0; j < columnNum; j++) {
                /** @type {?} */
                var dataIndex = i * columnNum + j;
                if (dataIndex < dataLength) {
                    rowArr[i][j] = this._data[dataIndex];
                }
                else {
                    rowArr[i][j] = null;
                }
            }
        }
        return rowArr;
    };
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    GridComponent.prototype.click = /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        /** @type {?} */
        var outputData = {
            data: data,
            index: index
        };
        this.OnClick.emit(outputData);
    };
    /**
     * @return {?}
     */
    GridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a;
        this.itemCls = (_a = {},
            _a[this.defaultProps.prefixCls + "-item"] = true,
            _a[this.defaultProps.prefixCls + "-active-item"] = false,
            _a);
    };
    GridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Grid, nzm-grid',
                    template: "<ng-container *ngIf=\"!isCarousel\">\n  <Flex *ngFor=\"let item of gridData; let i = index;\"\n        [justify]=\"'center'\"\n        [align]=\"'stretch'\"\n  >\n    <FlexItem TouchFeedback\n              *ngFor=\"let subItem of item; let j = index;\"\n              [ngClass]=\"itemCls\"\n              [ngStyle]=\"itemStyle\"\n              [className]=\"['am-grid-item-active']\"\n              [activeStyle]=\"activeStyle\"\n    >\n      <div *ngIf=\"subItem !== null\"\n           class=\"{{defaultProps.prefixCls}}-item-content\"\n           (click)=\"click(subItem,i * columnNum + j)\"\n      >\n        <div class=\"{{defaultProps.prefixCls}}-item-inner-content column-num-{{columnNum}}\">\n          <img *ngIf=\"subItem.icon && isURL(subItem.icon)\"\n               src=\"{{subItem.icon}}\"\n               class=\"{{defaultProps.prefixCls}}-icon\"\n          >\n          <Icon *ngIf=\"subItem.icon && !isURL(subItem.icon)\"\n                [type]=\"subItem.icon\"\n                [size]=\"subItem.size\"\n          ></Icon>\n          <div class=\"{{defaultProps.prefixCls}}-text\">{{subItem.text}}</div>\n        </div>\n      </div>\n      <div *ngIf=\"subItem === null\" class=\"{{defaultProps.prefixCls}}-null-item\"></div>\n    </FlexItem>\n    <ng-content></ng-content>\n  </Flex>\n</ng-container>\n\n<Carousel *ngIf=\"isCarousel && carouselDataTmp.length > 0\"\n          [autoplay]=\"false\"\n          [infinite]=\"true\"\n          [selectedIndex]=\"0\"\n          [autoplayInterval]='3000'\n          [dots]=\"carouselProps.dots\"\n          [dragging]=\"carouselProps.dragging\"\n>\n  <CarouselSlide *ngFor=\"let gridData of carouselDataTmp\"\n                 class=\"{{defaultProps.prefixCls}}-carousel-page\"\n                 style=\"display: block;\"\n  >\n    <Flex *ngFor=\"let item of gridData; let i = index;\"\n          [justify]=\"'center'\"\n          [align]=\"'stretch'\"\n    >\n      <FlexItem TouchFeedback\n                *ngFor=\"let subItem of item; let j = index;\"\n                class=\"{{defaultProps.prefixCls}}-item\"\n                [ngStyle]=\"itemStyle\"\n                [className]=\"['am-grid-item-active']\"\n      >\n        <div *ngIf=\"subItem !== null\"\n             class=\"{{defaultProps.prefixCls}}-item-content\"\n             (click)=\"click(subItem,i * columnNum + j)\"\n        >\n          <div class=\"{{defaultProps.prefixCls}}-item-inner-content column-num-4\">\n            <img class=\"{{defaultProps.prefixCls}}-icon\" src=\"{{subItem.icon}}\">\n            <div class=\"{{defaultProps.prefixCls}}-text\">{{subItem.text}}</div>\n          </div>\n        </div>\n        <div *ngIf=\"subItem === null\" class=\"{{defaultProps.prefixCls}}-null-item\"></div>\n      </FlexItem>\n    </Flex>\n  </CarouselSlide>\n</Carousel>"
                }] }
    ];
    /** @nocollapse */
    GridComponent.ctorParameters = function () { return []; };
    GridComponent.propDecorators = {
        columnNum: [{ type: Input }],
        carouselMaxRow: [{ type: Input }],
        itemStyle: [{ type: Input }],
        square: [{ type: Input }],
        hasLine: [{ type: Input }],
        isCarousel: [{ type: Input }],
        activeStyle: [{ type: Input }],
        data: [{ type: Input }],
        OnClick: [{ type: Output }],
        amGrid: [{ type: HostBinding, args: ['class.am-grid',] }],
        amGridSquare: [{ type: HostBinding, args: ['class.am-grid-square',] }],
        amGridLine: [{ type: HostBinding, args: ['class.am-grid-line',] }],
        amGridCarousel: [{ type: HostBinding, args: ['class.am-grid-carousel',] }]
    };
    return GridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var INTERFACE_TOKEN = new InjectionToken('InterfaceToken');
var TouchFeedbackDirective = /** @class */ (function () {
    function TouchFeedbackDirective(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.activeStyle = true;
        this.clickStart = new EventEmitter();
        this.clickEnd = new EventEmitter();
    }
    /**
     * @param {?} className
     * @return {?}
     */
    TouchFeedbackDirective.prototype.addClass = /**
     * @param {?} className
     * @return {?}
     */
    function (className) {
        this._renderer.addClass(this._elementRef.nativeElement, className);
    };
    /**
     * @param {?} className
     * @return {?}
     */
    TouchFeedbackDirective.prototype.removeClass = /**
     * @param {?} className
     * @return {?}
     */
    function (className) {
        this._renderer.removeClass(this._elementRef.nativeElement, className);
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._className = this.className;
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.touchStart = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this.addClass(this._className);
            this.clickStart.emit();
        }
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.touchEnd = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this.removeClass(this._className);
            this.clickEnd.emit();
        }
    };
    TouchFeedbackDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[TouchFeedback]'
                },] }
    ];
    /** @nocollapse */
    TouchFeedbackDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TouchFeedbackDirective.propDecorators = {
        className: [{ type: Input }],
        activeStyle: [{ type: Input }],
        clickStart: [{ type: Output }],
        clickEnd: [{ type: Output }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }]
    };
    return TouchFeedbackDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TouchFeedBackComponent = /** @class */ (function () {
    function TouchFeedBackComponent(_ele, _render) {
        this._ele = _ele;
        this._render = _render;
        this.activeClassName = '';
        this.activeStyle = true;
    }
    /**
     * @return {?}
     */
    TouchFeedBackComponent.prototype.touchStart = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this._render.addClass(this._ele.nativeElement, this.activeClassName);
        }
    };
    /**
     * @return {?}
     */
    TouchFeedBackComponent.prototype.touchEnd = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this._render.removeClass(this._ele.nativeElement, this.activeClassName);
        }
    };
    TouchFeedBackComponent.decorators = [
        { type: Component, args: [{
                    selector: 'TouchFeedBack',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    TouchFeedBackComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TouchFeedBackComponent.propDecorators = {
        activeClassName: [{ type: Input }],
        activeStyle: [{ type: Input }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }]
    };
    return TouchFeedBackComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PopupService = /** @class */ (function () {
    function PopupService(_overlay, _viewContainerRef) {
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        PopupService.viewContainerRef = this._viewContainerRef;
        PopupService.overlay = this._overlay;
    }
    /**
     * @param {?} component
     * @param {?=} childInjector
     * @return {?}
     */
    PopupService.showPopup = /**
     * @param {?} component
     * @param {?=} childInjector
     * @return {?}
     */
    function (component, childInjector) {
        /** @type {?} */
        var overlayConfig = new OverlayConfig();
        overlayConfig.hasBackdrop = true;
        PopupService.overlayRef = PopupService.overlay.create(overlayConfig);
        PopupService.overlayRef.backdropClick().subscribe(function () {
            PopupService.overlayRef.dispose();
        });
        PopupService.overlayRef.attach(new ComponentPortal(component, PopupService.viewContainerRef, childInjector));
    };
    /**
     * @return {?}
     */
    PopupService.hidePopup = /**
     * @return {?}
     */
    function () {
        if (PopupService.overlayRef) {
            PopupService.overlayRef.dispose();
        }
    };
    PopupService.viewContainerRef = null;
    PopupService.overlay = null;
    PopupService.overlayRef = null;
    PopupService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PopupService.ctorParameters = function () { return [
        { type: Overlay },
        { type: ViewContainerRef }
    ]; };
    return PopupService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CoreModule = /** @class */ (function () {
    function CoreModule() {
    }
    CoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        OverlayModule
                    ],
                    exports: [TouchFeedbackDirective, TouchFeedBackComponent],
                    declarations: [TouchFeedbackDirective, TouchFeedBackComponent],
                    providers: [PopupService]
                },] }
    ];
    return CoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GridModule = /** @class */ (function () {
    function GridModule() {
    }
    GridModule.decorators = [
        { type: NgModule, args: [{
                    imports: [FlexModule, IconModule, CommonModule, CarouselModule, CoreModule],
                    exports: [GridComponent],
                    declarations: [GridComponent]
                },] }
    ];
    return GridModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SafeHTMLPipe = /** @class */ (function () {
    function SafeHTMLPipe(_sanitized) {
        this._sanitized = _sanitized;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    SafeHTMLPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this._sanitized.bypassSecurityTrustHtml(value);
    };
    SafeHTMLPipe.decorators = [
        { type: Pipe, args: [{ name: 'safeHTML' },] }
    ];
    /** @nocollapse */
    SafeHTMLPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return SafeHTMLPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgZorroAntdMobilePipesModule = /** @class */ (function () {
    function NgZorroAntdMobilePipesModule() {
    }
    NgZorroAntdMobilePipesModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        SafeHTMLPipe
                    ],
                    exports: [SafeHTMLPipe]
                },] }
    ];
    return NgZorroAntdMobilePipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ActionSheetComponent = /** @class */ (function () {
    function ActionSheetComponent() {
        this.props = {
            prefixCls: 'am-action-sheet',
            cancelButtonText: '取消'
        };
        this.flag = '';
        this.title = '';
        this.message = '';
        this.transitionName = '';
        this.maskTransitionName = '';
        this.activeClassName = [this.props.prefixCls + "-button-list-item-active"];
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    ActionSheetComponent.prototype.showShare = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        var _a;
        /** @type {?} */
        var cls = (_a = {}, _a[this.props.prefixCls + "-share"] = flag === 'SHARE', _a);
        return cls;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ActionSheetComponent.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    ActionSheetComponent.prototype.isArray = /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    function (options, value) {
        if (options.length > 0 && value) {
            return value instanceof Array;
        }
        return false;
    };
    ActionSheetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ActionSheet',
                    template: "<div class=\"{{props.prefixCls}}-mask {{maskTransitionName}}\"></div>\n<div class=\"{{props.prefixCls}}-wrap {{transitionName}}\" (click)=\"onPress(-1, 0, $event)\">\n  <div role=\"document\"\n       class=\"{{props.prefixCls}}\"\n       [ngClass]=\"showShare(flag)\">\n    <div class=\"{{props.prefixCls}}-content\">\n      <button aria-label=\"Close\" class=\"{{props.prefixCls}}-close\">\n        <span class=\"{{props.prefixCls}}-close-x\"></span>\n      </button>\n      <div class=\"{{props.prefixCls}}-body\">\n        <div>\n          <ng-template *ngIf=\"isTemplateRef(title)\" [ngTemplateOutlet]=\"title\"></ng-template>\n          <h3 *ngIf=\"!isTemplateRef(title)\" class=\"{{props.prefixCls}}-title\">{{title}}</h3>\n          <ng-template *ngIf=\"isTemplateRef(message)\" [ngTemplateOutlet]=\"message\"></ng-template>\n          <div *ngIf=\"!isTemplateRef(message)\" class=\"{{props.prefixCls}}-message\">{{message}}</div>\n          <ng-container [ngSwitch]=\"flag\">\n            <div *ngSwitchCase=\"'NORMAL'\" class=\"{{props.prefixCls}}-button-list\" role=\"group\">\n              <ng-container *ngFor=\"let item of options; let i = index;\">\n                  <TouchFeedBack class=\"{{props.prefixCls}}-button-list-item\" [activeClassName]=\"activeClassName\" >\n                      <div *ngIf=\"destructiveButtonIndex !== i && cancelButtonIndex !== i\"\n                           class=\"{{props.prefixCls}}-button-list-item\"\n                           (click)=\"onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                      </div>\n                      <div *ngIf=\"destructiveButtonIndex === i\"\n                           class=\"{{props.prefixCls}}-button-list-item {{props.prefixCls}}-destructive-button\"\n                           (click)=\"onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                      </div>\n                      <div *ngIf=\"cancelButtonIndex === i\"\n                           class=\"{{props.prefixCls}}-button-list-item {{props.prefixCls}}-cancel-button\"\n                           (click)=\"onPress(i, 0, $event)\"\n                      >\n                        {{item}}\n                        <span class=\"{{props.prefixCls}}-cancel-button-mask\"></span>\n                      </div>\n                  </TouchFeedBack>\n              </ng-container>\n            </div>\n            <div *ngSwitchCase=\"'SHARE'\" class=\"{{props.prefixCls}}-share {{props.prefixCls}}-share-content\">\n              <div *ngIf=\"!isArray(options, options[0])\" class=\"{{props.prefixCls}}-share-list\">\n                <ng-container *ngFor=\"let item of options; let i = index;\">\n                  <div class=\"{{props.prefixCls}}-share-list-item\" (click)=\"onPress(i, 0, $event)\">\n                    <div class=\"{{props.prefixCls}}-share-list-item-icon\">\n                      <ng-template *ngIf=\"isTemplateRef(item.icon)\" [ngTemplateOutlet]=\"item.icon\"></ng-template>\n                      <div *ngIf=\"!isTemplateRef(item.icon)\" [innerHTML]=\"item.icon | safeHTML\"></div>\n                    </div>\n                    <div class=\"{{props.prefixCls}}-share-list-item-title\">{{item.title}}</div>\n                  </div>\n                </ng-container>\n              </div>\n              <ng-container *ngIf=\"isArray(options, options[0])\">\n                <div *ngFor=\"let items of options; let rowIndex = index\" class=\"{{props.prefixCls}}-share-list\">\n                  <ng-container *ngFor=\"let item of items; let i = index;\">\n                    <div class=\"{{props.prefixCls}}-share-list-item\" (click)=\"onPress(i, rowIndex, $event)\">\n                      <div class=\"{{props.prefixCls}}-share-list-item-icon\">\n                        <ng-template *ngIf=\"isTemplateRef(item.icon)\" [ngTemplateOutlet]=\"item.icon\"></ng-template>\n                        <div *ngIf=\"!isTemplateRef(item.icon)\" [innerHTML]=\"item.icon | safeHTML\"></div>\n                      </div>\n                      <div class=\"{{props.prefixCls}}-share-list-item-title\">{{item.title}}</div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n              <div class=\"{{props.prefixCls}}-share-cancel-button\">{{props.cancelButtonText}}</div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ActionSheetComponent.ctorParameters = function () { return []; };
    return ActionSheetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ActionSheetModule = /** @class */ (function () {
    function ActionSheetModule() {
    }
    ActionSheetModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdMobilePipesModule, ListModule, WhiteSpaceModule, WingBlankModule, CoreModule],
                    declarations: [
                        ActionSheetComponent
                    ],
                    exports: [
                        ActionSheetComponent
                    ],
                    entryComponents: [ActionSheetComponent]
                },] }
    ];
    return ActionSheetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SegmentedControlComponent = /** @class */ (function () {
    function SegmentedControlComponent() {
        this.prefixCls = 'am-segment';
        this.tintColor = '#2DB7F5';
        this.disabled = false;
        this.selectedIndex = 0;
        this.onChange = new EventEmitter();
        this.role = 'tablist';
        this.amSegment = true;
    }
    Object.defineProperty(SegmentedControlComponent.prototype, "amDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    SegmentedControlComponent.prototype.onClick = /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        if (!this.disabled && index !== this.selectedIndex) {
            this.selectedIndex = index;
            this.onChange.emit({ selectedIndex: index, value: value });
        }
    };
    SegmentedControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'SegmentedControl, nz-segmented-control',
                    template: "<div role=\"tab\"\n     *ngFor=\"let value of values; let i = index;\"\n     class=\"{{prefixCls}}-item\"\n     [ngClass]=\"{'am-segment-item-selected' : i === selectedIndex}\"\n     [ngStyle]=\"{'border-color': tintColor, 'color': i === selectedIndex ? '#fff' : tintColor, 'background-color': i === selectedIndex ? tintColor : 'transparent'}\"\n     (click)=\"onClick(i, value)\"\n>\n  <div class=\"{{prefixCls}}-item-inner\"\n       [ngStyle]=\"{'background-color': i === selectedIndex ? tintColor : 'transparent'}\"\n  ></div>\n  {{value}}\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    SegmentedControlComponent.ctorParameters = function () { return []; };
    SegmentedControlComponent.propDecorators = {
        tintColor: [{ type: Input }],
        disabled: [{ type: Input }],
        selectedIndex: [{ type: Input }],
        values: [{ type: Input }],
        onChange: [{ type: Output }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        amSegment: [{ type: HostBinding, args: ['class.am-segment',] }],
        amDisabled: [{ type: HostBinding, args: ['class.am-segment-disabled',] }]
    };
    return SegmentedControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SegmentedControlModule = /** @class */ (function () {
    function SegmentedControlModule() {
    }
    SegmentedControlModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [SegmentedControlComponent],
                    exports: [SegmentedControlComponent]
                },] }
    ];
    return SegmentedControlModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TextareaItem = /** @class */ (function () {
    function TextareaItem() {
        this.prefixCls = 'am-textarea';
        this.isTitleString = true;
        this.maxLength = Infinity;
        this._prefixListCls = 'am-list';
        this._defaultValue = '';
        this._placeholder = '';
        this._editable = true;
        this._disabled = false;
        this._clear = false;
        this._rows = 1;
        this._error = false;
        this._labelNumber = 5;
        this._name = '';
        this._focus = false;
        this._autoFocus = false;
        this._isClear = false;
        this._isClickingClear = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onErrorClick = new EventEmitter();
    }
    Object.defineProperty(TextareaItem.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (typeof v === undefined || v === null) {
                this._value = '';
            }
            this._value = v;
            this.textRef.nativeElement.value = this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "defaultValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = this._defaultValue;
            this.textRef.nativeElement.value = this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._editable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "clear", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clear;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._clear = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "rows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rows;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rows = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "error", {
        get: /**
         * @return {?}
         */
        function () {
            return this._error;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._error = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "labelNumber", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelNumber = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._count = value;
            this.setCls();
            this.setCharacterLength();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "prefixListCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._prefixListCls;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._prefixListCls = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "name", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this.textRef.nativeElement.name = this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "autoHeight", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = value;
            this.isTitleString = true;
            if (typeof value !== 'string') {
                this.isTitleString = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "focus", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.focus) {
                this.textRef.nativeElement.focus();
                this.inputFocus('');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextareaItem.prototype, "autoFocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoFocus;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoFocus = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TextareaItem.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a, _b, _c, _d;
        this.hasCount = this._count > 0 && this._rows > 1;
        this.wrapCls = (_a = {},
            _a[this._prefixListCls + "-item"] = true,
            _a[this.prefixCls + "-item"] = true,
            _a[this.prefixCls + "-disabled"] = this._disabled,
            _a[this.prefixCls + "-error"] = this._error,
            _a[this.prefixCls + "-focus"] = this._focus,
            _a[this.prefixCls + "-item-single-line"] = this._rows === 1 && !this._autoHeight,
            _a[this.prefixCls + "-has-count"] = this.hasCount,
            _a);
        this.labelCls = (_b = {},
            _b[this.prefixCls + "-label"] = true,
            _b[this.prefixCls + "-label-2"] = this._labelNumber === 2,
            _b[this.prefixCls + "-label-3"] = this._labelNumber === 3,
            _b[this.prefixCls + "-label-4"] = this._labelNumber === 4,
            _b[this.prefixCls + "-label-5"] = this._labelNumber === 5,
            _b[this.prefixCls + "-label-6"] = this._labelNumber === 6,
            _b[this.prefixCls + "-label-7"] = this._labelNumber === 7,
            _b);
        this.controlCls = (_c = {}, _c[this.prefixCls + "-control"] = true, _c);
        this.clearCls = (_d = {},
            _d[this.prefixCls + "-clear-active"] = this._isClickingClear,
            _d);
    };
    /**
     * @return {?}
     */
    TextareaItem.prototype.setCharacterLength = /**
     * @return {?}
     */
    function () {
        this.characterLength = this.countSymbols(this._value);
        if (this._count > 0) {
            this.maxLength = this._count - this.characterLength + (this._value ? this._value.length : 0);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TextareaItem.prototype.inputChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this._value = e;
        this.textRef.nativeElement.value = this._value;
        this.setCharacterLength();
        this.onChange.emit(this._value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextareaItem.prototype.inputFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._focus = true;
        this.setCls();
        if (value !== undefined) {
            this.onFocus.emit(value);
        }
    };
    /**
     * @param {?} value
     * @param {?} event
     * @return {?}
     */
    TextareaItem.prototype.inputBlur = /**
     * @param {?} value
     * @param {?} event
     * @return {?}
     */
    function (value, event) {
        var _this = this;
        setTimeout(function () {
            _this._focus = false;
            _this.setCls();
            _this.onBlur.emit(value);
            _this._isClear = false;
        }, 100);
    };
    /**
     * @return {?}
     */
    TextareaItem.prototype.clearInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._isClickingClear = true;
        this.setCls();
        setTimeout(function () {
            _this._value = '';
            _this.inputChange('');
            _this.inputFocus(_this._value);
            _this._isClickingClear = false;
            _this.setCls();
        }, 100);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TextareaItem.prototype.errorClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.onErrorClick) {
            this.onErrorClick.emit(e);
        }
    };
    /**
     * @return {?}
     */
    TextareaItem.prototype.reAlignHeight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var textareaDom = this.textRef.nativeElement;
        textareaDom.style.height = '';
        textareaDom.style.height = textareaDom.scrollHeight + "px";
    };
    /**
     * @param {?=} text
     * @return {?}
     */
    TextareaItem.prototype.countSymbols = /**
     * @param {?=} text
     * @return {?}
     */
    function (text) {
        if (text === void 0) { text = ''; }
        /** @type {?} */
        var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]|\n/g;
        return text.replace(regexAstralSymbols, '_').length;
    };
    /**
     * @return {?}
     */
    TextareaItem.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
        this.setCharacterLength();
        this.textRef.nativeElement.value = this._value;
    };
    /**
     * @return {?}
     */
    TextareaItem.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        if (this._autoHeight && this._focus) {
            this.reAlignHeight();
        }
    };
    TextareaItem.decorators = [
        { type: Component, args: [{
                    selector: 'TextareaItem , nzm-textarea-item',
                    template: "<div [ngClass]=\"wrapCls\">\n  <div *ngIf=\"title &&  isTitleString\" [ngClass]=\"labelCls\">{{title}}</div>\n  <div *ngIf=\"title &&  !isTitleString\" [ngClass]=\"labelCls\">\n    <ng-template [ngTemplateOutlet]=\"title\"></ng-template>\n  </div>\n  <div [ngClass]=\"controlCls\">\n    <textarea #text\n              [rows]=\"rows\"\n              [maxlength]=\"maxLength\"\n              [(ngModel)]=\"value\"\n              [defaultValue]=\"defaultValue\"\n              [placeholder]=\"placeholder\"\n              [disabled]=\"disabled\"\n              [readOnly]=\"!editable\"\n              [autofocus]=\"autoFocus\"\n              (ngModelChange)=\"inputChange($event)\"\n              (blur)=\"inputBlur(value , $event)\"\n              (focus)=\"inputFocus(value)\"\n    ></textarea>\n  </div>\n  <div *ngIf=\"clear && editable && !disabled && (value && value.length >0 )\"\n       class=\"{{prefixCls}}-clear\"\n       [ngClass]=\"clearCls\"\n       (click)=\"clearInput()\"\n  ></div>\n  <div *ngIf=\"error\" class=\"{{prefixCls}}-error-extra\" (click)=\"errorClick($event)\"></div>\n  <span *ngIf=\"hasCount\" class=\"{{prefixCls}}-count\">\n    <span>{{characterLength}}</span>/{{count}}\n  </span>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return TextareaItem; }),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TextareaItem.ctorParameters = function () { return []; };
    TextareaItem.propDecorators = {
        textRef: [{ type: ViewChild, args: ['text',] }],
        value: [{ type: Input }],
        defaultValue: [{ type: Input }],
        placeholder: [{ type: Input }],
        editable: [{ type: Input }],
        disabled: [{ type: Input }],
        clear: [{ type: Input }],
        rows: [{ type: Input }],
        error: [{ type: Input }],
        labelNumber: [{ type: Input }],
        count: [{ type: Input }],
        prefixListCls: [{ type: Input }],
        name: [{ type: Input }],
        autoHeight: [{ type: Input }],
        title: [{ type: Input }],
        focus: [{ type: Input }],
        autoFocus: [{ type: Input }],
        onChange: [{ type: Output }],
        onBlur: [{ type: Output }],
        onFocus: [{ type: Output }],
        onErrorClick: [{ type: Output }]
    };
    return TextareaItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TextareaItemModule = /** @class */ (function () {
    function TextareaItemModule() {
    }
    TextareaItemModule.decorators = [
        { type: NgModule, args: [{
                    exports: [TextareaItem],
                    declarations: [TextareaItem],
                    imports: [CommonModule, FormsModule]
                },] }
    ];
    return TextareaItemModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TabPane = /** @class */ (function () {
    function TabPane() {
        this.prefixCls = 'am-tabs-pane';
        this.tintColor = '#108ee9';
        this.unselectedTintColor = '#888';
        this.active = true;
        this.isTitleString = true;
        this.showTabPanelContent = false;
        this.paneWrap = true;
    }
    Object.defineProperty(TabPane.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isTitleString = !(value instanceof TemplateRef);
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPane.prototype, "wrapActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPane.prototype, "wrapInactive", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    TabPane.prototype.onTranslateTabStarted = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if ((e.toState == 'center-with-animation' ||
            e.toState == 'center-without-animation' ||
            e.toState == 'left-with-animation-with-higher-zindex' ||
            e.toState == 'right-with-animation-with-higher-zindex' ||
            e.toState == 'top-with-animation-with-higher-zindex' ||
            e.toState == 'bottom-with-animation-with-higher-zindex') &&
            (this.position == 'center-with-animation' ||
                this.position == 'center-without-animation' ||
                this.position == 'left-with-animation-with-higher-zindex' ||
                this.position == 'right-with-animation-with-higher-zindex' ||
                this.position == 'top-with-animation-with-higher-zindex' ||
                this.position == 'bottom-with-animation-with-higher-zindex')) {
            this.showTabPanelContent = true;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TabPane.prototype.onTranslateTabComplete = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.toState !== 'center-with-animation' &&
            e.toState !== 'center-without-animation' &&
            e.toState !== 'left-with-animation-with-higher-zindex' &&
            e.toState !== 'right-with-animation-with-higher-zindex' &&
            e.toState !== 'top-with-animation-with-higher-zindex' &&
            e.toState !== 'bottom-with-animation-with-higher-zindex' &&
            this.position !== 'center-with-animation' &&
            this.position !== 'center-without-animation' &&
            this.position !== 'left-with-animation-with-higher-zindex' &&
            this.position !== 'right-with-animation-with-higher-zindex' &&
            this.position !== 'top-with-animation-with-higher-zindex' &&
            this.position !== 'bottom-with-animation-with-higher-zindex') {
            this.showTabPanelContent = false;
        }
    };
    TabPane.decorators = [
        { type: Component, args: [{
                    selector: 'TabPane, nzm-tab-pane',
                    template: "<ng-content *ngIf=\"showTabPanelContent\"></ng-content>",
                    host: {
                        '[@translateTabPane]': 'position',
                        '(@translateTabPane.start)': 'onTranslateTabStarted($event)',
                        '(@translateTabPane.done)': 'onTranslateTabComplete($event)'
                    },
                    animations: [
                        trigger('translateTabPane', [
                            state('left-with-animation', style({
                                transform: 'translate3d(-100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('left-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(-100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('left-without-animation', style({ transform: 'translate3d(-100%, 0, 0)' })),
                            state('right-with-animation', style({
                                transform: 'translate3d(100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('right-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('right-without-animation', style({ transform: 'translate3d(100%, 0, 0)' })),
                            state('top-with-animation', style({
                                transform: 'translate3d(0, -100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('top-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(0, -100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('top-without-animation', style({ transform: 'translate3d(0, -100%, 0)' })),
                            state('bottom-with-animation', style({
                                transform: 'translate3d(0, 100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('bottom-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(0, 100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('bottom-without-animation', style({ transform: 'translate3d(0, 100%, 0)' })),
                            state('center-with-animation', style({
                                'z-index': 100,
                                transform: 'translate3d(0, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('center-without-animation', style({ transform: 'translate3d(0, 0, 0)' }))
                        ])
                    ],
                    styles: [":host {touch-action: auto}"]
                }] }
    ];
    /** @nocollapse */
    TabPane.ctorParameters = function () { return []; };
    TabPane.propDecorators = {
        title: [{ type: Input }],
        paneWrap: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap',] }],
        wrapActive: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap-active',] }],
        wrapInactive: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap-inactive',] }]
    };
    return TabPane;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Tabs = /** @class */ (function () {
    function Tabs() {
        this.prefixCls = 'am-tabs';
        this.selectedKey = 0;
        this.keyToSelect = 0;
        this.paneMoveStyle = '';
        this._startTime = 0;
        this._startPosition = 0;
        this._velocityThreshold = 0.3;
        this._tabDirection = 'horizontal';
        this._tabBarPosition = 'top';
        this.page = 5;
        this.swipeable = true;
        this.useOnPan = true;
        this.animated = true;
        this.distanceToChangeTab = 0.3;
        this.tabBarActiveTextColor = '';
        this.tabBarInactiveTextColor = '';
        this.renderTabBar = null;
        this.tabBarBackgroundColor = '#FFF';
        this.tabBarTextStyle = {};
        /**
         * should be removed when https://github.com/angular/angular/issues/20810 resolved *
         */
        this.tabPanesComponent = null;
        this.onChange = new EventEmitter();
        this.onTabClick = new EventEmitter();
        this.amTabs = true;
        this.amTabsTop = true;
        this.amTabsLeft = false;
        this.amTabsRight = false;
        this.amTabsBottom = false;
        this.amTabsVertical = false;
        this.amTabsHorizontal = true;
    }
    Object.defineProperty(Tabs.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedKey;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.keyToSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabBarPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabBarPosition;
        },
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tabBarPosition = position;
            switch (position) {
                case 'top':
                    this.amTabsTop = true;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'left':
                    this.amTabsTop = false;
                    this.amTabsLeft = true;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'bottom':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = true;
                    break;
                case 'right':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = true;
                    this.amTabsBottom = false;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabDirection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabDirection;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            this._tabDirection = direction;
            switch (direction) {
                case 'horizontal':
                    this.amTabsHorizontal = true;
                    this.amTabsVertical = false;
                    break;
                case 'vertical':
                    this.amTabsHorizontal = false;
                    this.amTabsVertical = true;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    Tabs.prototype.clickTab = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.selectedKey !== index) {
            this.keyToSelect = index;
            this.onTabClick.emit({ index: this.keyToSelect });
        }
    };
    /**
     * @return {?}
     */
    Tabs.prototype.getCurrentTabPanes = /**
     * @return {?}
     */
    function () {
        return this.tabPanesComponent || this.tabPanes;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._startTime = event.timeStamp;
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            }
            else if ('vertical' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                // velocity 小于阈值才认为是pan操作
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(' + distance + 'px, 0, 0 )';
                }
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(0, ' + distance + 'px, 0 )';
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetWidth * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(0, 0, 0 )';
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetHeight * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(0, 0, 0 )';
            }
        }
    };
    /**
     * @return {?}
     */
    Tabs.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.selectTabPane(this.keyToSelect);
        this.selectedKey = this.keyToSelect;
    };
    /**
     * @return {?}
     */
    Tabs.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.keyToSelect !== this.selectedKey && this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            this.selectTabPane(this.keyToSelect);
            this.selectedKey = this.keyToSelect;
            this.onChange.emit({ index: this.selectedKey });
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tabs.prototype.selectTabPane = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var keyToSelect = Math.min(this.getCurrentTabPanes().length - 1, Math.max(index || 0, 0));
        this.getCurrentTabPanes().forEach(function (tabPane, indexKey) {
            if (keyToSelect < indexKey) {
                if (_this.animated) {
                    if ('horizontal' === _this._tabDirection) {
                        if (keyToSelect === indexKey - 1) {
                            tabPane.position = 'right-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'right-with-animation';
                        }
                    }
                    else if ('vertical' === _this._tabDirection) {
                        if (keyToSelect === indexKey - 1) {
                            tabPane.position = 'bottom-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'bottom-with-animation';
                        }
                    }
                }
                else {
                    if ('horizontal' === _this._tabDirection) {
                        tabPane.position = 'right-without-animation';
                    }
                    else if ('vertical' === _this._tabDirection) {
                        tabPane.position = 'bottom-without-animation';
                    }
                }
            }
            else if (keyToSelect > indexKey) {
                if (_this.animated) {
                    if ('horizontal' === _this._tabDirection) {
                        if (keyToSelect === indexKey + 1) {
                            tabPane.position = 'left-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'left-with-animation';
                        }
                    }
                    else if ('vertical' === _this._tabDirection) {
                        if (keyToSelect === indexKey + 1) {
                            tabPane.position = 'top-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'top-with-animation';
                        }
                    }
                }
                else {
                    if ('horizontal' === _this._tabDirection) {
                        tabPane.position = 'left-without-animation';
                    }
                    else if ('vertical' === _this._tabDirection) {
                        tabPane.position = 'top-without-animation';
                    }
                }
            }
            else {
                if (_this.animated) {
                    tabPane.position = 'center-with-animation';
                }
                else {
                    tabPane.position = 'center-without-animation';
                }
            }
            if (keyToSelect !== indexKey) {
                tabPane.active = false;
            }
            else {
                tabPane.active = true;
            }
        });
    };
    /**
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    Tabs.prototype.getVelocity = /**
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    function (deltaDistance, deltaTime) {
        return Math.abs(deltaDistance / deltaTime);
    };
    Tabs.decorators = [
        { type: Component, args: [{
                    selector: 'Tabs, nzm-tabs',
                    template: "<ng-container>\n  <ng-template *ngIf=\"'top' === tabBarPosition || 'left' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\">\n  </ng-template>\n  <div #TabContent\n       class=\"{{prefixCls}}-content-wrap\"\n       [ngClass]=\"{'am-tabs-content-wrap-animated': animated}\"\n       [ngStyle]=\"{'transform': paneMoveStyle, 'webkitTransform': paneMoveStyle}\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n  <ng-template *ngIf=\"'bottom' === tabBarPosition || 'right' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\"\n  ></ng-template>\n</ng-container>\n\n<ng-template #renderDefaultTabBar>\n  <DefaultTabBar #DefaultTabBar\n                 [page]=\"page\"\n                 [animated]=\"animated\"\n                 [activeTab]=\"selectedKey\"\n                 [tabBarPosition]=\"tabBarPosition\"\n                 [tabBarBackgroundColor]=\"tabBarBackgroundColor\"\n                 [tabBarUnderlineStyle]=\"tabBarUnderlineStyle\"\n  >\n    <div #TabTitle\n         *ngFor=\"let tabPane of getCurrentTabPanes(); let i = index\"\n         class=\"{{prefixCls}}-default-bar-tab\"\n         [ngClass]=\"{'am-tabs-default-bar-tab-active': tabPane.active, 'am-tabs-default-bar-tab-disabled': tabPane.disabled}\"\n         [ngStyle]=\"tabBarTextStyle\"\n         [style.color]=\"tabPane.active ? tabBarActiveTextColor : tabBarInactiveTextColor\"\n         (click)=\"clickTab(i)\"\n    >\n      <ng-container *ngIf=\"tabPane.isTitleString; else titleTemplate\">\n        {{tabPane.title}}\n      </ng-container>\n      <ng-template #titleTemplate>\n        <ng-template [ngTemplateOutlet]=\"tabPane.title\"></ng-template>\n      </ng-template>\n    </div>\n  </DefaultTabBar>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    Tabs.ctorParameters = function () { return []; };
    Tabs.propDecorators = {
        tabPanes: [{ type: ContentChildren, args: [TabPane, { descendants: true },] }],
        tabContent: [{ type: ViewChild, args: ['TabContent',] }],
        tabsBarSwipe: [{ type: ViewChild, args: ['TabsBarSwipe',] }],
        defaultTabBar: [{ type: ViewChild, args: ['DefaultTabBar',] }],
        tabsBarContainer: [{ type: ViewChild, args: ['TabsBarContainer',] }],
        page: [{ type: Input }],
        swipeable: [{ type: Input }],
        useOnPan: [{ type: Input }],
        animated: [{ type: Input }],
        tabBarUnderlineStyle: [{ type: Input }],
        distanceToChangeTab: [{ type: Input }],
        tabBarActiveTextColor: [{ type: Input }],
        tabBarInactiveTextColor: [{ type: Input }],
        renderTabBar: [{ type: Input }],
        tabBarBackgroundColor: [{ type: Input }],
        tabBarTextStyle: [{ type: Input }],
        tabPanesComponent: [{ type: Input }],
        activeTab: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        tabDirection: [{ type: Input }],
        onChange: [{ type: Output }],
        onTabClick: [{ type: Output }],
        amTabs: [{ type: HostBinding, args: ['class.am-tabs',] }],
        amTabsTop: [{ type: HostBinding, args: ['class.am-tabs-top',] }],
        amTabsLeft: [{ type: HostBinding, args: ['class.am-tabs-left',] }],
        amTabsRight: [{ type: HostBinding, args: ['class.am-tabs-right',] }],
        amTabsBottom: [{ type: HostBinding, args: ['class.am-tabs-bottom',] }],
        amTabsVertical: [{ type: HostBinding, args: ['class.am-tabs-vertical',] }],
        amTabsHorizontal: [{ type: HostBinding, args: ['class.am-tabs-horizontal',] }]
    };
    return Tabs;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DefaultTabBarComponent = /** @class */ (function () {
    function DefaultTabBarComponent(_renderer) {
        this._renderer = _renderer;
        this.prefixCls = 'am-tabs-default-bar';
        this.inkBarStyle = {};
        this.tabsBarStyle = {};
        this.showPrev = false;
        this.showNext = false;
        this.selectedKey = 0;
        this.inkBarOffSet = 0;
        this.inkBarLength = 0;
        this.tabBarNavSwipedPosition = 0;
        this.tabBarNavSwipingPosition = 0;
        this._startPosition = 0;
        this.page = 5;
        this.animated = true;
        this.tabBarBackgroundColor = '#FFF';
        this.tabBarPosition = 'top';
        this.tabBarWrap = true;
        this.getTabSize = function (page, tabLength) { return 100 / Math.min(page, tabLength); };
    }
    Object.defineProperty(DefaultTabBarComponent.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedKey;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            if (index !== this.selectedKey) {
                this.selectedKey = index;
                if (this.tabTitles && this.tabTitles.length > 0) {
                    this.setTabBarStyleCenter();
                    this.setInkBarStatus(this.selectedKey);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
            this._startPosition = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
        }
        else {
            this._startPosition = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
            this.setTabBarNavSwipingPosition(event.changedTouches[0].clientX - this._startPosition, this.tabTitles.first.nativeElement.offsetWidth, this.tabsBarSwipe.nativeElement.offsetWidth);
            this.tabsBarStyle = {
                transition: '0ms',
                transform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)',
                webkitTransform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)'
            };
        }
        else {
            this.setTabBarNavSwipingPosition(event.changedTouches[0].clientY - this._startPosition, this.tabTitles.first.nativeElement.offsetHeight, this.tabsBarSwipe.nativeElement.offsetHeight);
            this.tabsBarStyle = {
                transition: '0ms',
                transform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)',
                webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)'
            };
        }
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onTouchEnd = /**
     * @return {?}
     */
    function () {
        this.tabBarNavSwipedPosition = this.tabBarNavSwipingPosition;
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.onContentChange = /**
     * @return {?}
     */
    function () {
        this.setTabsStyle();
        this.setInkBarStatus(this.activeTab);
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setTabsStyle();
        if (this.selectedKey > 0) {
            this.setTabBarStyleCenter();
        }
        this.setInkBarStatus(this.selectedKey);
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabsStyle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.tabTitles.forEach(function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'width', _this.getTabSize(_this.page, _this.tabTitles.length) + '%');
                });
            }
            else {
                this.tabTitles.forEach(function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'height', _this.getTabSize(_this.page, _this.tabTitles.length) + '%');
                });
            }
        }
    };
    /**
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarStyleCenter = /**
     * @return {?}
     */
    function () {
        if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
            this.setTabBarNavSwipedPosition(this.tabTitles.first.nativeElement.offsetWidth, this.tabsBarSwipe.nativeElement.offsetWidth);
            this.tabsBarStyle = {
                transform: 'translate3d(' + this.tabBarNavSwipedPosition + 'px, 0px, 0px)',
                webkitTransform: 'translate3d(' + this.tabBarNavSwipedPosition + ', 0px, 0px)'
            };
        }
        else {
            this.setTabBarNavSwipedPosition(this.tabTitles.first.nativeElement.offsetHeight, this.tabsBarSwipe.nativeElement.offsetHeight);
            this.tabsBarStyle = {
                transform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)',
                webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)'
            };
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setInkBarStatus = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetLeft;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.width;
                this.inkBarStyle = {
                    width: this.inkBarLength,
                    left: (this.selectedKey * 100) / this.page + '%'
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
            else {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetTop;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.height;
                this.inkBarStyle = {
                    height: this.inkBarLength,
                    top: (this.selectedKey * 100) / this.page + '%'
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
        }
    };
    /**
     * @param {?} swipingDistance
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarNavSwipingPosition = /**
     * @param {?} swipingDistance
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    function (swipingDistance, swipingItemLength, viewportLength) {
        if (this.tabBarNavSwipedPosition + swipingDistance > 0) {
            this.tabBarNavSwipingPosition = 0;
        }
        else if (this.tabBarNavSwipedPosition + swipingDistance <
            viewportLength - swipingItemLength * this.tabTitles.length) {
            this.tabBarNavSwipingPosition = viewportLength - swipingItemLength * this.tabTitles.length;
            this.showNext = false;
        }
        else {
            this.tabBarNavSwipingPosition = this.tabBarNavSwipedPosition + swipingDistance;
            this.showNext = true;
        }
        if (this.tabBarNavSwipingPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
    };
    /**
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    DefaultTabBarComponent.prototype.setTabBarNavSwipedPosition = /**
     * @param {?} swipingItemLength
     * @param {?} viewportLength
     * @return {?}
     */
    function (swipingItemLength, viewportLength) {
        if (this.selectedKey >= Math.floor(this.page / 2) &&
            this.selectedKey <= this.tabTitles.length - 1 - Math.floor(this.page / 2)) {
            this.tabBarNavSwipedPosition = viewportLength / 2 - swipingItemLength * (this.selectedKey + 1 / 2);
        }
        else if (this.selectedKey < Math.floor(this.page / 2)) {
            this.tabBarNavSwipedPosition = 0;
        }
        else {
            this.tabBarNavSwipedPosition = viewportLength - swipingItemLength * this.tabTitles.length;
        }
        if (this.tabBarNavSwipedPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
        if (this.tabBarNavSwipedPosition + swipingItemLength * this.tabTitles.length - viewportLength > 0) {
            this.showNext = true;
        }
        else {
            this.showNext = false;
        }
    };
    DefaultTabBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'DefaultTabBar, nzm-default-tab-bar',
                    template: "<div class=\"{{prefixCls}} {{prefixCls}}-{{tabBarPosition}}\"\n     [ngClass]=\"{'am-tabs-default-bar-animated' : animated}\"\n     [ngStyle]=\"{backgroundColor: tabBarBackgroundColor || '#FFF'}\"\n>\n  <div *ngIf=\"showPrev\" class=\"{{prefixCls}}-prevpage\"></div>\n  <div #TabsBarSwipe\n       class=\"{{prefixCls}}-content\"\n       [ngStyle]=\"tabsBarStyle\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd()\"\n       (cdkObserveContent)=\"onContentChange()\"\n  >\n    <ng-content></ng-content>\n    <div class=\"{{prefixCls}}-underline\" [ngStyle]=\"inkBarStyle\">\n    </div>\n  </div>\n  <div *ngIf=\"showNext\" class=\"{{prefixCls}}-nextpage\"></div>\n</div>"
                }] }
    ];
    /** @nocollapse */
    DefaultTabBarComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    DefaultTabBarComponent.propDecorators = {
        tabTitles: [{ type: ContentChildren, args: ['TabTitle',] }],
        tabsBarSwipe: [{ type: ViewChild, args: ['TabsBarSwipe',] }],
        page: [{ type: Input }],
        animated: [{ type: Input }],
        tabBarUnderlineStyle: [{ type: Input }],
        tabBarBackgroundColor: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        activeTab: [{ type: Input }],
        tabBarWrap: [{ type: HostBinding, args: ['class.am-tabs-tab-bar-wrap',] }]
    };
    return DefaultTabBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TabsModule = /** @class */ (function () {
    function TabsModule() {
    }
    TabsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ObserversModule],
                    declarations: [TabPane, Tabs, DefaultTabBarComponent],
                    exports: [TabPane, Tabs, DefaultTabBarComponent],
                    providers: []
                },] }
    ];
    return TabsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TabBarTab = /** @class */ (function () {
    function TabBarTab(tabPane) {
        this.tabPane = tabPane;
        this.prefixCls = 'am-tab-bar-tab';
        this.selected = false;
        this.tintColor = '#108ee9';
        this.unselectedTintColor = '#888';
        this.key = '';
        this.title = '';
        this.dot = false;
        this.badge = null;
        this.icon = null;
        this.selectedIcon = null;
        this.onPress = new EventEmitter();
        this.tabBarTab = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TabBarTab.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * @return {?}
     */
    TabBarTab.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.tabPane.active) {
            this.selected = true;
        }
        else {
            this.selected = false;
        }
        this.tintColor = this.tabPane.tintColor;
        this.unselectedTintColor = this.tabPane.unselectedTintColor;
    };
    TabBarTab.decorators = [
        { type: Component, args: [{
                    selector: 'TabBarTab, nzm-tab-bar-tab',
                    template: "<div class=\"{{prefixCls}}-icon\" [style.color]=\"selected ? tintColor : unselectedTintColor\">\n  <Badge *ngIf=\"badge\" className=\"{{prefixCls}}-badge tab-badge\" [text]=\"badge\">\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </Badge>\n  <Badge className=\"{{prefixCls}}-badge tab-badge\" [dot]=\"dot\" *ngIf=\"dot\">\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </Badge>\n  <ng-container *ngIf=\"!badge && !dot\" >\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </ng-container>\n</div>\n<p class=\"{{prefixCls}}-title\" [style.color]=\"selected ? tintColor : unselectedTintColor\">\n  {{title}}\n</p>\n\n<ng-template #domTemplate>\n  <ng-template [ngTemplateOutlet]=\"(selected ? selectedIcon : icon)\"></ng-template>\n</ng-template>\n<ng-template #imgTemplate >\n  <img src=\"{{selected ? selectedIcon : icon}}\" alt=\"{{title}}\">\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    TabBarTab.ctorParameters = function () { return [
        { type: TabPane, decorators: [{ type: Optional }] }
    ]; };
    TabBarTab.propDecorators = {
        key: [{ type: Input }],
        title: [{ type: Input }],
        dot: [{ type: Input }],
        badge: [{ type: Input }],
        icon: [{ type: Input }],
        selectedIcon: [{ type: Input }],
        onPress: [{ type: Output }],
        tabBarTab: [{ type: HostBinding, args: ['class.am-tab-bar-tab',] }]
    };
    return TabBarTab;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TabBar = /** @class */ (function () {
    function TabBar() {
        this.prefixCls = 'am-tab-bar';
        this._tintColor = '#108ee9';
        this._unselectedTintColor = '#888';
        this.hidden = false;
        this.activeTab = 0;
        this.barTintColor = 'white';
        this.tabBarPosition = 'bottom';
        this.tabBar = true;
    }
    Object.defineProperty(TabBar.prototype, "tintColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tintColor;
        },
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            var _this = this;
            this._tintColor = color;
            if (this.tabBarTabs && this.tabBarTabs.length > 0) {
                this.tabBarTabs.forEach(function (tabBarTab) {
                    tabBarTab.tintColor = _this._tintColor;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBar.prototype, "unselectedTintColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._unselectedTintColor;
        },
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            var _this = this;
            this._unselectedTintColor = color;
            if (this.tabBarTabs && this.tabBarTabs.length > 0) {
                this.tabBarTabs.forEach(function (tabBarTab) {
                    tabBarTab.unselectedTintColor = _this._unselectedTintColor;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    TabBar.prototype.selectTabPane = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.tabPanes.forEach(function (tabPane, indexKey) {
            if (index < indexKey) {
                tabPane.position = 'right-without-animation';
            }
            else if (index > indexKey) {
                tabPane.position = 'left-without-animation';
            }
            else {
                tabPane.position = 'center-without-animation';
            }
            if (index !== indexKey) {
                tabPane.active = false;
            }
            else {
                tabPane.active = true;
            }
        });
        if (this.tabBarTabs && this.tabBarTabs.length > 0) {
            this.tabBarTabs.forEach(function (tabBarTab) {
                tabBarTab.selected = false;
            });
            this.tabBarTabs.toArray()[index].selected = true;
            this.tabBarTabs.toArray()[index].onPress.emit({
                title: this.tabBarTabs.toArray()[index].title,
                key: this.tabBarTabs.toArray()[index].key
            });
        }
    };
    /**
     * @return {?}
     */
    TabBar.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectTabPane(this.activeTab);
        this.tabPanes.forEach(function (tabPane) {
            tabPane.tintColor = _this.tintColor;
            tabPane.unselectedTintColor = _this.unselectedTintColor;
        });
    };
    TabBar.decorators = [
        { type: Component, args: [{
                    selector: 'TabBar, nzm-tab-bar',
                    template: "<Tabs [activeTab]=\"activeTab\"\n      [swipeable]=\"false\"\n      [useOnPan]=\"false\"\n      [animated]=\"false\"\n      [tabDirection]=\"'horizontal'\"\n      [tabBarPosition]='tabBarPosition'\n      [renderTabBar]=\"TabBarBar\"\n      [tabPanesComponent]=\"tabPanes\"\n>\n  <ng-content></ng-content>\n</Tabs>\n\n<ng-template #TabBarBar>\n  <div class=\"am-tabs-tab-bar-wrap\">\n    <div class=\"{{prefixCls}}-bar\"\n         [ngClass]=\"{'am-tab-bar-bar-hidden-top': 'top' === tabBarPosition && hidden, 'am-tab-bar-bar-hidden-bottom': 'bottom' === tabBarPosition && hidden}\"\n         [style.background-color]=\"barTintColor\">\n      <div *ngFor=\"let tabPane of tabPanes; let i = index;\" (click)=\"selectTabPane(i)\">\n        <ng-container [ngTemplateOutlet]=\"tabPane.title\"></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    TabBar.ctorParameters = function () { return []; };
    TabBar.propDecorators = {
        tabPanes: [{ type: ContentChildren, args: [TabPane, { descendants: true },] }],
        tabBarTabs: [{ type: ContentChildren, args: [TabBarTab, { descendants: true },] }],
        hidden: [{ type: Input }],
        activeTab: [{ type: Input }],
        barTintColor: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        tintColor: [{ type: Input }],
        unselectedTintColor: [{ type: Input }],
        tabBar: [{ type: HostBinding, args: ['class.am-tab-bar',] }]
    };
    return TabBar;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TabBarModule = /** @class */ (function () {
    function TabBarModule() {
    }
    TabBarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, TabsModule, BadgeModule],
                    exports: [TabBar, TabBarTab],
                    declarations: [TabBar, TabBarTab],
                    providers: []
                },] }
    ];
    return TabBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerOptions = /** @class */ (function () {
    function PickerOptions() {
        this.data = [];
        this.value = [];
        this.cols = 3;
        this.mask = true;
        this.title = '';
        this.okText = '确定';
        this.dismissText = '取消';
        this.disabled = false;
        this.cascade = true;
        this.appendToBody = false;
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onPickerChange = new EventEmitter();
        this.indicatorStyle = {};
    }
    return PickerOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function getData() {
    return [
        {
            label: '北京',
            children: [
                {
                    label: '北京市',
                    children: [
                        '东城区',
                        '西城区',
                        '崇文区',
                        '宣武区',
                        '朝阳区',
                        '丰台区',
                        '石景山区',
                        '海淀区',
                        '门头沟区',
                        '房山区',
                        '通州区',
                        '顺义区',
                        '昌平区',
                        '大兴区',
                        '平谷区',
                        '怀柔区',
                        '密云县',
                        '延庆县'
                    ]
                }
            ]
        },
        {
            label: '天津市',
            children: [
                {
                    label: '天津市',
                    children: [
                        '和平区',
                        '河东区',
                        '河西区',
                        '南开区',
                        '河北区',
                        '红桥区',
                        '塘沽区',
                        '汉沽区',
                        '大港区',
                        '东丽区',
                        '西青区',
                        '津南区',
                        '北辰区',
                        '武清区',
                        '宝坻区',
                        '宁河县',
                        '静海县',
                        '蓟  县'
                    ]
                }
            ]
        },
        {
            label: '河北省',
            children: [
                {
                    label: '石家庄市',
                    children: [
                        '长安区',
                        '桥东区',
                        '桥西区',
                        '新华区',
                        '郊  区',
                        '井陉矿区',
                        '井陉县',
                        '正定县',
                        '栾城县',
                        '行唐县',
                        '灵寿县',
                        '高邑县',
                        '深泽县',
                        '赞皇县',
                        '无极县',
                        '平山县',
                        '元氏县',
                        '赵  县',
                        '辛集市',
                        '藁',
                        '晋州市',
                        '新乐市',
                        '鹿泉市'
                    ]
                },
                {
                    label: '唐山市',
                    children: [
                        '路南区',
                        '路北区',
                        '古冶区',
                        '开平区',
                        '新  区',
                        '丰润县',
                        '滦  县',
                        '滦南县',
                        '乐亭县',
                        '迁西县',
                        '玉田县',
                        '唐海县',
                        '遵化市',
                        '丰南市',
                        '迁安市'
                    ]
                },
                {
                    label: '秦皇岛市',
                    children: ['海港区', '山海关区', '北戴河区', '青龙满族自治县', '昌黎县', '抚宁县', '卢龙县']
                },
                {
                    label: '邯郸市',
                    children: [
                        '邯山区',
                        '丛台区',
                        '复兴区',
                        '峰峰矿区',
                        '邯郸县',
                        '临漳县',
                        '成安县',
                        '大名县',
                        '涉  县',
                        '磁  县',
                        '肥乡县',
                        '永年县',
                        '邱  县',
                        '鸡泽县',
                        '广平县',
                        '馆陶县',
                        '魏  县',
                        '曲周县',
                        '武安市'
                    ]
                },
                {
                    label: '邢台市',
                    children: [
                        '桥东区',
                        '桥西区',
                        '邢台县',
                        '临城县',
                        '内丘县',
                        '柏乡县',
                        '隆尧县',
                        '任  县',
                        '南和县',
                        '宁晋县',
                        '巨鹿县',
                        '新河县',
                        '广宗县',
                        '平乡县',
                        '威  县',
                        '清河县',
                        '临西县',
                        '南宫市',
                        '沙河市'
                    ]
                },
                {
                    label: '保定市',
                    children: [
                        '新市区',
                        '北市区',
                        '南市区',
                        '满城县',
                        '清苑县',
                        '涞水县',
                        '阜平县',
                        '徐水县',
                        '定兴县',
                        '唐  县',
                        '高阳县',
                        '容城县',
                        '涞源县',
                        '望都县',
                        '安新县',
                        '易  县',
                        '曲阳县',
                        '蠡  县',
                        '顺平县',
                        '博野',
                        '雄县',
                        '涿州市',
                        '定州市',
                        '安国市',
                        '高碑店市'
                    ]
                },
                {
                    label: '张家口',
                    children: [
                        '桥东区',
                        '桥西区',
                        '宣化区',
                        '下花园区',
                        '宣化县',
                        '张北县',
                        '康保县',
                        '沽源县',
                        '尚义县',
                        '蔚  县',
                        '阳原县',
                        '怀安县',
                        '万全县',
                        '怀来县',
                        '涿鹿县',
                        '赤城县',
                        '崇礼县'
                    ]
                },
                {
                    label: '承德市',
                    children: [
                        '双桥区',
                        '双滦区',
                        '鹰手营子矿区',
                        '承德县',
                        '兴隆县',
                        '平泉县',
                        '滦平县',
                        '隆化县',
                        '丰宁满族自治县',
                        '宽城满族自治县',
                        '围场满族蒙古族自治县'
                    ]
                },
                {
                    label: '沧州市',
                    children: [
                        '新华区',
                        '运河区',
                        '沧  县',
                        '青  县',
                        '东光县',
                        '海兴县',
                        '盐山县',
                        '肃宁县',
                        '南皮县',
                        '吴桥县',
                        '献  县',
                        '孟村回族自治县',
                        '泊头市',
                        '任丘市',
                        '黄骅市',
                        '河间市'
                    ]
                },
                {
                    label: '廊坊市',
                    children: ['安次区', '固安县', '永清县', '香河县', '大城县', '文安县', '大厂回族自治县', '霸州市', '三河市']
                },
                {
                    label: '衡水市',
                    children: [
                        '桃城区',
                        '枣强县',
                        '武邑县',
                        '武强县',
                        '饶阳县',
                        '安平县',
                        '故城县',
                        '景  县',
                        '阜城县',
                        '冀州市',
                        '深州市'
                    ]
                }
            ]
        },
        {
            label: '山西省',
            children: [
                {
                    label: '太原市',
                    children: [
                        '小店区',
                        '迎泽区',
                        '杏花岭区',
                        '尖草坪区',
                        '万柏林区',
                        '晋源区',
                        '清徐县',
                        '阳曲县',
                        '娄烦县',
                        '古交市'
                    ]
                },
                {
                    label: '大同市',
                    children: [
                        '城  区',
                        '矿  区',
                        '南郊区',
                        '新荣区',
                        '阳高县',
                        '天镇县',
                        '广灵县',
                        '灵丘县',
                        '浑源县',
                        '左云县',
                        '大同县'
                    ]
                },
                {
                    label: '阳泉市',
                    children: ['城  区', '矿  区', '郊  区', '平定县', '盂  县']
                },
                {
                    label: '长治市',
                    children: [
                        '城  区',
                        '郊  区',
                        '长治县',
                        '襄垣县',
                        '屯留县',
                        '平顺县',
                        '黎城县',
                        '壶关县',
                        '长子县',
                        '武乡县',
                        '沁  县',
                        '沁源县',
                        '潞城市'
                    ]
                },
                {
                    label: '晋城市',
                    children: ['城  区', '沁水县', '阳城县', '陵川县', '泽州县', '高平市']
                },
                {
                    label: '朔州市',
                    children: ['朔城区', '平鲁区', '山阴县', '应  县', '右玉县', '怀仁县']
                },
                {
                    label: '忻州市',
                    children: [
                        '忻府区',
                        '原平市',
                        '定襄县',
                        '五台县',
                        '代  县',
                        '繁峙县',
                        '宁武县',
                        '静乐县',
                        '神池县',
                        '五寨县',
                        '岢岚县',
                        '河曲县',
                        '保德县',
                        '偏关县'
                    ]
                },
                {
                    label: '吕梁市',
                    children: [
                        '离石区',
                        '孝义市',
                        '汾阳市',
                        '文水县',
                        '交城县',
                        '兴  县',
                        '临  县',
                        '柳林县',
                        '石楼县',
                        '岚  县',
                        '方山县',
                        '中阳县',
                        '交口县'
                    ]
                },
                {
                    label: '晋中市',
                    children: [
                        '榆次市',
                        '介休市',
                        '榆社县',
                        '左权县',
                        '和顺县',
                        '昔阳县',
                        '寿阳县',
                        '太谷县',
                        '祁  县',
                        '平遥县',
                        '灵石县'
                    ]
                },
                {
                    label: '临汾市',
                    children: [
                        '临汾市',
                        '侯马市',
                        '霍州市',
                        '曲沃县',
                        '翼城县',
                        '襄汾县',
                        '洪洞县',
                        '古  县',
                        '安泽县',
                        '浮山县',
                        '吉  县',
                        '乡宁县',
                        '蒲  县',
                        '大宁县',
                        '永和县',
                        '隰  县',
                        '汾西县'
                    ]
                },
                {
                    label: '运城市',
                    children: [
                        '运城市',
                        '永济市',
                        '河津市',
                        '芮城县',
                        '临猗县',
                        '万荣县',
                        '新绛县',
                        '稷山县',
                        '闻喜县',
                        '夏  县',
                        '绛  县',
                        '平陆县',
                        '垣曲县'
                    ]
                }
            ]
        },
        {
            label: '内蒙古',
            children: [
                {
                    label: '呼和浩特市',
                    children: [
                        '新城区',
                        '回民区',
                        '玉泉区',
                        '郊  区',
                        '土默特左旗',
                        '托克托县',
                        '和林格尔县',
                        '清水河县',
                        '武川县'
                    ]
                },
                {
                    label: '包头市',
                    children: [
                        '东河区',
                        '昆都伦区',
                        '青山区',
                        '石拐矿区',
                        '白云矿区',
                        '郊  区',
                        '土默特右旗',
                        '固阳县',
                        '达尔罕茂明安联合旗'
                    ]
                },
                {
                    label: '乌海市',
                    children: ['海勃湾区', '海南区', '乌达区']
                },
                {
                    label: '赤峰市',
                    children: [
                        '红山区',
                        '元宝山区',
                        '松山区',
                        '阿鲁科尔沁旗',
                        '巴林左旗',
                        '巴林右旗',
                        '林西县',
                        '克什克腾旗',
                        '翁牛特旗',
                        '喀喇沁旗',
                        '宁城县',
                        '敖汉旗'
                    ]
                },
                {
                    label: '呼伦贝尔市',
                    children: [
                        '海拉尔市',
                        '满洲里市',
                        '扎兰屯市',
                        '牙克石市',
                        '根河市',
                        '额尔古纳市',
                        '阿荣旗',
                        '莫力达瓦达斡尔族自治旗',
                        '鄂伦春自治旗',
                        '鄂温克族自治旗',
                        '新巴尔虎右旗',
                        '新巴尔虎左旗',
                        '陈巴尔虎旗'
                    ]
                },
                {
                    label: '兴安盟',
                    children: ['乌兰浩特市', '阿尔山市', '科尔沁右翼前旗', '科尔沁右翼中旗', '扎赉特旗', '突泉县']
                },
                {
                    label: '通辽市',
                    children: [
                        '科尔沁区',
                        '霍林郭勒市',
                        '科尔沁左翼中旗',
                        '科尔沁左翼后旗',
                        '开鲁县',
                        '库伦旗',
                        '奈曼旗',
                        '扎鲁特旗'
                    ]
                },
                {
                    label: '锡林郭勒盟',
                    children: [
                        '二连浩特市',
                        '锡林浩特市',
                        '阿巴嘎旗',
                        '苏尼特左旗',
                        '苏尼特右旗',
                        '东乌珠穆沁旗',
                        '西乌珠穆沁旗',
                        '太仆寺旗',
                        '镶黄旗',
                        '正镶白旗',
                        '正蓝旗',
                        '多伦县'
                    ]
                },
                {
                    label: '乌兰察布盟',
                    children: [
                        '集宁市',
                        '丰镇市',
                        '卓资县',
                        '化德县',
                        '商都县',
                        '兴和县',
                        '凉城县',
                        '察哈尔右翼前旗',
                        '察哈尔右翼中旗',
                        '察哈尔右翼后旗',
                        '四子王旗'
                    ]
                },
                {
                    label: '伊克昭盟',
                    children: ['东胜市', '达拉特旗', '准格尔旗', '鄂托克前旗', '鄂托克旗', '杭锦旗', '乌审旗', '伊金霍洛旗']
                },
                {
                    label: '巴彦淖尔盟',
                    children: ['临河市', '五原县', '磴口县', '乌拉特前旗', '乌拉特中旗', '乌拉特后旗', '杭锦后旗']
                },
                {
                    label: '阿拉善盟',
                    children: ['阿拉善左旗', '阿拉善右旗', '额济纳旗']
                }
            ]
        },
        {
            label: '辽宁省',
            children: [
                {
                    label: '沈阳市',
                    children: [
                        '沈河区',
                        '皇姑区',
                        '和平区',
                        '大东区',
                        '铁西区',
                        '苏家屯区',
                        '东陵区',
                        '于洪区',
                        '新民市',
                        '法库县',
                        '辽中县',
                        '康平县',
                        '新城子区',
                        '其他'
                    ]
                },
                {
                    label: '大连市',
                    children: [
                        '西岗区',
                        '中山区',
                        '沙河口区',
                        '甘井子区',
                        '旅顺口区',
                        '金州区',
                        '瓦房店市',
                        '普兰店市',
                        '庄河市',
                        '长海县',
                        '其他'
                    ]
                },
                {
                    label: '鞍山市',
                    children: ['铁东区', '铁西区', '立山区', '千山区', '海城市', '台安县', '岫岩满族自治县', '其他']
                },
                {
                    label: '抚顺市',
                    children: ['顺城区', '新抚区', '东洲区', '望花区', '抚顺县', '清原满族自治县', '新宾满族自治县', '其他']
                },
                {
                    label: '本溪市',
                    children: ['平山区', '明山区', '溪湖区', '南芬区', '本溪满族自治县', '桓仁满族自治县', '其他']
                },
                {
                    label: '丹东市',
                    children: ['振兴区', '元宝区', '振安区', '东港市', '凤城市', '宽甸满族自治县', '其他']
                },
                {
                    label: '锦州市',
                    children: ['太和区', '古塔区', '凌河区', '凌海市', '黑山县', '义县', '北宁市', '其他']
                },
                {
                    label: '营口市',
                    children: ['站前区', '西市区', '鲅鱼圈区', '老边区', '大石桥市', '盖州市', '其他']
                },
                {
                    label: '阜新市',
                    children: ['海州区', '新邱区', '太平区', '清河门区', '细河区', '彰武县', '阜新蒙古族自治县', '其他']
                },
                {
                    label: '辽阳市',
                    children: ['白塔区', '文圣区', '宏伟区', '太子河区', '弓长岭区', '灯塔市', '辽阳县', '其他']
                },
                {
                    label: '盘锦',
                    children: ['双台子区', '兴隆台区', '盘山县', '大洼县', '其他']
                },
                {
                    label: '铁岭市',
                    children: ['银州区', '清河区', '调兵山市', '开原市', '铁岭县', '昌图县', '西丰县', '其他']
                },
                {
                    label: '朝阳市',
                    children: ['双塔区', '龙城区', '凌源市', '北票市', '朝阳县', '建平县', '喀喇沁左翼蒙古族自治县', '其他']
                },
                {
                    label: '葫芦岛市',
                    children: ['龙港区', '南票区', '连山区', '兴城市', '绥中县', '建昌县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '吉林省',
            children: [
                {
                    label: '长春市',
                    children: [
                        '朝阳区',
                        '宽城区',
                        '二道区',
                        '南关区',
                        '绿园区',
                        '双阳区',
                        '九台市',
                        '榆树市',
                        '德惠市',
                        '农安县',
                        '其他'
                    ]
                },
                {
                    label: '吉林市',
                    children: ['船营区', '昌邑区', '龙潭区', '丰满区', '舒兰市', '桦甸市', '蛟河市', '磐石市', '永吉县', '其他']
                },
                {
                    label: '四平',
                    children: ['铁西区', '铁东区', '公主岭市', '双辽市', '梨树县', '伊通满族自治县', '其他']
                },
                {
                    label: '辽源市',
                    children: ['龙山区', '西安区', '东辽县', '东丰县', '其他']
                },
                {
                    label: '通化市',
                    children: ['东昌区', '二道江区', '梅河口市', '集安市', '通化县', '辉南县', '柳河县', '其他']
                },
                {
                    label: '白山市',
                    children: ['八道江区', '江源区', '临江市', '靖宇县', '抚松县', '长白朝鲜族自治县', '其他']
                },
                {
                    label: '松原市',
                    children: ['宁江区', '乾安县', '长岭县', '扶余县', '前郭尔罗斯蒙古族自治县', '其他']
                },
                {
                    label: '白城市',
                    children: ['洮北区', '大安市', '洮南市', '镇赉县', '通榆县', '其他']
                },
                {
                    label: '延边朝鲜族自治州',
                    children: ['延吉市', '图们市', '敦化市', '龙井市', '珲春市', '和龙市', '安图县', '汪清县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '黑龙江省',
            children: [
                {
                    label: '哈尔滨市',
                    children: [
                        '松北区',
                        '道里区',
                        '南岗区',
                        '平房区',
                        '香坊区',
                        '道外区',
                        '呼兰区',
                        '阿城区',
                        '双城市',
                        '尚志市',
                        '五常市',
                        '宾县',
                        '方正县',
                        '通河县',
                        '巴彦县',
                        '延寿县',
                        '木兰县',
                        '依兰县',
                        '其他'
                    ]
                },
                {
                    label: '齐齐哈尔市',
                    children: [
                        '龙沙区',
                        '昂昂溪区',
                        '铁锋区',
                        '建华区',
                        '富拉尔基区',
                        '碾子山区',
                        '梅里斯达斡尔族区',
                        '讷河市',
                        '富裕县',
                        '拜泉县',
                        '甘南县',
                        '依安县',
                        '克山县',
                        '泰来县',
                        '克东县',
                        '龙江县',
                        '其他'
                    ]
                },
                {
                    label: '鹤岗市',
                    children: ['兴山区', '工农区', '南山区', '兴安区', '向阳区', '东山区', '萝北县', '绥滨县', '其他']
                },
                {
                    label: '双鸭山',
                    children: ['尖山区', '岭东区', '四方台区', '宝山区', '集贤县', '宝清县', '友谊县', '饶河县', '其他']
                },
                {
                    label: '鸡西市',
                    children: ['鸡冠区', '恒山区', '城子河区', '滴道区', '梨树区', '麻山区', '密山市', '虎林市', '鸡东县', '其他']
                },
                {
                    label: '大庆市',
                    children: [
                        '萨尔图区',
                        '红岗区',
                        '龙凤区',
                        '让胡路区',
                        '大同区',
                        '林甸县',
                        '肇州县',
                        '肇源县',
                        '杜尔伯特蒙古族自治县',
                        '其他'
                    ]
                },
                {
                    label: '伊春市',
                    children: [
                        '伊春区',
                        '带岭区',
                        '南岔区',
                        '金山屯区',
                        '西林区',
                        '美溪区',
                        '乌马河区',
                        '翠峦区',
                        '友好区',
                        '上甘岭区',
                        '五营区',
                        '红星区',
                        '新青区',
                        '汤旺河区',
                        '乌伊岭区',
                        '铁力市',
                        '嘉荫县',
                        '其他'
                    ]
                },
                {
                    label: '牡丹江市',
                    children: [
                        '爱民区',
                        '东安区',
                        '阳明区',
                        '西安区',
                        '绥芬河市',
                        '宁安市',
                        '海林市',
                        '穆棱市',
                        '林口县',
                        '东宁县',
                        '其他'
                    ]
                },
                {
                    label: '佳木斯市',
                    children: [
                        '向阳区',
                        '前进区',
                        '东风区',
                        '郊区',
                        '同江市',
                        '富锦市',
                        '桦川县',
                        '抚远县',
                        '桦南县',
                        '汤原县',
                        '其他'
                    ]
                },
                {
                    label: '七台河市',
                    children: ['桃山区', '新兴区', '茄子河区', '勃利县', '其他']
                },
                {
                    label: '黑河市',
                    children: ['爱辉区', '北安市', '五大连池市', '逊克县', '嫩江县', '孙吴县', '其他']
                },
                {
                    label: '绥化市',
                    children: [
                        '北林区',
                        '安达市',
                        '肇东市',
                        '海伦市',
                        '绥棱县',
                        '兰西县',
                        '明水县',
                        '青冈县',
                        '庆安县',
                        '望奎县',
                        '其他'
                    ]
                },
                {
                    label: '大兴安岭地区',
                    children: ['呼玛县', '塔河县', '漠河县', '大兴安岭辖区', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '上海',
            children: [
                {
                    label: '上海市',
                    children: [
                        '黄浦区',
                        '卢湾区',
                        '徐汇区',
                        '长宁区',
                        '静安区',
                        '普陀区',
                        '闸北区',
                        '虹口区',
                        '杨浦区',
                        '宝山区',
                        '闵行区',
                        '嘉定区',
                        '松江区',
                        '金山区',
                        '青浦区',
                        '南汇区',
                        '奉贤区',
                        '浦东新区',
                        '崇明县',
                        '其他'
                    ]
                }
            ]
        },
        {
            label: '江苏省',
            children: [
                {
                    label: '南京市',
                    children: [
                        '玄武区',
                        '白下区',
                        '秦淮区',
                        '建邺区',
                        '鼓楼区',
                        '下关区',
                        '栖霞区',
                        '雨花台区',
                        '浦口区',
                        '江宁区',
                        '六合区',
                        '溧水县',
                        '高淳县',
                        '其他'
                    ]
                },
                {
                    label: '苏州市',
                    children: [
                        '金阊区',
                        '平江区',
                        '沧浪区',
                        '虎丘区',
                        '吴中区',
                        '相城区',
                        '常熟市',
                        '张家港市',
                        '昆山市',
                        '吴江市',
                        '太仓市',
                        '其他'
                    ]
                },
                {
                    label: '无锡市',
                    children: ['崇安区', '南长区', '北塘区', '滨湖区', '锡山区', '惠山区', '江阴市', '宜兴市', '其他']
                },
                {
                    label: '常州市',
                    children: ['钟楼区', '天宁区', '戚墅堰区', '新北区', '武进区', '金坛市', '溧阳市', '其他']
                },
                {
                    label: '镇江市',
                    children: ['京口区', '润州区', '丹徒区', '丹阳市', '扬中市', '句容市', '其他']
                },
                {
                    label: '南通市',
                    children: ['崇川区', '港闸区', '通州市', '如皋市', '海门市', '启东市', '海安县', '如东县', '其他']
                },
                {
                    label: '泰州市',
                    children: ['海陵区', '高港区', '姜堰市', '泰兴市', '靖江市', '兴化市', '其他']
                },
                {
                    label: '扬州市',
                    children: ['广陵区', '维扬区', '邗江区', '江都市', '仪征市', '高邮市', '宝应县', '其他']
                },
                {
                    label: '盐城市',
                    children: ['亭湖区', '盐都区', '大丰市', '东台市', '建湖县', '射阳县', '阜宁县', '滨海县', '响水县', '其他']
                },
                {
                    label: '连云港市',
                    children: ['新浦区', '海州区', '连云区', '东海县', '灌云县', '赣榆县', '灌南县', '其他']
                },
                {
                    label: '徐州市',
                    children: [
                        '云龙区',
                        '鼓楼区',
                        '九里区',
                        '泉山区',
                        '贾汪区',
                        '邳州市',
                        '新沂市',
                        '铜山县',
                        '睢宁县',
                        '沛县',
                        '丰县',
                        '其他'
                    ]
                },
                {
                    label: '淮安市',
                    children: ['清河区', '清浦区', '楚州区', '淮阴区', '涟水县', '洪泽县', '金湖县', '盱眙县', '其他']
                },
                {
                    label: '宿迁市',
                    children: ['宿城区', '宿豫区', '沭阳县', '泗阳县', '泗洪县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '浙江省',
            children: [
                {
                    label: '杭州市',
                    children: [
                        '拱墅区',
                        '西湖区',
                        '上城区',
                        '下城区',
                        '江干区',
                        '滨江区',
                        '余杭区',
                        '萧山区',
                        '建德市',
                        '富阳市',
                        '临安市',
                        '桐庐县',
                        '淳安县',
                        '其他'
                    ]
                },
                {
                    label: '宁波市',
                    children: [
                        '海曙区',
                        '江东区',
                        '江北区',
                        '镇海区',
                        '北仑区',
                        '鄞州区',
                        '余姚市',
                        '慈溪市',
                        '奉化市',
                        '宁海县',
                        '象山县',
                        '其他'
                    ]
                },
                {
                    label: '温州市',
                    children: [
                        '鹿城区',
                        '龙湾区',
                        '瓯海区',
                        '瑞安市',
                        '乐清市',
                        '永嘉县',
                        '洞头县',
                        '平阳县',
                        '苍南县',
                        '文成县',
                        '泰顺县',
                        '其他'
                    ]
                },
                {
                    label: '嘉兴市',
                    children: ['秀城区', '秀洲区', '海宁市', '平湖市', '桐乡市', '嘉善县', '海盐县', '其他']
                },
                {
                    label: '湖州市',
                    children: ['吴兴区', '南浔区', '长兴县', '德清县', '安吉县', '其他']
                },
                {
                    label: '绍兴市',
                    children: ['越城区', '诸暨市', '上虞市', '嵊州市', '绍兴县', '新昌县', '其他']
                },
                {
                    label: '金华市',
                    children: ['婺城区', '金东区', '兰溪市', '义乌市', '东阳市', '永康市', '武义县', '浦江县', '磐安县', '其他']
                },
                {
                    label: '衢州市',
                    children: ['柯城区', '衢江区', '江山市', '龙游县', '常山县', '开化县', '其他']
                },
                {
                    label: '舟山市',
                    children: ['定海区', '普陀区', '岱山县', '嵊泗县', '其他']
                },
                {
                    label: '台州市',
                    children: ['椒江区', '黄岩区', '路桥区', '临海市', '温岭市', '玉环县', '天台县', '仙居县', '三门县', '其他']
                },
                {
                    label: '丽水市',
                    children: [
                        '莲都区',
                        '龙泉市',
                        '缙云县',
                        '青田县',
                        '云和县',
                        '遂昌县',
                        '松阳县',
                        '庆元县',
                        '景宁畲族自治县',
                        '其他'
                    ]
                },
                {
                    label: '其他市',
                    children: ['其他']
                }
            ]
        },
        {
            label: '安徽省',
            children: [
                {
                    label: '合肥市',
                    children: ['庐阳区', '瑶海区', '蜀山区', '包河区', '长丰县', '肥东县', '肥西县', '其他']
                },
                {
                    label: '芜湖市',
                    children: ['镜湖区', '弋江区', '鸠江区', '三山区', '芜湖县', '南陵县', '繁昌县', '其他']
                },
                {
                    label: '蚌埠市',
                    children: ['蚌山区', '龙子湖区', '禹会区', '淮上区', '怀远县', '固镇县', '五河县', '其他']
                },
                {
                    label: '淮南市',
                    children: ['田家庵区', '大通区', '谢家集区', '八公山区', '潘集区', '凤台县', '其他']
                },
                {
                    label: '马鞍山市',
                    children: ['雨山区', '花山区', '金家庄区', '当涂县', '其他']
                },
                {
                    label: '淮北市',
                    children: ['相山区', '杜集区', '烈山区', '濉溪县', '其他']
                },
                {
                    label: '铜陵市',
                    children: ['铜官山区', '狮子山区', '郊区', '铜陵县', '其他']
                },
                {
                    label: '安庆市',
                    children: [
                        '迎江区',
                        '大观区',
                        '宜秀区',
                        '桐城市',
                        '宿松县',
                        '枞阳县',
                        '太湖县',
                        '怀宁县',
                        '岳西县',
                        '望江县',
                        '潜山县',
                        '其他'
                    ]
                },
                {
                    label: '黄山市',
                    children: ['屯溪区', '黄山区', '徽州区', '休宁县', '歙县', '祁门县', '黟县', '其他']
                },
                {
                    label: '滁州市',
                    children: ['琅琊区', '南谯区', '天长市', '明光市', '全椒县', '来安县', '定远县', '凤阳县', '其他']
                },
                {
                    label: '阜阳市',
                    children: ['颍州区', '颍东区', '颍泉区', '界首市', '临泉县', '颍上县', '阜南县', '太和县', '其他']
                },
                {
                    label: '宿州市',
                    children: ['埇桥区', '萧县', '泗县', '砀山县', '灵璧县', '其他']
                },
                {
                    label: '巢湖市',
                    children: ['居巢区', '含山县', '无为县', '庐江县', '和县', '其他']
                },
                {
                    label: '六安市',
                    children: ['金安区', '裕安区', '寿县', '霍山县', '霍邱县', '舒城县', '金寨县', '其他']
                },
                {
                    label: '亳州市',
                    children: ['谯城区', '利辛县', '涡阳县', '蒙城县', '其他']
                },
                {
                    label: '池州市',
                    children: ['贵池区', '东至县', '石台县', '青阳县', '其他']
                },
                {
                    label: '宣城市',
                    children: ['宣州区', '宁国市', '广德县', '郎溪县', '泾县', '旌德县', '绩溪县', '其他']
                },
                {
                    label: '其他市',
                    children: ['其他']
                }
            ]
        },
        {
            label: '福建省',
            children: [
                {
                    label: '福州市',
                    children: [
                        '鼓楼区',
                        '台江区',
                        '仓山区',
                        '马尾区',
                        '晋安区',
                        '福清市',
                        '长乐市',
                        '闽侯县',
                        '闽清县',
                        '永泰县',
                        '连江县',
                        '罗源县',
                        '平潭县',
                        '其他'
                    ]
                },
                {
                    label: '厦门市',
                    children: ['思明区', '海沧区', '湖里区', '集美区', '同安区', '翔安区', '其他']
                },
                {
                    label: '莆田市',
                    children: ['城厢区', '涵江区', '荔城区', '秀屿区', '仙游县', '其他']
                },
                {
                    label: '三明市',
                    children: [
                        '梅列区',
                        '三元区',
                        '永安市',
                        '明溪县',
                        '将乐县',
                        '大田县',
                        '宁化县',
                        '建宁县',
                        '沙县',
                        '尤溪县',
                        '清流县',
                        '泰宁县',
                        '其他'
                    ]
                },
                {
                    label: '泉州市',
                    children: [
                        '鲤城区',
                        '丰泽区',
                        '洛江区',
                        '泉港区',
                        '石狮市',
                        '晋江市',
                        '南安市',
                        '惠安县',
                        '永春县',
                        '安溪县',
                        '德化县',
                        '金门县',
                        '其他'
                    ]
                },
                {
                    label: '漳州市',
                    children: [
                        '芗城区',
                        '龙文区',
                        '龙海市',
                        '平和县',
                        '南靖县',
                        '诏安县',
                        '漳浦县',
                        '华安县',
                        '东山县',
                        '长泰县',
                        '云霄县',
                        '其他'
                    ]
                },
                {
                    label: '南平市',
                    children: [
                        '延平区',
                        '建瓯市',
                        '邵武市',
                        '武夷山市',
                        '建阳市',
                        '松溪县',
                        '光泽县',
                        '顺昌县',
                        '浦城县',
                        '政和县',
                        '其他'
                    ]
                },
                {
                    label: '龙岩市',
                    children: ['新罗区', '漳平市', '长汀县', '武平县', '上杭县', '永定县', '连城县', '其他']
                },
                {
                    label: '宁德市',
                    children: ['蕉城区', '福安市', '福鼎市', '寿宁县', '霞浦县', '柘荣县', '屏南县', '古田县', '周宁县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '江西省',
            children: [
                {
                    label: '南昌市',
                    children: [
                        '东湖区',
                        '西湖区',
                        '青云谱区',
                        '湾里区',
                        '青山湖区',
                        '新建县',
                        '南昌县',
                        '进贤县',
                        '安义县',
                        '其他'
                    ]
                },
                {
                    label: '景德镇市',
                    children: ['珠山区', '昌江区', '乐平市', '浮梁县', '其他']
                },
                {
                    label: '萍乡市',
                    children: ['安源区', '湘东区', '莲花县', '上栗县', '芦溪县', '其他']
                },
                {
                    label: '九江市',
                    children: [
                        '浔阳区',
                        '庐山区',
                        '瑞昌市',
                        '九江县',
                        '星子县',
                        '武宁县',
                        '彭泽县',
                        '永修县',
                        '修水县',
                        '湖口县',
                        '德安县',
                        '都昌县',
                        '其他'
                    ]
                },
                {
                    label: '新余市',
                    children: ['渝水区', '分宜县', '其他']
                },
                {
                    label: '鹰潭市',
                    children: ['月湖区', '贵溪市', '余江县', '其他']
                },
                {
                    label: '赣州市',
                    children: [
                        '章贡区',
                        '瑞金市',
                        '南康市',
                        '石城县',
                        '安远县',
                        '赣县',
                        '宁都县',
                        '寻乌县',
                        '兴国县',
                        '定南县',
                        '上犹县',
                        '于都县',
                        '龙南县',
                        '崇义县',
                        '信丰县',
                        '全南县',
                        '大余县',
                        '会昌县',
                        '其他'
                    ]
                },
                {
                    label: '吉安市',
                    children: [
                        '吉州区',
                        '青原区',
                        '井冈山市',
                        '吉安县',
                        '永丰县',
                        '永新县',
                        '新干县',
                        '泰和县',
                        '峡江县',
                        '遂川县',
                        '安福县',
                        '吉水县',
                        '万安县',
                        '其他'
                    ]
                },
                {
                    label: '宜春市',
                    children: [
                        '袁州区',
                        '丰城市',
                        '樟树市',
                        '高安市',
                        '铜鼓县',
                        '靖安县',
                        '宜丰县',
                        '奉新县',
                        '万载县',
                        '上高县',
                        '其他'
                    ]
                },
                {
                    label: '抚州市',
                    children: [
                        '临川区',
                        '南丰县',
                        '乐安县',
                        '金溪县',
                        '南城县',
                        '东乡县',
                        '资溪县',
                        '宜黄县',
                        '广昌县',
                        '黎川县',
                        '崇仁县',
                        '其他'
                    ]
                },
                {
                    label: '上饶市',
                    children: [
                        '信州区',
                        '德兴市',
                        '上饶县',
                        '广丰县',
                        '鄱阳县',
                        '婺源县',
                        '铅山县',
                        '余干县',
                        '横峰县',
                        '弋阳县',
                        '玉山县',
                        '万年县',
                        '其他'
                    ]
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '山东省',
            children: [
                {
                    label: '济南市',
                    children: [
                        '市中区',
                        '历下区',
                        '天桥区',
                        '槐荫区',
                        '历城区',
                        '长清区',
                        '章丘市',
                        '平阴县',
                        '济阳县',
                        '商河县',
                        '其他'
                    ]
                },
                {
                    label: '青岛市',
                    children: [
                        '市南区',
                        '市北区',
                        '城阳区',
                        '四方区',
                        '李沧区',
                        '黄岛区',
                        '崂山区',
                        '胶南市',
                        '胶州市',
                        '平度市',
                        '莱西市',
                        '即墨市',
                        '其他'
                    ]
                },
                {
                    label: '淄博市',
                    children: ['张店区', '临淄区', '淄川区', '博山区', '周村区', '桓台县', '高青县', '沂源县', '其他']
                },
                {
                    label: '枣庄市',
                    children: ['市中区', '山亭区', '峄城区', '台儿庄区', '薛城区', '滕州市', '其他']
                },
                {
                    label: '东营市',
                    children: ['东营区', '河口区', '垦利县', '广饶县', '利津县', '其他']
                },
                {
                    label: '烟台市',
                    children: [
                        '芝罘区',
                        '福山区',
                        '牟平区',
                        '莱山区',
                        '龙口市',
                        '莱阳市',
                        '莱州市',
                        '招远市',
                        '蓬莱市',
                        '栖霞市',
                        '海阳市',
                        '长岛县',
                        '其他'
                    ]
                },
                {
                    label: '潍坊市',
                    children: [
                        '潍城区',
                        '寒亭区',
                        '坊子区',
                        '奎文区',
                        '青州市',
                        '诸城市',
                        '寿光市',
                        '安丘市',
                        '高密市',
                        '昌邑市',
                        '昌乐县',
                        '临朐县',
                        '其他'
                    ]
                },
                {
                    label: '济宁市',
                    children: [
                        '市中区',
                        '任城区',
                        '曲阜市',
                        '兖州市',
                        '邹城市',
                        '鱼台县',
                        '金乡县',
                        '嘉祥县',
                        '微山县',
                        '汶上县',
                        '泗水县',
                        '梁山县',
                        '其他'
                    ]
                },
                {
                    label: '泰安市',
                    children: ['泰山区', '岱岳区', '新泰市', '肥城市', '宁阳县', '东平县', '其他']
                },
                {
                    label: '威海市',
                    children: ['环翠区', '乳山市', '文登市', '荣成市', '其他']
                },
                {
                    label: '日照市',
                    children: ['东港区', '岚山区', '五莲县', '莒县', '其他']
                },
                {
                    label: '莱芜市',
                    children: ['莱城区', '钢城区', '其他']
                },
                {
                    label: '临沂市',
                    children: [
                        '兰山区',
                        '罗庄区',
                        '河东区',
                        '沂南县',
                        '郯城县',
                        '沂水县',
                        '苍山县',
                        '费县',
                        '平邑县',
                        '莒南县',
                        '蒙阴县',
                        '临沭县',
                        '其他'
                    ]
                },
                {
                    label: '德州市',
                    children: [
                        '德城区',
                        '乐陵市',
                        '禹城市',
                        '陵县',
                        '宁津县',
                        '齐河县',
                        '武城县',
                        '庆云县',
                        '平原县',
                        '夏津县',
                        '临邑县',
                        '其他'
                    ]
                },
                {
                    label: '聊城市',
                    children: ['东昌府区', '临清市', '高唐县', '阳谷县', '茌平县', '莘县', '东阿县', '冠县', '其他']
                },
                {
                    label: '滨州市',
                    children: ['滨城区', '邹平县', '沾化县', '惠民县', '博兴县', '阳信县', '无棣县', '其他']
                },
                {
                    label: '菏泽市',
                    children: ['牡丹区', '鄄城县', '单县', '郓城县', '曹县', '定陶县', '巨野县', '东明县', '成武县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '河南省',
            children: [
                {
                    label: '郑州市',
                    children: [
                        '中原区',
                        '金水区',
                        '二七区',
                        '管城回族区',
                        '上街区',
                        '惠济区',
                        '巩义市',
                        '新郑市',
                        '新密市',
                        '登封市',
                        '荥阳市',
                        '中牟县',
                        '其他'
                    ]
                },
                {
                    label: '开封市',
                    children: [
                        '鼓楼区',
                        '龙亭区',
                        '顺河回族区',
                        '禹王台区',
                        '金明区',
                        '开封县',
                        '尉氏县',
                        '兰考县',
                        '杞县',
                        '通许县',
                        '其他'
                    ]
                },
                {
                    label: '洛阳市',
                    children: [
                        '西工区',
                        '老城区',
                        '涧西区',
                        '瀍河回族区',
                        '洛龙区',
                        '吉利区',
                        '偃师市',
                        '孟津县',
                        '汝阳县',
                        '伊川县',
                        '洛宁县',
                        '嵩县',
                        '宜阳县',
                        '新安县',
                        '栾川县',
                        '其他'
                    ]
                },
                {
                    label: '平顶山市',
                    children: [
                        '新华区',
                        '卫东区',
                        '湛河区',
                        '石龙区',
                        '汝州市',
                        '舞钢市',
                        '宝丰县',
                        '叶县',
                        '郏县',
                        '鲁山县',
                        '其他'
                    ]
                },
                {
                    label: '安阳市',
                    children: ['北关区', '文峰区', '殷都区', '龙安区', '林州市', '安阳县', '滑县', '内黄县', '汤阴县', '其他']
                },
                {
                    label: '鹤壁市',
                    children: ['淇滨区', '山城区', '鹤山区', '浚县', '淇县', '其他']
                },
                {
                    label: '新乡市',
                    children: [
                        '卫滨区',
                        '红旗区',
                        '凤泉区',
                        '牧野区',
                        '卫辉市',
                        '辉县市',
                        '新乡县',
                        '获嘉县',
                        '原阳县',
                        '长垣县',
                        '封丘县',
                        '延津县',
                        '其他'
                    ]
                },
                {
                    label: '焦作市',
                    children: [
                        '解放区',
                        '中站区',
                        '马村区',
                        '山阳区',
                        '沁阳市',
                        '孟州市',
                        '修武县',
                        '温县',
                        '武陟县',
                        '博爱县',
                        '其他'
                    ]
                },
                {
                    label: '濮阳市',
                    children: ['华龙区', '濮阳县', '南乐县', '台前县', '清丰县', '范县', '其他']
                },
                {
                    label: '许昌市',
                    children: ['魏都区', '禹州市', '长葛市', '许昌县', '鄢陵县', '襄城县', '其他']
                },
                {
                    label: '漯河市',
                    children: ['源汇区', '郾城区', '召陵区', '临颍县', '舞阳县', '其他']
                },
                {
                    label: '三门峡市',
                    children: ['湖滨区', '义马市', '灵宝市', '渑池县', '卢氏县', '陕县', '其他']
                },
                {
                    label: '南阳市',
                    children: [
                        '卧龙区',
                        '宛城区',
                        '邓州市',
                        '桐柏县',
                        '方城县',
                        '淅川县',
                        '镇平县',
                        '唐河县',
                        '南召县',
                        '内乡县',
                        '新野县',
                        '社旗县',
                        '西峡县',
                        '其他'
                    ]
                },
                {
                    label: '商丘市',
                    children: ['梁园区', '睢阳区', '永城市', '宁陵县', '虞城县', '民权县', '夏邑县', '柘城县', '睢县', '其他']
                },
                {
                    label: '信阳市',
                    children: [
                        '浉河区',
                        '平桥区',
                        '潢川县',
                        '淮滨县',
                        '息县',
                        '新县',
                        '商城县',
                        '固始县',
                        '罗山县',
                        '光山县',
                        '其他'
                    ]
                },
                {
                    label: '周口市',
                    children: [
                        '川汇区',
                        '项城市',
                        '商水县',
                        '淮阳县',
                        '太康县',
                        '鹿邑县',
                        '西华县',
                        '扶沟县',
                        '沈丘县',
                        '郸城县',
                        '其他'
                    ]
                },
                {
                    label: '驻马店市',
                    children: [
                        '驿城区',
                        '确山县',
                        '新蔡县',
                        '上蔡县',
                        '西平县',
                        '泌阳县',
                        '平舆县',
                        '汝南县',
                        '遂平县',
                        '正阳县',
                        '其他'
                    ]
                },
                {
                    label: '焦作市',
                    children: ['济源市', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '湖北省',
            children: [
                {
                    label: '武汉市',
                    children: [
                        '江岸区',
                        '武昌区',
                        '江汉区',
                        '硚口区',
                        '汉阳区',
                        '青山区',
                        '洪山区',
                        '东西湖区',
                        '汉南区',
                        '蔡甸区',
                        '江夏区',
                        '黄陂区',
                        '新洲区',
                        '其他'
                    ]
                },
                {
                    label: '黄石市',
                    children: ['黄石港区', '西塞山区', '下陆区', '铁山区', '大冶市', '阳新县', '其他']
                },
                {
                    label: '十堰市',
                    children: ['张湾区', '茅箭区', '丹江口市', '郧县', '竹山县', '房县', '郧西县', '竹溪县', '其他']
                },
                {
                    label: '荆州市',
                    children: ['沙市区', '荆州区', '洪湖市', '石首市', '松滋市', '监利县', '公安县', '江陵县', '其他']
                },
                {
                    label: '宜昌市',
                    children: [
                        '西陵区',
                        '伍家岗区',
                        '点军区',
                        '猇亭区',
                        '夷陵区',
                        '宜都市',
                        '当阳市',
                        '枝江市',
                        '秭归县',
                        '远安县',
                        '兴山县',
                        '五峰土家族自治县',
                        '长阳土家族自治县',
                        '其他'
                    ]
                },
                {
                    label: '襄樊市',
                    children: ['襄城区', '樊城区', '襄阳区', '老河口市', '枣阳市', '宜城市', '南漳县', '谷城县', '保康县', '其他']
                },
                {
                    label: '鄂州市',
                    children: ['鄂城区', '华容区', '梁子湖区', '其他']
                },
                {
                    label: '荆门市',
                    children: ['东宝区', '掇刀区', '钟祥市', '京山县', '沙洋县', '其他']
                },
                {
                    label: '孝感市',
                    children: ['孝南区', '应城市', '安陆市', '汉川市', '云梦县', '大悟县', '孝昌县', '其他']
                },
                {
                    label: '黄冈市',
                    children: [
                        '黄州区',
                        '麻城市',
                        '武穴市',
                        '红安县',
                        '罗田县',
                        '浠水县',
                        '蕲春县',
                        '黄梅县',
                        '英山县',
                        '团风县',
                        '其他'
                    ]
                },
                {
                    label: '咸宁市',
                    children: ['咸安区', '赤壁市', '嘉鱼县', '通山县', '崇阳县', '通城县', '其他']
                },
                {
                    label: '随州市',
                    children: ['曾都区', '广水市', '其他']
                },
                {
                    label: '恩施土家族苗族自治州',
                    children: ['恩施市', '利川市', '建始县', '来凤县', '巴东县', '鹤峰县', '宣恩县', '咸丰县', '其他']
                },
                {
                    label: '仙桃市',
                    children: ['仙桃']
                },
                {
                    label: '天门市',
                    children: ['天门']
                },
                {
                    label: '潜江市',
                    children: ['潜江']
                },
                {
                    label: '神农架林区',
                    children: ['神农架林区']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '湖南省',
            children: [
                {
                    label: '长沙市',
                    children: ['岳麓区', '芙蓉区', '天心区', '开福区', '雨花区', '浏阳市', '长沙县', '望城县', '宁乡县', '其他']
                },
                {
                    label: '株洲市',
                    children: ['天元区', '荷塘区', '芦淞区', '石峰区', '醴陵市', '株洲县', '炎陵县', '茶陵县', '攸县', '其他']
                },
                {
                    label: '湘潭市',
                    children: ['岳塘区', '雨湖区', '湘乡市', '韶山市', '湘潭县', '其他']
                },
                {
                    label: '衡阳市',
                    children: [
                        '雁峰区',
                        '珠晖区',
                        '石鼓区',
                        '蒸湘区',
                        '南岳区',
                        '耒阳市',
                        '常宁市',
                        '衡阳县',
                        '衡东县',
                        '衡山县',
                        '衡南县',
                        '祁东县',
                        '其他'
                    ]
                },
                {
                    label: '邵阳市',
                    children: [
                        '双清区',
                        '大祥区',
                        '北塔区',
                        '武冈市',
                        '邵东县',
                        '洞口县',
                        '新邵县',
                        '绥宁县',
                        '新宁县',
                        '邵阳县',
                        '隆回县',
                        '城步苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '岳阳市',
                    children: ['岳阳楼区', '云溪区', '君山区', '临湘市', '汨罗市', '岳阳县', '湘阴县', '平江县', '华容县', '其他']
                },
                {
                    label: '常德市',
                    children: ['武陵区', '鼎城区', '津市市', '澧县', '临澧县', '桃源县', '汉寿县', '安乡县', '石门县', '其他']
                },
                {
                    label: '张家界市',
                    children: ['永定区', '武陵源区', '慈利县', '桑植县', '其他']
                },
                {
                    label: '益阳市',
                    children: ['赫山区', '资阳区', '沅江市', '桃江县', '南县', '安化县', '其他']
                },
                {
                    label: '郴州市',
                    children: [
                        '北湖区',
                        '苏仙区',
                        '资兴市',
                        '宜章县',
                        '汝城县',
                        '安仁县',
                        '嘉禾县',
                        '临武县',
                        '桂东县',
                        '永兴县',
                        '桂阳县',
                        '其他'
                    ]
                },
                {
                    label: '永州市',
                    children: [
                        '冷水滩区',
                        '零陵区',
                        '祁阳县',
                        '蓝山县',
                        '宁远县',
                        '新田县',
                        '东安县',
                        '江永县',
                        '道县',
                        '双牌县',
                        '江华瑶族自治县',
                        '其他'
                    ]
                },
                {
                    label: '怀化市',
                    children: [
                        '鹤城区',
                        '洪江市',
                        '会同县',
                        '沅陵县',
                        '辰溪县',
                        '溆浦县',
                        '中方县',
                        '新晃侗族自治县',
                        '芷江侗族自治县',
                        '通道侗族自治县',
                        '靖州苗族侗族自治县',
                        '麻阳苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '娄底市',
                    children: ['娄星区', '冷水江市', '涟源市', '新化县', '双峰县', '其他']
                },
                {
                    label: '湘西土家族苗族自治州',
                    children: ['吉首市', '古丈县', '龙山县', '永顺县', '凤凰县', '泸溪县', '保靖县', '花垣县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '广东省',
            children: [
                {
                    label: '广州市',
                    children: [
                        '越秀区',
                        '荔湾区',
                        '海珠区',
                        '天河区',
                        '白云区',
                        '黄埔区',
                        '番禺区',
                        '花都区',
                        '南沙区',
                        '萝岗区',
                        '增城市',
                        '从化市',
                        '其他'
                    ]
                },
                {
                    label: '深圳市',
                    children: ['福田区', '罗湖区', '南山区', '宝安区', '龙岗区', '盐田区', '其他']
                },
                {
                    label: '东莞市',
                    children: ['莞城', '常平', '塘厦', '塘厦', '塘厦', '其他']
                },
                {
                    label: '中山市',
                    children: ['中山']
                },
                {
                    label: '潮州市',
                    children: ['湘桥区', '潮安县', '饶平县', '其他']
                },
                {
                    label: '揭阳市',
                    children: ['榕城区', '揭东县', '揭西县', '惠来县', '普宁市', '其他']
                },
                {
                    label: '云浮市',
                    children: ['云城区', '新兴县', '郁南县', '云安县', '罗定市', '其他']
                },
                {
                    label: '珠海市',
                    children: ['香洲区', '斗门区', '金湾区', '其他']
                },
                {
                    label: '汕头市',
                    children: ['金平区', '濠江区', '龙湖区', '潮阳区', '潮南区', '澄海区', '南澳县', '其他']
                },
                {
                    label: '韶关市',
                    children: [
                        '浈江区',
                        '武江区',
                        '曲江区',
                        '乐昌市',
                        '南雄市',
                        '始兴县',
                        '仁化县',
                        '翁源县',
                        '新丰县',
                        '乳源瑶族自治县',
                        '其他'
                    ]
                },
                {
                    label: '佛山市',
                    children: ['禅城区', '南海区', '顺德区', '三水区', '高明区', '其他']
                },
                {
                    label: '江门市',
                    children: ['蓬江区', '江海区', '新会区', '恩平市', '台山市', '开平市', '鹤山市', '其他']
                },
                {
                    label: '湛江市',
                    children: ['赤坎区', '霞山区', '坡头区', '麻章区', '吴川市', '廉江市', '雷州市', '遂溪县', '徐闻县', '其他']
                },
                {
                    label: '茂名市',
                    children: ['茂南区', '茂港区', '化州市', '信宜市', '高州市', '电白县', '其他']
                },
                {
                    label: '肇庆市',
                    children: ['端州区', '鼎湖区', '高要市', '四会市', '广宁县', '怀集县', '封开县', '德庆县', '其他']
                },
                {
                    label: '惠州市',
                    children: ['惠城区', '惠阳区', '博罗县', '惠东县', '龙门县', '其他']
                },
                {
                    label: '梅州市',
                    children: ['梅江区', '兴宁市', '梅县', '大埔县', '丰顺县', '五华县', '平远县', '蕉岭县', '其他']
                },
                {
                    label: '汕尾市',
                    children: ['城区', '陆丰市', '海丰县', '陆河县', '其他']
                },
                {
                    label: '河源市',
                    children: ['源城区', '紫金县', '龙川县', '连平县', '和平县', '东源县', '其他']
                },
                {
                    label: '阳江市',
                    children: ['江城区', '阳春市', '阳西县', '阳东县', '其他']
                },
                {
                    label: '清远市',
                    children: [
                        '清城区',
                        '英德市',
                        '连州市',
                        '佛冈县',
                        '阳山县',
                        '清新县',
                        '连山壮族瑶族自治县',
                        '连南瑶族自治县',
                        '其他'
                    ]
                }
            ]
        },
        {
            label: '广西',
            children: [
                {
                    label: '南宁市',
                    children: [
                        '青秀区',
                        '兴宁区',
                        '西乡塘区',
                        '良庆区',
                        '江南区',
                        '邕宁区',
                        '武鸣县',
                        '隆安县',
                        '马山县',
                        '上林县',
                        '宾阳县',
                        '横县',
                        '其他'
                    ]
                },
                {
                    label: '柳州市',
                    children: [
                        '城中区',
                        '鱼峰区',
                        '柳北区',
                        '柳南区',
                        '柳江县',
                        '柳城县',
                        '鹿寨县',
                        '融安县',
                        '融水苗族自治县',
                        '三江侗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '桂林市',
                    children: [
                        '象山区',
                        '秀峰区',
                        '叠彩区',
                        '七星区',
                        '雁山区',
                        '阳朔县',
                        '临桂县',
                        '灵川县',
                        '全州县',
                        '平乐县',
                        '兴安县',
                        '灌阳县',
                        '荔浦县',
                        '资源县',
                        '永福县',
                        '龙胜各族自治县',
                        '恭城瑶族自治县',
                        '其他'
                    ]
                },
                {
                    label: '梧州市',
                    children: ['万秀区', '蝶山区', '长洲区', '岑溪市', '苍梧县', '藤县', '蒙山县', '其他']
                },
                {
                    label: '北海市',
                    children: ['海城区', '银海区', '铁山港区', '合浦县', '其他']
                },
                {
                    label: '防城港市',
                    children: ['港口区', '防城区', '东兴市', '上思县', '其他']
                },
                {
                    label: '钦州市',
                    children: ['钦南区', '钦北区', '灵山县', '浦北县', '其他']
                },
                {
                    label: '贵港市',
                    children: ['港北区', '港南区', '覃塘区', '桂平市', '平南县', '其他']
                },
                {
                    label: '玉林市',
                    children: ['玉州区', '北流市', '容县', '陆川县', '博白县', '兴业县', '其他']
                },
                {
                    label: '百色市',
                    children: [
                        '右江区',
                        '凌云县',
                        '平果县',
                        '西林县',
                        '乐业县',
                        '德保县',
                        '田林县',
                        '田阳县',
                        '靖西县',
                        '田东县',
                        '那坡县',
                        '隆林各族自治县',
                        '其他'
                    ]
                },
                {
                    label: '贺州市',
                    children: ['八步区', '钟山县', '昭平县', '富川瑶族自治县', '其他']
                },
                {
                    label: '河池市',
                    children: [
                        '金城江区',
                        '宜州市',
                        '天峨县',
                        '凤山县',
                        '南丹县',
                        '东兰县',
                        '都安瑶族自治县',
                        '罗城仫佬族自治县',
                        '巴马瑶族自治县',
                        '环江毛南族自治县',
                        '大化瑶族自治县',
                        '其他'
                    ]
                },
                {
                    label: '来宾市',
                    children: ['兴宾区', '合山市', '象州县', '武宣县', '忻城县', '金秀瑶族自治县', '其他']
                },
                {
                    label: '崇左市',
                    children: ['江州区', '凭祥市', '宁明县', '扶绥县', '龙州县', '大新县', '天等县', '其他']
                },
                {
                    label: '其他市',
                    children: ['其他']
                }
            ]
        },
        {
            label: '海南省',
            children: [
                {
                    label: '海口市',
                    children: ['龙华区', '秀英区', '琼山区', '美兰区', '其他']
                },
                {
                    label: '三亚市',
                    children: ['三亚市', '其他']
                },
                {
                    label: '五指山市',
                    children: ['五指山']
                },
                {
                    label: '琼海市',
                    children: ['琼海']
                },
                {
                    label: '儋州市',
                    children: ['儋州']
                },
                {
                    label: '文昌市',
                    children: ['文昌']
                },
                {
                    label: '万宁市',
                    children: ['万宁']
                },
                {
                    label: '东方市',
                    children: ['东方']
                },
                {
                    label: '澄迈县',
                    children: ['澄迈县']
                },
                {
                    label: '定安县',
                    children: ['定安县']
                },
                {
                    label: '屯昌县',
                    children: ['屯昌县']
                },
                {
                    label: '临高县',
                    children: ['临高县']
                },
                {
                    label: '白沙黎族自治县',
                    children: ['白沙黎族自治县']
                },
                {
                    label: '昌江黎族自治县',
                    children: ['昌江黎族自治县']
                },
                {
                    label: '乐东黎族自治县',
                    children: ['乐东黎族自治县']
                },
                {
                    label: '陵水黎族自治县',
                    children: ['陵水黎族自治县']
                },
                {
                    label: '保亭黎族苗族自治县',
                    children: ['保亭黎族苗族自治县']
                },
                {
                    label: '琼中黎族苗族自治县',
                    children: ['琼中黎族苗族自治县']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '重庆市',
            children: [
                {
                    label: '重庆市',
                    children: [
                        '渝中区',
                        '大渡口区',
                        '江北区',
                        '南岸区',
                        '北碚区',
                        '渝北区',
                        '巴南区',
                        '长寿区',
                        '双桥区',
                        '沙坪坝区',
                        '万盛区',
                        '万州区',
                        '涪陵区',
                        '黔江区',
                        '永川区',
                        '合川区',
                        '江津区',
                        '九龙坡区',
                        '南川区',
                        '綦江县',
                        '潼南县',
                        '荣昌县',
                        '璧山县',
                        '大足县',
                        '铜梁县',
                        '梁平县',
                        '开县',
                        '忠县',
                        '城口县',
                        '垫江县',
                        '武隆县',
                        '丰都县',
                        '奉节县',
                        '云阳县',
                        '巫溪县',
                        '巫山县',
                        '石柱土家族自治县',
                        '秀山土家族苗族自治县',
                        '酉阳土家族苗族自治县',
                        '彭水苗族土家族自治县',
                        '其他'
                    ]
                }
            ]
        },
        {
            label: '四川省',
            children: [
                {
                    label: '成都市',
                    children: [
                        '青羊区',
                        '锦江区',
                        '金牛区',
                        '武侯区',
                        '成华区',
                        '龙泉驿区',
                        '青白江区',
                        '新都区',
                        '温江区',
                        '都江堰市',
                        '彭州市',
                        '邛崃市',
                        '崇州市',
                        '金堂县',
                        '郫县',
                        '新津县',
                        '双流县',
                        '蒲江县',
                        '大邑县',
                        '其他'
                    ]
                },
                {
                    label: '自贡市',
                    children: ['大安区', '自流井区', '贡井区', '沿滩区', '荣县', '富顺县', '其他']
                },
                {
                    label: '攀枝花市',
                    children: ['仁和区', '米易县', '盐边县', '东区', '西区', '其他']
                },
                {
                    label: '泸州市',
                    children: ['江阳区', '纳溪区', '龙马潭区', '泸县', '合江县', '叙永县', '古蔺县', '其他']
                },
                {
                    label: '德阳市',
                    children: ['旌阳区', '广汉市', '什邡市', '绵竹市', '罗江县', '中江县', '其他']
                },
                {
                    label: '绵阳市',
                    children: [
                        '涪城区',
                        '游仙区',
                        '江油市',
                        '盐亭县',
                        '三台县',
                        '平武县',
                        '安县',
                        '梓潼县',
                        '北川羌族自治县',
                        '其他'
                    ]
                },
                {
                    label: '广元市',
                    children: ['元坝区', '朝天区', '青川县', '旺苍县', '剑阁县', '苍溪县', '市中区', '其他']
                },
                {
                    label: '遂宁市',
                    children: ['船山区', '安居区', '射洪县', '蓬溪县', '大英县', '其他']
                },
                {
                    label: '内江市',
                    children: ['市中区', '东兴区', '资中县', '隆昌县', '威远县', '其他']
                },
                {
                    label: '乐山市',
                    children: [
                        '市中区',
                        '五通桥区',
                        '沙湾区',
                        '金口河区',
                        '峨眉山市',
                        '夹江县',
                        '井研县',
                        '犍为县',
                        '沐川县',
                        '马边彝族自治县',
                        '峨边彝族自治县',
                        '其他'
                    ]
                },
                {
                    label: '南充',
                    children: ['顺庆区', '高坪区', '嘉陵区', '阆中市', '营山县', '蓬安县', '仪陇县', '南部县', '西充县', '其他']
                },
                {
                    label: '眉山市',
                    children: ['东坡区', '仁寿县', '彭山县', '洪雅县', '丹棱县', '青神县', '其他']
                },
                {
                    label: '宜宾市',
                    children: [
                        '翠屏区',
                        '宜宾县',
                        '兴文县',
                        '南溪县',
                        '珙县',
                        '长宁县',
                        '高县',
                        '江安县',
                        '筠连县',
                        '屏山县',
                        '其他'
                    ]
                },
                {
                    label: '广安市',
                    children: ['广安区', '华蓥市', '岳池县', '邻水县', '武胜县', '其他']
                },
                {
                    label: '达州市',
                    children: ['通川区', '万源市', '达县', '渠县', '宣汉县', '开江县', '大竹县', '其他']
                },
                {
                    label: '雅安市',
                    children: ['雨城区', '芦山县', '石棉县', '名山县', '天全县', '荥经县', '宝兴县', '汉源县', '其他']
                },
                {
                    label: '巴中市',
                    children: ['巴州区', '南江县', '平昌县', '通江县', '其他']
                },
                {
                    label: '资阳市',
                    children: ['雁江区', '简阳市', '安岳县', '乐至县', '其他']
                },
                {
                    label: '阿坝藏族羌族自治州',
                    children: [
                        '马尔康县',
                        '九寨沟县',
                        '红原县',
                        '汶川县',
                        '阿坝县',
                        '理县',
                        '若尔盖县',
                        '小金县',
                        '黑水县',
                        '金川县',
                        '松潘县',
                        '壤塘县',
                        '茂县',
                        '其他'
                    ]
                },
                {
                    label: '甘孜藏族自治州',
                    children: [
                        '康定县',
                        '丹巴县',
                        '炉霍县',
                        '九龙县',
                        '甘孜县',
                        '雅江县',
                        '新龙县',
                        '道孚县',
                        '白玉县',
                        '理塘县',
                        '德格县',
                        '乡城县',
                        '石渠县',
                        '稻城县',
                        '色达县',
                        '巴塘县',
                        '泸定县',
                        '得荣县',
                        '其他'
                    ]
                },
                {
                    label: '凉山彝族自治州',
                    children: [
                        '西昌市',
                        '美姑县',
                        '昭觉县',
                        '金阳县',
                        '甘洛县',
                        '布拖县',
                        '雷波县',
                        '普格县',
                        '宁南县',
                        '喜德县',
                        '会东县',
                        '越西县',
                        '会理县',
                        '盐源县',
                        '德昌县',
                        '冕宁县',
                        '木里藏族自治县',
                        '其他'
                    ]
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '贵州省',
            children: [
                {
                    label: '贵阳市',
                    children: [
                        '南明区',
                        '云岩区',
                        '花溪区',
                        '乌当区',
                        '白云区',
                        '小河区',
                        '清镇市',
                        '开阳县',
                        '修文县',
                        '息烽县',
                        '其他'
                    ]
                },
                {
                    label: '六盘水市',
                    children: ['钟山区', '水城县', '盘县', '六枝特区', '其他']
                },
                {
                    label: '遵义市',
                    children: [
                        '红花岗区',
                        '汇川区',
                        '赤水市',
                        '仁怀市',
                        '遵义县',
                        '绥阳县',
                        '桐梓县',
                        '习水县',
                        '凤冈县',
                        '正安县',
                        '余庆县',
                        '湄潭县',
                        '道真仡佬族苗族自治县',
                        '务川仡佬族苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '安顺市',
                    children: [
                        '西秀区',
                        '普定县',
                        '平坝县',
                        '镇宁布依族苗族自治县',
                        '紫云苗族布依族自治县',
                        '关岭布依族苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '铜仁地区',
                    children: [
                        '铜仁市',
                        '德江县',
                        '江口县',
                        '思南县',
                        '石阡县',
                        '玉屏侗族自治县',
                        '松桃苗族自治县',
                        '印江土家族苗族自治县',
                        '沿河土家族自治县',
                        '万山特区',
                        '其他'
                    ]
                },
                {
                    label: '毕节地区',
                    children: [
                        '毕节市',
                        '黔西县',
                        '大方县',
                        '织金县',
                        '金沙县',
                        '赫章县',
                        '纳雍县',
                        '威宁彝族回族苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '黔西南布依族苗族自治州',
                    children: ['兴义市', '望谟县', '兴仁县', '普安县', '册亨县', '晴隆县', '贞丰县', '安龙县', '其他']
                },
                {
                    label: '黔东南苗族侗族自治州',
                    children: [
                        '凯里市',
                        '施秉县',
                        '从江县',
                        '锦屏县',
                        '镇远县',
                        '麻江县',
                        '台江县',
                        '天柱县',
                        '黄平县',
                        '榕江县',
                        '剑河县',
                        '三穗县',
                        '雷山县',
                        '黎平县',
                        '岑巩县',
                        '丹寨县',
                        '其他'
                    ]
                },
                {
                    label: '黔南布依族苗族自治州',
                    children: [
                        '都匀市',
                        '福泉市',
                        '贵定县',
                        '惠水县',
                        '罗甸县',
                        '瓮安县',
                        '荔波县',
                        '龙里县',
                        '平塘县',
                        '长顺县',
                        '独山县',
                        '三都水族自治县',
                        '其他'
                    ]
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '云南省',
            children: [
                {
                    label: '昆明市',
                    children: [
                        '盘龙区',
                        '五华区',
                        '官渡区',
                        '西山区',
                        '东川区',
                        '安宁市',
                        '呈贡县',
                        '晋宁县',
                        '富民县',
                        '宜良县',
                        '嵩明县',
                        '石林彝族自治县',
                        '禄劝彝族苗族自治县',
                        '寻甸回族彝族自治县',
                        '其他'
                    ]
                },
                {
                    label: '曲靖市',
                    children: ['麒麟区', '宣威市', '马龙县', '沾益县', '富源县', '罗平县', '师宗县', '陆良县', '会泽县', '其他']
                },
                {
                    label: '玉溪市',
                    children: [
                        '红塔区',
                        '江川县',
                        '澄江县',
                        '通海县',
                        '华宁县',
                        '易门县',
                        '峨山彝族自治县',
                        '新平彝族傣族自治县',
                        '元江哈尼族彝族傣族自治县',
                        '其他'
                    ]
                },
                {
                    label: '保山市',
                    children: ['隆阳区', '施甸县', '腾冲县', '龙陵县', '昌宁县', '其他']
                },
                {
                    label: '昭通市',
                    children: [
                        '昭阳区',
                        '鲁甸县',
                        '巧家县',
                        '盐津县',
                        '大关县',
                        '永善县',
                        '绥江县',
                        '镇雄县',
                        '彝良县',
                        '威信县',
                        '水富县',
                        '其他'
                    ]
                },
                {
                    label: '丽江市',
                    children: ['古城区', '永胜县', '华坪县', '玉龙纳西族自治县', '宁蒗彝族自治县', '其他']
                },
                {
                    label: '普洱市',
                    children: [
                        '思茅区',
                        '普洱哈尼族彝族自治县',
                        '墨江哈尼族自治县',
                        '景东彝族自治县',
                        '景谷傣族彝族自治县',
                        '镇沅彝族哈尼族拉祜族自治县',
                        '江城哈尼族彝族自治县',
                        '孟连傣族拉祜族佤族自治县',
                        '澜沧拉祜族自治县',
                        '西盟佤族自治县',
                        '其他'
                    ]
                },
                {
                    label: '临沧市',
                    children: [
                        '临翔区',
                        '凤庆县',
                        '云县',
                        '永德县',
                        '镇康县',
                        '双江拉祜族佤族布朗族傣族自治县',
                        '耿马傣族佤族自治县',
                        '沧源佤族自治县',
                        '其他'
                    ]
                },
                {
                    label: '德宏傣族景颇族自治州',
                    children: ['潞西市', '瑞丽市', '梁河县', '盈江县', '陇川县', '其他']
                },
                {
                    label: '怒江傈僳族自治州',
                    children: ['泸水县', '福贡县', '贡山独龙族怒族自治县', '兰坪白族普米族自治县', '其他']
                },
                {
                    label: '迪庆藏族自治州',
                    children: ['香格里拉县', '德钦县', '维西傈僳族自治县', '其他']
                },
                {
                    label: '大理白族自治州',
                    children: [
                        '大理市',
                        '祥云县',
                        '宾川县',
                        '弥渡县',
                        '永平县',
                        '云龙县',
                        '洱源县',
                        '剑川县',
                        '鹤庆县',
                        '漾濞彝族自治县',
                        '南涧彝族自治县',
                        '巍山彝族回族自治县',
                        '其他'
                    ]
                },
                {
                    label: '楚雄彝族自治州',
                    children: [
                        '楚雄市',
                        '双柏县',
                        '牟定县',
                        '南华县',
                        '姚安县',
                        '大姚县',
                        '永仁县',
                        '元谋县',
                        '武定县',
                        '禄丰县',
                        '其他'
                    ]
                },
                {
                    label: '红河哈尼族彝族自治州',
                    children: [
                        '蒙自县',
                        '个旧市',
                        '开远市',
                        '绿春县',
                        '建水县',
                        '石屏县',
                        '弥勒县',
                        '泸西县',
                        '元阳县',
                        '红河县',
                        '金平苗族瑶族傣族自治县',
                        '河口瑶族自治县',
                        '屏边苗族自治县',
                        '其他'
                    ]
                },
                {
                    label: '文山壮族苗族自治州',
                    children: ['文山县', '砚山县', '西畴县', '麻栗坡县', '马关县', '丘北县', '广南县', '富宁县', '其他']
                },
                {
                    label: '西双版纳傣族自治州',
                    children: ['景洪市', '勐海县', '勐腊县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '西藏',
            children: [
                {
                    label: '拉萨市',
                    children: ['城关区', '林周县', '当雄县', '尼木县', '曲水县', '堆龙德庆县', '达孜县', '墨竹工卡县', '其他']
                },
                {
                    label: '那曲地区',
                    children: [
                        '那曲县',
                        '嘉黎县',
                        '比如县',
                        '聂荣县',
                        '安多县',
                        '申扎县',
                        '索县',
                        '班戈县',
                        '巴青县',
                        '尼玛县',
                        '其他'
                    ]
                },
                {
                    label: '昌都地区',
                    children: [
                        '昌都县',
                        '江达县',
                        '贡觉县',
                        '类乌齐县',
                        '丁青县',
                        '察雅县',
                        '八宿县',
                        '左贡县',
                        '芒康县',
                        '洛隆县',
                        '边坝县',
                        '其他'
                    ]
                },
                {
                    label: '林芝地区',
                    children: ['林芝县', '工布江达县', '米林县', '墨脱县', '波密县', '察隅县', '朗县', '其他']
                },
                {
                    label: '山南地区',
                    children: [
                        '乃东县',
                        '扎囊县',
                        '贡嘎县',
                        '桑日县',
                        '琼结县',
                        '曲松县',
                        '措美县',
                        '洛扎县',
                        '加查县',
                        '隆子县',
                        '错那县',
                        '浪卡子县',
                        '其他'
                    ]
                },
                {
                    label: '日喀则地区',
                    children: [
                        '日喀则市',
                        '南木林县',
                        '江孜县',
                        '定日县',
                        '萨迦县',
                        '拉孜县',
                        '昂仁县',
                        '谢通门县',
                        '白朗县',
                        '仁布县',
                        '康马县',
                        '定结县',
                        '仲巴县',
                        '亚东县',
                        '吉隆县',
                        '聂拉木县',
                        '萨嘎县',
                        '岗巴县',
                        '其他'
                    ]
                },
                {
                    label: '阿里地区',
                    children: ['噶尔县', '普兰县', '札达县', '日土县', '革吉县', '改则县', '措勤县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '陕西省',
            children: [
                {
                    label: '西安市',
                    children: [
                        '莲湖区',
                        '新城区',
                        '碑林区',
                        '雁塔区',
                        '灞桥区',
                        '未央区',
                        '阎良区',
                        '临潼区',
                        '长安区',
                        '高陵县',
                        '蓝田县',
                        '户县',
                        '周至县',
                        '其他'
                    ]
                },
                {
                    label: '铜川市',
                    children: ['耀州区', '王益区', '印台区', '宜君县', '其他']
                },
                {
                    label: '宝鸡市',
                    children: [
                        '渭滨区',
                        '金台区',
                        '陈仓区',
                        '岐山县',
                        '凤翔县',
                        '陇县',
                        '太白县',
                        '麟游县',
                        '扶风县',
                        '千阳县',
                        '眉县',
                        '凤县',
                        '其他'
                    ]
                },
                {
                    label: '咸阳市',
                    children: [
                        '秦都区',
                        '渭城区',
                        '杨陵区',
                        '兴平市',
                        '礼泉县',
                        '泾阳县',
                        '永寿县',
                        '三原县',
                        '彬县',
                        '旬邑县',
                        '长武县',
                        '乾县',
                        '武功县',
                        '淳化县',
                        '其他'
                    ]
                },
                {
                    label: '渭南市',
                    children: [
                        '临渭区',
                        '韩城市',
                        '华阴市',
                        '蒲城县',
                        '潼关县',
                        '白水县',
                        '澄城县',
                        '华县',
                        '合阳县',
                        '富平县',
                        '大荔县',
                        '其他'
                    ]
                },
                {
                    label: '延安市',
                    children: [
                        '宝塔区',
                        '安塞县',
                        '洛川县',
                        '子长县',
                        '黄陵县',
                        '延川县',
                        '富县',
                        '延长县',
                        '甘泉县',
                        '宜川县',
                        '志丹县',
                        '黄龙县',
                        '吴起县',
                        '其他'
                    ]
                },
                {
                    label: '汉中市',
                    children: [
                        '汉台区',
                        '留坝县',
                        '镇巴县',
                        '城固县',
                        '南郑县',
                        '洋县',
                        '宁强县',
                        '佛坪县',
                        '勉县',
                        '西乡县',
                        '略阳县',
                        '其他'
                    ]
                },
                {
                    label: '榆林市',
                    children: [
                        '榆阳区',
                        '清涧县',
                        '绥德县',
                        '神木县',
                        '佳县',
                        '府谷县',
                        '子洲县',
                        '靖边县',
                        '横山县',
                        '米脂县',
                        '吴堡县',
                        '定边县',
                        '其他'
                    ]
                },
                {
                    label: '安康市',
                    children: [
                        '汉滨区',
                        '紫阳县',
                        '岚皋县',
                        '旬阳县',
                        '镇坪县',
                        '平利县',
                        '石泉县',
                        '宁陕县',
                        '白河县',
                        '汉阴县',
                        '其他'
                    ]
                },
                {
                    label: '商洛市',
                    children: ['商州区', '镇安县', '山阳县', '洛南县', '商南县', '丹凤县', '柞水县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '甘肃省',
            children: [
                {
                    label: '兰州市',
                    children: ['城关区', '七里河区', '西固区', '安宁区', '红古区', '永登县', '皋兰县', '榆中县', '其他']
                },
                {
                    label: '嘉峪关市',
                    children: ['嘉峪关市', '其他']
                },
                {
                    label: '金昌市',
                    children: ['金川区', '永昌县', '其他']
                },
                {
                    label: '白银市',
                    children: ['白银区', '平川区', '靖远县', '会宁县', '景泰县', '其他']
                },
                {
                    label: '天水市',
                    children: ['清水县', '秦安县', '甘谷县', '武山县', '张家川回族自治县', '北道区', '秦城区', '其他']
                },
                {
                    label: '武威市',
                    children: ['凉州区', '民勤县', '古浪县', '天祝藏族自治县', '其他']
                },
                {
                    label: '酒泉市',
                    children: [
                        '肃州区',
                        '玉门市',
                        '敦煌市',
                        '金塔县',
                        '肃北蒙古族自治县',
                        '阿克塞哈萨克族自治县',
                        '安西县',
                        '其他'
                    ]
                },
                {
                    label: '张掖市',
                    children: ['甘州区', '民乐县', '临泽县', '高台县', '山丹县', '肃南裕固族自治县', '其他']
                },
                {
                    label: '庆阳市',
                    children: ['西峰区', '庆城县', '环县', '华池县', '合水县', '正宁县', '宁县', '镇原县', '其他']
                },
                {
                    label: '平凉市',
                    children: ['崆峒区', '泾川县', '灵台县', '崇信县', '华亭县', '庄浪县', '静宁县', '其他']
                },
                {
                    label: '定西市',
                    children: ['安定区', '通渭县', '临洮县', '漳县', '岷县', '渭源县', '陇西县', '其他']
                },
                {
                    label: '陇南市',
                    children: ['武都区', '成县', '宕昌县', '康县', '文县', '西和县', '礼县', '两当县', '徽县', '其他']
                },
                {
                    label: '临夏回族自治州',
                    children: [
                        '临夏市',
                        '临夏县',
                        '康乐县',
                        '永靖县',
                        '广河县',
                        '和政县',
                        '东乡族自治县',
                        '积石山保安族东乡族撒拉族自治县',
                        '其他'
                    ]
                },
                {
                    label: '甘南藏族自治州',
                    children: ['合作市', '临潭县', '卓尼县', '舟曲县', '迭部县', '玛曲县', '碌曲县', '夏河县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '青海省',
            children: [
                {
                    label: '西宁市',
                    children: ['城中区', '城东区', '城西区', '城北区', '湟源县', '湟中县', '大通回族土族自治县', '其他']
                },
                {
                    label: '海东地区',
                    children: [
                        '平安县',
                        '乐都县',
                        '民和回族土族自治县',
                        '互助土族自治县',
                        '化隆回族自治县',
                        '循化撒拉族自治县',
                        '其他'
                    ]
                },
                {
                    label: '海北藏族自治州',
                    children: ['海晏县', '祁连县', '刚察县', '门源回族自治县', '其他']
                },
                {
                    label: '海南藏族自治州',
                    children: ['共和县', '同德县', '贵德县', '兴海县', '贵南县', '其他']
                },
                {
                    label: '黄南藏族自治州',
                    children: ['同仁县', '尖扎县', '泽库县', '河南蒙古族自治县', '其他']
                },
                {
                    label: '果洛藏族自治州',
                    children: ['玛沁县', '班玛县', '甘德县', '达日县', '久治县', '玛多县', '其他']
                },
                {
                    label: '玉树藏族自治州',
                    children: ['玉树县', '杂多县', '称多县', '治多县', '囊谦县', '曲麻莱县', '其他']
                },
                {
                    label: '海西蒙古族藏族自治州',
                    children: ['德令哈市', '格尔木市', '乌兰县', '都兰县', '天峻县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '宁夏',
            children: [
                {
                    label: '银川市',
                    children: ['兴庆区', '西夏区', '金凤区', '灵武市', '永宁县', '贺兰县', '其他']
                },
                {
                    label: '石嘴山市',
                    children: ['大武口区', '惠农区', '平罗县', '其他']
                },
                {
                    label: '吴忠市',
                    children: ['利通区', '青铜峡市', '盐池县', '同心县', '其他']
                },
                {
                    label: '固原市',
                    children: ['原州区', '西吉县', '隆德县', '泾源县', '彭阳县', '其他']
                },
                {
                    label: '中卫市',
                    children: ['沙坡头区', '中宁县', '海原县', '其他']
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '新疆',
            children: [
                {
                    label: '乌鲁木齐市',
                    children: [
                        '天山区',
                        '沙依巴克区',
                        '新市区',
                        '水磨沟区',
                        '头屯河区',
                        '达坂城区',
                        '东山区',
                        '乌鲁木齐县',
                        '其他'
                    ]
                },
                {
                    label: '克拉玛依市',
                    children: ['克拉玛依区', '独山子区', '白碱滩区', '乌尔禾区', '其他']
                },
                {
                    label: '吐鲁番地区',
                    children: ['吐鲁番市', '托克逊县', '鄯善县', '其他']
                },
                {
                    label: '哈密地区',
                    children: ['哈密市', '伊吾县', '巴里坤哈萨克自治县', '其他']
                },
                {
                    label: '和田地区',
                    children: ['和田市', '和田县', '洛浦县', '民丰县', '皮山县', '策勒县', '于田县', '墨玉县', '其他']
                },
                {
                    label: '阿克苏地区',
                    children: [
                        '阿克苏市',
                        '温宿县',
                        '沙雅县',
                        '拜城县',
                        '阿瓦提县',
                        '库车县',
                        '柯坪县',
                        '新和县',
                        '乌什县',
                        '其他'
                    ]
                },
                {
                    label: '喀什地区',
                    children: [
                        '喀什市',
                        '巴楚县',
                        '泽普县',
                        '伽师县',
                        '叶城县',
                        '岳普湖县',
                        '疏勒县',
                        '麦盖提县',
                        '英吉沙县',
                        '莎车县',
                        '疏附县',
                        '塔什库尔干塔吉克自治县',
                        '其他'
                    ]
                },
                {
                    label: '克孜勒苏柯尔克孜自治州',
                    children: ['阿图什市', '阿合奇县', '乌恰县', '阿克陶县', '其他']
                },
                {
                    label: '巴音郭楞蒙古自治州',
                    children: [
                        '库尔勒市',
                        '和静县',
                        '尉犁县',
                        '和硕县',
                        '且末县',
                        '博湖县',
                        '轮台县',
                        '若羌县',
                        '焉耆回族自治县',
                        '其他'
                    ]
                },
                {
                    label: '昌吉回族自治州',
                    children: [
                        '昌吉市',
                        '阜康市',
                        '奇台县',
                        '玛纳斯县',
                        '吉木萨尔县',
                        '呼图壁县',
                        '木垒哈萨克自治县',
                        '米泉市',
                        '其他'
                    ]
                },
                {
                    label: '博尔塔拉蒙古自治州',
                    children: ['博乐市', '精河县', '温泉县', '其他']
                },
                {
                    label: '石河子',
                    children: ['石河子']
                },
                {
                    label: '阿拉尔',
                    children: ['阿拉尔']
                },
                {
                    label: '图木舒克',
                    children: ['图木舒克']
                },
                {
                    label: '五家渠',
                    children: ['五家渠']
                },
                {
                    label: '伊犁哈萨克自治州',
                    children: [
                        '伊宁市',
                        '奎屯市',
                        '伊宁县',
                        '特克斯县',
                        '尼勒克县',
                        '昭苏县',
                        '新源县',
                        '霍城县',
                        '巩留县',
                        '察布查尔锡伯自治县',
                        '塔城地区',
                        '阿勒泰地区',
                        '其他'
                    ]
                },
                {
                    label: '其他',
                    children: ['其他']
                }
            ]
        },
        {
            label: '台湾省',
            children: [
                {
                    label: '台北市',
                    children: [
                        '内湖区',
                        '南港区',
                        '中正区',
                        '万华区',
                        '大同区',
                        '中山区',
                        '松山区',
                        '大安区',
                        '信义区',
                        '文山区',
                        '士林区',
                        '北投区'
                    ]
                },
                {
                    label: '新北市',
                    children: ['板桥区', '汐止区', '新店区', '其他']
                },
                {
                    label: '桃园市',
                    children: ['其他']
                },
                {
                    label: '台中市',
                    children: ['其他']
                },
                {
                    label: '台南市',
                    children: ['其他']
                },
                {
                    label: '高雄市',
                    children: ['其他']
                }
            ]
        },
        {
            label: '澳门',
            children: [
                {
                    label: '澳门',
                    children: [
                        '花地玛堂区',
                        '圣安多尼堂区',
                        '大堂区',
                        '望德堂区',
                        '风顺堂区',
                        '嘉模堂区',
                        '圣方济各堂区',
                        '路凼',
                        '其他'
                    ]
                }
            ]
        },
        {
            label: '香港',
            children: [
                {
                    label: '香港',
                    children: [
                        '深水埗区',
                        '油尖旺区',
                        '九龙城区',
                        '黄大仙区',
                        '观塘区',
                        '北区',
                        '大埔区',
                        '沙田区',
                        '西贡区',
                        '元朗区',
                        '屯门区',
                        '荃湾区',
                        '葵青区',
                        '离岛区',
                        '中西区',
                        '湾仔区',
                        '东区',
                        '南区',
                        '其他'
                    ]
                }
            ]
        }
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerComponent = /** @class */ (function () {
    function PickerComponent(elementRef, options, _localeProviderService) {
        this.elementRef = elementRef;
        this.options = options;
        this._localeProviderService = _localeProviderService;
        this.transitionName = 'am-slide-up-enter am-slide-up-enter-active';
        this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
        this.address = getData();
        this.startY = 0;
        this.differY = 0;
        this.currentY = 0;
        this.len = 0;
        this.dom = null;
        this.index = 0;
        this.maxY = 0;
        this.lineHeight = 34;
        this.data = [];
        this.selectedTarget = [];
        this.isMouseDown = false;
        this.Velocity = getVelocity();
        this._unsubscribe$ = new Subject();
        this.onChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask')) {
            return;
        }
        this.isMouseDown = true;
        event.preventDefault();
        this.dom = getEventTarget(event).target.parentElement.children[2];
        this.len = this.dom.children.length;
        this.maxY = -(this.len - 1);
        if (this.dom.style.transform === 'translateY(0px)') {
            this.currentY = 0;
            this.maxY = -(this.len - 1);
        }
        else if (this.selectedTarget.length > 0) {
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    _this.currentY = item.currentY;
                }
            });
        }
        this.startY = getEventTarget(event).clientY;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var ev = getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        this.Velocity.record(this.differY);
        this.dom.style.transition = 'transform 0s';
        this.dom.style.transform = "translateY(" + (this.currentY * this.lineHeight + this.differY) + "px)";
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        this.isMouseDown = false;
        event.preventDefault();
        /** @type {?} */
        var ev = getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        /** @type {?} */
        var time = 0.3;
        /** @type {?} */
        var velocityTemp = this.Velocity.getVelocity(this.differY) * 4;
        if (velocity) {
            this.differY = velocityTemp * 40 + this.differY;
            time = Math.abs(velocityTemp) * 0.1;
        }
        this.dom.style.transition = 'transform ' + (time < 0.3 ? 0.3 : time) + 's';
        if (this.differY <= -this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY <= this.maxY) {
                this.currentY = this.maxY;
            }
        }
        else if (this.differY >= this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY >= 0) {
                this.currentY = 0;
            }
        }
        if (this.selectedTarget.length > 0) {
            /** @type {?} */
            var hasKey_1 = false;
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    hasKey_1 = true;
                    item.targetId = event.target.id;
                    item.currentY = _this.currentY;
                }
                else if (parseInt(item.targetId, 0) > parseInt(event.target.id, 0) && _this.options.cascade) {
                    item.currentY = 0;
                }
            });
            if (!hasKey_1) {
                this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
            }
        }
        else {
            this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
        }
        this.dom.style.transform = "translateY(" + this.currentY * this.lineHeight + "px)";
        this.index = Math.floor(Math.abs(this.currentY / 1));
        this.setCurrentSelected(parseInt(event.target.id, 0), this.index);
        this.onChange.emit(this.combineReslut());
        this.options.onPickerChange.emit(this.combineReslut());
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        if (this.options.data.length > 0) {
            this.address = this.options.data;
        }
        if (this.data.length > 0) {
            this.selectedTarget = [];
            this.data = [];
        }
        this.data.push(this.generateArrayData(this.address));
        if (this.options.value.length > 0) {
            this.getInitValueIndex(this.data);
        }
        else {
            this.checkArrayDeep(this.address[0]);
            for (var index = 0; index < this.data.length; index++) {
                this.selectedTarget.push({ targetId: "" + index, currentY: 0 });
            }
        }
    };
    /**
     * @param {?} dataTemp
     * @return {?}
     */
    PickerComponent.prototype.getInitValueIndex = /**
     * @param {?} dataTemp
     * @return {?}
     */
    function (dataTemp) {
        var _this = this;
        this.selectedTarget = [];
        this.options.value.forEach(function (element, i) {
            dataTemp.forEach(function (item, j) {
                item.forEach(function (item1, k) {
                    if (element === (item1.label || item1) && i === j) {
                        _this.checkArrayDeep(_this.data[i][k], false);
                        _this.selectedTarget.push({ targetId: "" + i, currentY: -k });
                    }
                });
            });
        });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.reloadPicker = /**
     * @return {?}
     */
    function () {
        if (!this._picker || this._picker === undefined) {
            return;
        }
        this.currentPicker = this._picker.element.nativeElement;
        if (this.currentPicker && this.currentPicker.children.length > 0) {
            /** @type {?} */
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    /**
     * @param {?} targetArr
     * @return {?}
     */
    PickerComponent.prototype.generateArrayData = /**
     * @param {?} targetArr
     * @return {?}
     */
    function (targetArr) {
        /** @type {?} */
        var tempArr = [];
        if (targetArr instanceof Array) {
            targetArr.forEach(function (item, i) {
                if (item instanceof Array) {
                    /** @type {?} */
                    var keys = Object.keys(item);
                    /** @type {?} */
                    var element_1 = {};
                    keys.forEach(function (key) {
                        element_1[key] = targetArr[i][key] || targetArr[i];
                    });
                    tempArr.push(element_1);
                }
                else {
                    tempArr.push(item);
                }
            });
            return tempArr;
        }
        return [];
    };
    /**
     * @param {?} parent
     * @param {?=} init
     * @return {?}
     */
    PickerComponent.prototype.checkArrayDeep = /**
     * @param {?} parent
     * @param {?=} init
     * @return {?}
     */
    function (parent, init) {
        if (init === void 0) { init = true; }
        if (parent instanceof Object && parent.children && parent.children.length > 0) {
            if (this.generateArrayData(parent.children).length > 0 && this.data.length < this.options.cols) {
                this.data.push(this.generateArrayData(parent.children));
                if (init) {
                    this.checkArrayDeep(parent.children[0]);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        this.options.onOk.emit(this.combineReslut());
        if (this.options.confirm) {
            this.options.confirm(this.combineReslut());
        }
        this.setTransitionName();
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.combineReslut = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = [];
        this.selectedTarget.forEach(function (item) {
            result.push(_this.data[parseInt(item.targetId, 0)][-item.currentY]);
        });
        return result;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.setTransitionName();
        this.options.onDismiss.emit();
        if (this.options.cancel) {
            this.options.cancel();
        }
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.setTransitionName = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transitionName = 'am-slide-up-leave am-slide-up-leave-active';
        this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
        setTimeout(function () {
            _this.options.hidePicker();
        }, 200);
    };
    /**
     * @param {?} target
     * @param {?} index
     * @return {?}
     */
    PickerComponent.prototype.setCurrentSelected = /**
     * @param {?} target
     * @param {?} index
     * @return {?}
     */
    function (target, index) {
        var _this = this;
        if (!this.options.cascade) {
            return;
        }
        /** @type {?} */
        var a = this.data.slice(0, target + 1);
        this.data = a;
        this.checkArrayDeep(this.data[target][index]);
        setTimeout(function () {
            _this.data.forEach(function (item, i) {
                if (target !== "" + i && i > target) {
                    _this._picker.element.nativeElement.children[i].children[2].style.transition = 'transform .3s';
                    _this._picker.element.nativeElement.children[i].children[2].style.transform = 'translateY(0px)';
                }
            });
        }, 0);
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.init();
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            /** @type {?} */
            var locale = _this._localeProviderService.getLocaleSubObj('Picker');
            _this.options.okText = locale.okText;
            _this.options.dismissText = locale.dismissText;
        });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.reloadPicker();
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    PickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Picker',
                    template: "<div *ngIf=\"options.mask\" class=\"am-picker-popup-mask {{maskTransitionName}}\" (click)=\"cancel()\"></div>\n<div class=\"am-picker-popup {{transitionName}}\" style=\"z-index: 1001\">\n  <div class=\"am-picker-popup-content\">\n    <div class=\"am-picker-popup-body\">\n      <div>\n        <div class=\"am-picker-popup-header\">\n          <div class=\"am-picker-popup-item am-picker-popup-header-left\" (click)=\"cancel()\">{{options.dismissText}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-title\">{{options.title}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-header-right\" (click)=\"ok()\">{{options.okText}}</div>\n        </div>\n        <div class=\"am-picker\" style=\"flex-direction: row; align-items: center;\" #picker>\n          <div *ngFor=\"let item of data; let i = index\" class=\"am-picker-col\">\n            <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"options.indicatorStyle\"></div>\n            <div class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\" id={{i}}></div>\n            <div class=\"am-picker-col-content\">\n              <div *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\" id={{i}}>{{val.label?val.label:val}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: PickerOptions },
        { type: LocaleProviderService }
    ]; };
    PickerComponent.propDecorators = {
        _picker: [{ type: ViewChild, args: ['picker', { read: ViewContainerRef },] }],
        onChange: [{ type: Output }],
        panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
    };
    return PickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerDirective = /** @class */ (function () {
    function PickerDirective(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onPickerChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PickerDirective.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    };
    /**
     * @return {?}
     */
    PickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onVisibleChange.emit(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["isOpen"]) {
            if (changes["isOpen"].currentValue === true) {
                this.showPicker();
            }
            else {
                this.hidePicker();
            }
        }
    };
    /**
     * @return {?}
     */
    PickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hidePicker();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerDirective.prototype.onDocumentClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.picker &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.picker.location.nativeElement.contains(event.target)) {
            this.hidePicker();
        }
    };
    /**
     * @return {?}
     */
    PickerDirective.prototype.showPicker = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.picker) {
            setTimeout(function () {
                _this._eventListeners = [
                    _this._renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); })
                ];
            });
            /** @type {?} */
            var options_1 = new PickerOptions();
            Object.assign(options_1, this._defaultOptions, {
                hidePicker: function (event) {
                    _this.hidePicker();
                }
            });
            /** @type {?} */
            var optionalParams = [
                'data',
                'value',
                'cols',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'cascade',
                'appendToBody',
                'indicatorStyle',
                'onOk',
                'onPickerChange'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    (/** @type {?} */ (options_1))[param] = _this[param];
                }
            });
            /** @type {?} */
            var componentFactory = this._cfr.resolveComponentFactory(PickerComponent);
            /** @type {?} */
            var childInjector = Injector.create([
                {
                    provide: PickerOptions,
                    useValue: options_1
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    PickerDirective.prototype.hidePicker = /**
     * @return {?}
     */
    function () {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    PickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[Picker], [nzm-picker]'
                },] }
    ];
    /** @nocollapse */
    PickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: PickerOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 }
    ]; };
    PickerDirective.propDecorators = {
        data: [{ type: Input }],
        value: [{ type: Input }],
        cols: [{ type: Input }],
        mask: [{ type: Input }],
        title: [{ type: Input }],
        visible: [{ type: Input }],
        okText: [{ type: Input }],
        dismissText: [{ type: Input }],
        disabled: [{ type: Input }],
        cascade: [{ type: Input }],
        appendToBody: [{ type: Input }],
        indicatorStyle: [{ type: Input }],
        onVisibleChange: [{ type: Output }],
        onPickerChange: [{ type: Output }],
        onOk: [{ type: Output }],
        onDismiss: [{ type: Output }],
        togglePicker: [{ type: HostListener, args: ['click',] }]
    };
    return PickerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerModule = /** @class */ (function () {
    function PickerModule() {
    }
    PickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, CoreModule],
                    exports: [PickerComponent, PickerDirective],
                    declarations: [PickerComponent, PickerDirective],
                    providers: [PickerOptions],
                    entryComponents: [PickerComponent]
                },] }
    ];
    return PickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerViewComponent = /** @class */ (function (_super) {
    __extends(PickerViewComponent, _super);
    function PickerViewComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = [];
        _this.value = [];
        _this.cols = 3;
        _this.indicatorStyle = {};
        _this.itemStyle = {};
        _this.onChange = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    PickerViewComponent.prototype.pickerViewInit = /**
     * @return {?}
     */
    function () {
        this.options.data = this.data;
        this.options.value = this.value;
        this.options.cols = this.cols;
        this.options.cascade = this.cascade;
        this.init();
    };
    /**
     * @return {?}
     */
    PickerViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.pickerViewInit();
    };
    /**
     * @return {?}
     */
    PickerViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.currentPicker = this.elementRef.nativeElement;
        this.reloadPicker();
    };
    PickerViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'PickerView, nzm-picker-view',
                    template: "<div #picker class=\"am-picker\" style=\"flex-direction: row; align-items: center;\">\n  <div *ngFor=\"let item of data; let i = index\" class=\"am-picker-col\">\n    <div #indicator class=\"am-picker-col-indicator \" [ngStyle]=\"indicatorStyle\"></div>\n    <div id={{i}} class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\"></div>\n    <div class=\"am-picker-col-content\">\n      <div *ngFor=\"let val of item; let i = index\"\n           id={{i}}\n           class=\"am-picker-col-item\"\n           [ngStyle]=\"itemStyle\"\n      >\n        {{val.label?val.label:val}}\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    PickerViewComponent.propDecorators = {
        data: [{ type: Input }],
        value: [{ type: Input }],
        cols: [{ type: Input }],
        cascade: [{ type: Input }],
        indicatorStyle: [{ type: Input }],
        itemStyle: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return PickerViewComponent;
}(PickerComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PickerViewModule = /** @class */ (function () {
    function PickerViewModule() {
    }
    PickerViewModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PickerModule,
                        LocaleProviderModule
                    ],
                    exports: [PickerViewComponent],
                    declarations: [PickerViewComponent]
                },] }
    ];
    return PickerViewModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ImagePicker = /** @class */ (function () {
    function ImagePicker() {
        this.prefixCls = 'am-image-picker';
        this.flexEl = [];
        this._accept = 'image/*';
        this._count = 4;
        this._selectable = true;
        this._files = [];
        this._multiple = false;
        this.onFail = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onImageClick = new EventEmitter();
        this.onAddImageClick = new EventEmitter();
    }
    Object.defineProperty(ImagePicker.prototype, "files", {
        get: /**
         * @return {?}
         */
        function () {
            return this._files;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._files = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePicker.prototype, "accept", {
        get: /**
         * @return {?}
         */
        function () {
            return this._accept;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._accept = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePicker.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value > 0) {
                this._count = value;
            }
            else {
                this._count = 4;
            }
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePicker.prototype, "multiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this._multiple;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiple = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePicker.prototype, "selectable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectable = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ImagePicker.prototype.sortItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._files) {
            return;
        }
        /** @type {?} */
        var count = parseInt('' + this._count, 10);
        if (count <= 0) {
            count = 4;
        }
        /** @type {?} */
        var allEl = this._files.map(function (item) {
            return {
                type: 'img',
                backgroundImage: 'url(' + item.url + ')',
                transform: 'rotate(' + _this.getRotation(item.orientation) + ')deg'
            };
        });
        if (this._selectable) {
            allEl.push({
                type: 'select',
                backgroundImage: '',
                transform: ''
            });
        }
        /** @type {?} */
        var length = allEl.length;
        if (length !== 0 && length % count !== 0) {
            /** @type {?} */
            var blankCount = count - (length % count);
            /** @type {?} */
            var fillBlankEl = [];
            for (var i = 0; i < blankCount; i++) {
                fillBlankEl.push({
                    type: 'white',
                    backgroundImage: '',
                    transform: ''
                });
            }
            allEl = allEl.concat(fillBlankEl);
        }
        this.flexEl = [];
        for (var i = 0; i < allEl.length / count; i++) {
            /** @type {?} */
            var rowEl = allEl.slice(i * count, i * count + count);
            this.flexEl.push(rowEl);
        }
    };
    /**
     * @param {?} imgItem
     * @return {?}
     */
    ImagePicker.prototype.addImage = /**
     * @param {?} imgItem
     * @return {?}
     */
    function (imgItem) {
        this._files.push({
            type: 'img',
            url: imgItem.url,
            orientation: imgItem.orientation
        });
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'add',
            index: this._files.length - 1
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ImagePicker.prototype.removeImage = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this._files.splice(index, 1);
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'remove',
            index: index
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ImagePicker.prototype.imageClick = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.onImageClick.emit({
            index: index,
            files: this._files
        });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ImagePicker.prototype.addImageClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onAddImageClick.emit(e);
    };
    /**
     * @param {?} file
     * @param {?} index
     * @return {?}
     */
    ImagePicker.prototype.parseFile = /**
     * @param {?} file
     * @param {?} index
     * @return {?}
     */
    function (file, index) {
        var _this = this;
        /** @type {?} */
        var reader = new FileReader();
        reader.onload = function (e) {
            /** @type {?} */
            var dataURL = (/** @type {?} */ (e.target)).result;
            if (!dataURL) {
                _this.onFail.emit("Fail to get the " + index + " image");
                return;
            }
            /** @type {?} */
            var orientation = 1;
            _this.getOrientation(file, function (res) {
                // -2: not jpeg , -1: not defined
                if (res > 0) {
                    orientation = res;
                }
                _this.addImage({
                    url: dataURL,
                    orientation: orientation,
                    file: file
                });
            });
        };
        reader.readAsDataURL(file);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ImagePicker.prototype.fileChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var fileList = event.target.files;
        if (fileList && fileList.length) {
            for (var i = 0; i < fileList.length; i++) {
                this.parseFile(fileList[i], i);
            }
        }
    };
    /**
     * @param {?=} orientation
     * @return {?}
     */
    ImagePicker.prototype.getRotation = /**
     * @param {?=} orientation
     * @return {?}
     */
    function (orientation) {
        if (orientation === void 0) { orientation = 1; }
        /** @type {?} */
        var imgRotation = 0;
        switch (orientation) {
            case 3:
                imgRotation = 180;
                break;
            case 6:
                imgRotation = 90;
                break;
            case 8:
                imgRotation = 270;
                break;
            default:
        }
        return imgRotation;
    };
    // http://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    ImagePicker.prototype.getOrientation = /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var reader = new FileReader();
        reader.onload = function (e) {
            /** @type {?} */
            var view = new DataView((/** @type {?} */ (e.target)).result);
            if (view.getUint16(0, false) !== 0xffd8) {
                return callback(-2);
            }
            /** @type {?} */
            var length = view.byteLength;
            /** @type {?} */
            var offset = 2;
            while (offset < length) {
                /** @type {?} */
                var marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 0xffe1) {
                    /** @type {?} */
                    var tmp = view.getUint32((offset += 2), false);
                    if (tmp !== 0x45786966) {
                        return callback(-1);
                    }
                    /** @type {?} */
                    var little = view.getUint16((offset += 6), false) === 0x4949;
                    offset += view.getUint32(offset + 4, little);
                    /** @type {?} */
                    var tags = view.getUint16(offset, little);
                    offset += 2;
                    for (var i = 0; i < tags; i++) {
                        if (view.getUint16(offset + i * 12, little) === 0x0112) {
                            return callback(view.getUint16(offset + i * 12 + 8, little));
                        }
                    }
                }
                else if ((marker & 0xff00) !== 0xff00) {
                    break;
                }
                else {
                    offset += view.getUint16(offset, false);
                }
            }
            return callback(-1);
        };
        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));
    };
    ImagePicker.decorators = [
        { type: Component, args: [{
                    selector: 'ImagePicker, nzm-image-picker',
                    template: "<div class=\"{{prefixCls}}-list\" role=\"group\">\n  <Flex *ngFor=\"let rowItem of flexEl;let i = index;\">\n    <FlexItem *ngFor=\"let item of rowItem;let j =index;\">\n      <div *ngIf=\"item && 'img' === item.type && item.backgroundImage\" class=\"{{prefixCls}}-item\">\n        <div role=\"button\"\n             aria-label=\"Click and Remove this image\"\n             class=\"{{prefixCls}}-item-remove\"\n             (click)=\"removeImage(i * length + j)\"\n        ></div>\n        <div role=\"button\"\n             aria-label=\"Image can be clicked\"\n             class=\"{{prefixCls}}-item-content\"\n             [ngStyle]=\"{'background-image': item.backgroundImage, 'transform': item.transform}\"\n             (click)=\"imageClick(i * length + j)\"\n        ></div>\n      </div>\n      <div role=\"button\"\n           aria-label=\"Choose and add image\"\n           *ngIf=\"item && 'select' === item.type\"\n           class=\"{{prefixCls}}-item {{prefixCls}}-upload-btn\"\n           (click)=\"addImageClick($event)\"\n      >\n        <input #fileSelectorInput\n               type=\"file\"\n               [accept]=\"accept\"\n               [multiple]=\"multiple\"\n               (change)=\"fileChange($event)\"\n        />\n      </div>\n      <div *ngIf=\"item && 'white' === item.type\" class=\"{{prefixCls}}-item-white\">\n      </div>\n    </FlexItem>\n  </Flex>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ImagePicker.ctorParameters = function () { return []; };
    ImagePicker.propDecorators = {
        _fileSelectorInput: [{ type: ViewChild, args: ['fileSelectorInput', { read: ViewContainerRef },] }],
        files: [{ type: Input }],
        accept: [{ type: Input }],
        length: [{ type: Input }],
        multiple: [{ type: Input }],
        selectable: [{ type: Input }],
        onFail: [{ type: Output }],
        onChange: [{ type: Output }],
        onImageClick: [{ type: Output }],
        onAddImageClick: [{ type: Output }]
    };
    return ImagePicker;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ImagePickerModule = /** @class */ (function () {
    function ImagePickerModule() {
    }
    ImagePickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ImagePicker],
                    exports: [ImagePicker],
                    imports: [CommonModule, FlexModule]
                },] }
    ];
    return ImagePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Result = /** @class */ (function () {
    function Result() {
        this.prefixCls = 'am-result';
        this.isTitleString = true;
        this.isMessageString = true;
        this.onButtonClick = new EventEmitter();
        this.role = 'alert';
        this.amResult = true;
    }
    Object.defineProperty(Result.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.isTemplateRef(value)) {
                this.isTitleString = false;
            }
            else {
                this.isTitleString = true;
            }
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "message", {
        get: /**
         * @return {?}
         */
        function () {
            return this._message;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.isTemplateRef(value)) {
                this.isMessageString = false;
            }
            else {
                this.isMessageString = true;
            }
            this._message = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Result.prototype.buttonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onButtonClick.emit(event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Result.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    Result.decorators = [
        { type: Component, args: [{
                    selector: 'Result, nzm-result',
                    template: "<div *ngIf=\"img\" class=\"{{prefixCls}}-pic\">\n  <ng-template [ngTemplateOutlet]=\"img\"></ng-template>\n</div>\n<div *ngIf=\"!img && imgUrl\"\n     class=\"{{prefixCls}}-pic\"\n     [ngStyle]=\"{ backgroundImage: 'url('+ imgUrl +')' }\"\n></div>\n<div *ngIf=\"title\" class=\"{{prefixCls}}-title\">\n  <ng-template *ngIf=\"!isTitleString\" [ngTemplateOutlet]=\"title\"></ng-template>\n  <span *ngIf=\"isTitleString\">{{title}}</span>\n</div>\n<div [ngClass]=\"prefixCls+'-message'\">\n  <ng-template *ngIf=\"!isMessageString\" [ngTemplateOutlet]=\"message\"></ng-template>\n  <span *ngIf=\"isMessageString\">{{message}}</span>\n</div>\n<div *ngIf=\"buttonText\" class=\"{{prefixCls}}-button\">\n  <a Button [type]=\"buttonType\" (click)=\"buttonClick($event)\">\n    {{buttonText}}\n  </a>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    Result.ctorParameters = function () { return []; };
    Result.propDecorators = {
        title: [{ type: Input }],
        imgUrl: [{ type: Input }],
        buttonText: [{ type: Input }],
        buttonType: [{ type: Input }],
        img: [{ type: Input }],
        message: [{ type: Input }],
        onButtonClick: [{ type: Output }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        amResult: [{ type: HostBinding, args: ['class.am-result',] }]
    };
    return Result;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ResultModule = /** @class */ (function () {
    function ResultModule() {
    }
    ResultModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [Result],
                    exports: [Result],
                    imports: [CommonModule, IconModule]
                },] }
    ];
    return ResultModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Range = /** @class */ (function () {
    function Range(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.offset = [];
        this.length = [];
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._defaultValue = [0, 0, 0];
        this._disabled = false;
        this._marks = {};
        this._dots = false;
        this._included = true;
        this._count = 1;
        this._allowCross = true;
        this._handleStyle = [];
        this._trackStyle = [];
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.amWrapper = true;
    }
    Object.defineProperty(Range.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = this._defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "marks", {
        get: /**
         * @return {?}
         */
        function () {
            return this._marks;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "dots", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dots;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dots = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "included", {
        get: /**
         * @return {?}
         */
        function () {
            return this._included;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "count", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._count = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "allowCross", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowCross = value;
            this.setValueBound();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "pushable", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pushable = value;
            if (this.verifyPushable()) {
                this.setValueBound();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "handleStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._handleStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._handleStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "trackStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trackStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trackStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "railStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._railStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._railStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Range.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a;
        this.sliderCls = (_a = {},
            _a[this.prefixCls + "-disabled"] = this._disabled,
            _a);
    };
    /**
     * @return {?}
     */
    Range.prototype.initialValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var minTemp = this._min;
        /** @type {?} */
        var initialValue = Array.apply(null, Array(this._count + 1)).map(function () {
            return minTemp;
        });
        this._defaultValue = this._defaultValue !== undefined ? this._defaultValue : initialValue;
        this._value = this._value !== undefined ? this._value : this._defaultValue;
        if (this._count > 0) {
            this.upperBound = Math.max.apply(Math, __spread(this._value));
            this.lowerBound = Math.min.apply(Math, __spread(this._value));
        }
    };
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    Range.prototype.handleChange = /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    function (e, i) {
        /** @type {?} */
        var temp = __spread(this._value);
        if (typeof this._pushable === 'boolean' && this._pushable) {
            /** @type {?} */
            var diff_1 = e - this._value[i];
            temp = temp.map(function (v) { return (v = v + diff_1); });
        }
        else {
            temp[i] = e;
        }
        this.upperBound = Math.max.apply(Math, __spread(temp));
        this.lowerBound = Math.min.apply(Math, __spread(temp));
        this.setTrackStyle(temp);
        this.onChange.emit(temp);
    };
    /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    Range.prototype.handleAfterChange = /**
     * @param {?} e
     * @param {?} i
     * @return {?}
     */
    function (e, i) {
        var _this = this;
        setTimeout(function () {
            _this._value[i] = e;
            _this.upperBound = Math.max.apply(Math, __spread(_this._value));
            _this.lowerBound = Math.min.apply(Math, __spread(_this._value));
            _this.setTrackStyle(_this._value);
            _this.onAfterChange.emit(_this._value);
            _this.setValueBound();
        }, 0);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Range.prototype.setTrackStyle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value.length === this._count + 1) {
            value.sort(function (a, b) { return a - b; });
            for (var i = 0; i < this._count; i++) {
                this.offset[i] = (value[i] * 100) / (this._max - this._min);
                this.length[i] = ((value[i + 1] - value[i]) * 100) / (this._max - this._min);
            }
        }
    };
    /**
     * @return {?}
     */
    Range.prototype.setValueBound = /**
     * @return {?}
     */
    function () {
        this.maxBound = [];
        this.minBound = [];
        if (this._allowCross || this._handleCount <= 1) {
            for (var i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = this._max;
                this.minBound[i] = this._min;
            }
        }
        else {
            if (typeof this._pushable !== 'number' || (typeof this._pushable === 'boolean' && this._pushable)) {
                this._pushable = 0;
            }
            for (var i = 0; i < this._handleCount; i++) {
                this.maxBound[i] = i === this._handleCount - 1 ? this._max : this._value[i + 1] - this._pushable;
                this.minBound[i] = i === 0 ? this._min : this._value[i - 1] + this._pushable;
            }
        }
    };
    /**
     * @return {?}
     */
    Range.prototype.verifyPushable = /**
     * @return {?}
     */
    function () {
        if (typeof this._pushable === 'number') {
            for (var i = 1; i < this._handleCount; i++) {
                /** @type {?} */
                var diff = this._value[i] - this._value[i - 1];
                if (diff < this._pushable) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * @return {?}
     */
    Range.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._max === undefined || this._min === undefined) {
            return;
        }
        if (this.verifyPushable()) {
            this.setValueBound();
            this._handleCount = this._count + 1;
            this.setCls();
            /** @type {?} */
            var sliderCoords = this._elf.nativeElement.getElementsByClassName('am-slider')[0].getBoundingClientRect();
            this.sliderLength = sliderCoords.width;
            this.sliderStart = sliderCoords.left;
            this.initialValue();
        }
    };
    Range.decorators = [
        { type: Component, args: [{
                    selector: 'Range , nzm-range',
                    template: "<div class=\"am-slider\" [ngClass]=\"sliderCls\">\n  <div class=\"am-slider-rail\" [ngStyle]=\"railStyle\"></div>\n  <SliderTrack *ngFor=\"let off of offset ; let i = index\"\n               [className]=\"'am-slider-track'\"\n               [included]=\"included\"\n               [style]=\"trackStyle[i]\"\n               [offset]=\"off\"\n               [length]=\"length[i]\"\n  ></SliderTrack>\n  <SliderSteps [max]=\"max\"\n               [min]=\"min\"\n               [dots]=\"dots\"\n               [step]=\"step\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderSteps>\n  <SliderHandle *ngFor=\"let val of value ; let i = index\"\n                [max]=\"max\"\n                [min]=\"min\"\n                [maxBound]=\"maxBound[i]\"\n                [minBound]=\"minBound[i]\"\n                [value]=\"val\"\n                [step]=\"step\"\n                [disabled]=\"disabled\"\n                [sliderLength]=\"sliderLength\"\n                [sliderStart]=\"sliderStart\"\n                [handleStyle]=\"handleStyle[i]\"\n                (onChange)=\"handleChange($event , i)\"\n                (onAfterChange)=\"handleAfterChange($event , i)\"\n  ></SliderHandle>\n  <SliderMarks [max]=\"max\"\n               [min]=\"min\"\n               [marks]=\"marks\"\n               [upperBound]=\"upperBound\"\n               [lowerBound]=\"lowerBound\"\n  ></SliderMarks>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    Range.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Range.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        step: [{ type: Input }],
        value: [{ type: Input }],
        defaultValue: [{ type: Input }],
        disabled: [{ type: Input }],
        marks: [{ type: Input }],
        dots: [{ type: Input }],
        included: [{ type: Input }],
        count: [{ type: Input }],
        allowCross: [{ type: Input }],
        pushable: [{ type: Input }],
        handleStyle: [{ type: Input }],
        trackStyle: [{ type: Input }],
        railStyle: [{ type: Input }],
        onChange: [{ type: Output }],
        onAfterChange: [{ type: Output }],
        amWrapper: [{ type: HostBinding, args: ['class.am-slider-wrapper',] }]
    };
    return Range;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Slider = /** @class */ (function () {
    function Slider(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.offset = 0;
        this.length = 0;
        this._min = 0;
        this._max = 100;
        this._step = 1;
        this._value = 10;
        this._disabled = false;
        this._marks = {};
        this._dots = false;
        this._included = true;
        this._trackStyle = {};
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.amSliderWrapper = true;
    }
    Object.defineProperty(Slider.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            this.valueRange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultValue = value;
            this._value = this._defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "marks", {
        get: /**
         * @return {?}
         */
        function () {
            return this._marks;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "dots", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dots;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dots = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "included", {
        get: /**
         * @return {?}
         */
        function () {
            return this._included;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "handleStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._handleStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._handleStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "trackStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trackStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trackStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "railStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._railStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._railStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Slider.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a;
        this.sliderCls = (_a = {},
            _a[this.prefixCls + "-disabled"] = this._disabled,
            _a);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    Slider.prototype.handleChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        setTimeout(function () {
            _this.offset = 0;
            _this.length = ((e - _this._min) * 100) / (_this._max - _this._min);
            _this._value = e;
        }, 10);
        this.onChange.emit(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    Slider.prototype.handleAfterChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        setTimeout(function () {
            _this.offset = 0;
            _this.length = ((e - _this._min) * 100) / (_this._max - _this._min);
            _this._value = e;
        }, 10);
        this.onAfterChange.emit(e);
    };
    /**
     * @return {?}
     */
    Slider.prototype.valueRange = /**
     * @return {?}
     */
    function () {
        if (this._value < this._min) {
            this._value = this._min;
        }
        if (this._value > this._max) {
            this._value = this._max;
        }
    };
    /**
     * @return {?}
     */
    Slider.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
        this.valueRange();
        /** @type {?} */
        var sliderCoords = this._elf.nativeElement.getElementsByClassName('am-slider')[0].getBoundingClientRect();
        this.sliderLength = sliderCoords.width;
        this.sliderStart = sliderCoords.left;
    };
    Slider.decorators = [
        { type: Component, args: [{
                    selector: 'Slider , nzm-slider',
                    template: "<div class=\"am-slider\" [ngClass]=\"sliderCls\">\n  <div class=\"am-slider-rail\" [ngStyle]=\"railStyle\"></div>\n  <SliderTrack [className]=\"'am-slider-track'\"\n               [style]=\"trackStyle\"\n               [offset]=\"offset\"\n               [length]=\"length\"\n               [included]=\"included\"\n  ></SliderTrack>\n  <SliderSteps [max]=\"max\"\n               [min]=\"min\"\n               [dots]=\"dots\"\n               [step]=\"step\"\n               [marks]=\"marks\"\n               [lowerBound]=\"min\"\n               [upperBound]=\"value\"\n               [included]=\"included\"\n  ></SliderSteps>\n  <SliderHandle [max]=\"max\"\n                [min]=\"min\"\n                [value]=\"value\"\n                [step]=\"step\"\n                [disabled]=\"disabled\"\n                [handleStyle]=\"handleStyle\"\n                [sliderStart]=\"sliderStart\"\n                [sliderLength]=\"sliderLength\"\n                (onChange)=\"handleChange($event)\"\n                (onAfterChange)=\"handleAfterChange($event)\"\n  ></SliderHandle>\n  <SliderMarks [max]=\"max\"\n               [min]=\"min\"\n               [marks]=\"marks\"\n               [lowerBound]=\"min\"\n               [upperBound]=\"value\"\n               [included]=\"included\"\n  ></SliderMarks>\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    Slider.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    Slider.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        step: [{ type: Input }],
        value: [{ type: Input }],
        defaultValue: [{ type: Input }],
        disabled: [{ type: Input }],
        marks: [{ type: Input }],
        dots: [{ type: Input }],
        included: [{ type: Input }],
        handleStyle: [{ type: Input }],
        trackStyle: [{ type: Input }],
        railStyle: [{ type: Input }],
        onChange: [{ type: Output }],
        onAfterChange: [{ type: Output }],
        amSliderWrapper: [{ type: HostBinding, args: ['class.am-slider-wrapper',] }]
    };
    return Slider;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderHandle = /** @class */ (function () {
    function SliderHandle(_elf, _sanitizer) {
        var _this = this;
        this._elf = _elf;
        this._sanitizer = _sanitizer;
        this._disabled = false;
        this._marks = {};
        this._isDraging = false;
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.mouseDown = function (event) {
            if (!_this._disabled && _this.isMouseTarget(event)) {
                _this._startX = event.clientX;
                _this._handleStatus = 'start';
                _this._isDraging = true;
                document.addEventListener('mousemove', _this.mouseMove, false);
                document.addEventListener('mouseup', _this.mouseUp, false);
                _this.pauseEvent(event);
            }
        };
        this.mouseMove = function (event) {
            if (!_this._disabled && _this._isDraging) {
                _this.pauseEvent(event);
                /** @type {?} */
                var pos = event.clientX;
                _this._value = Math.round(_this.calcValueByPos(pos));
                _this.left = _this.calcOffset(_this._value);
                if (_this._oldValue !== _this._value) {
                    _this._oldValue = _this._value;
                    _this.onChange.emit(_this._value);
                }
            }
        };
        this.mouseUp = function (event) {
            if (!_this._disabled && _this._isDraging) {
                _this._handleStatus = 'end';
                _this._isDraging = false;
                /** @type {?} */
                var pos = event.clientX;
                _this._value = Math.round(_this.calcValueByPos(pos));
                _this.left = _this.calcOffset(_this._value);
                _this.onAfterChange.emit(_this._value);
            }
        };
    }
    Object.defineProperty(SliderHandle.prototype, "min", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "max", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "minBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "maxBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "step", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "value", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            if (this._value) {
                this.left = this.calcOffset(this._value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "disabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "sliderLength", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sliderLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "sliderStart", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sliderStart = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandle.prototype, "handleStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._handleStyle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._handleStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    /* 手势操作 */
    /**
     * @param {?} event
     * @return {?}
     */
    SliderHandle.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this._disabled) {
            this._startX = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            this._handleStatus = 'start';
            this._isDraging = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderHandle.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            /** @type {?} */
            var pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            if (this._oldValue !== this._value) {
                this._oldValue = this._value;
                this.onChange.emit(this._value);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderHandle.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            this._handleStatus = 'end';
            this._isDraging = false;
            /** @type {?} */
            var pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            this.onAfterChange.emit(this._value);
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    SliderHandle.prototype.calcValueByPos = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        /** @type {?} */
        var offset = pos - this._sliderStart;
        /** @type {?} */
        var value = this.calcValue(offset);
        if (value <= this._minBound) {
            value = this._minBound;
        }
        if (value >= this._maxBound) {
            value = this._maxBound;
        }
        /** @type {?} */
        var closestPoint = this.getClosestPoint(value);
        return this._step === null ? closestPoint : parseFloat(closestPoint.toFixed(this.getPrecision(this._step)));
    };
    /**
     * @param {?} offset
     * @return {?}
     */
    SliderHandle.prototype.calcValue = /**
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        /** @type {?} */
        var ratio = Math.abs(Math.max(offset, 0) / this._sliderLength);
        /** @type {?} */
        var value = ratio * (this._max - this._min) + this._min;
        return value;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    SliderHandle.prototype.getClosestPoint = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var points = Object.keys(this._marks).map(parseFloat);
        if (this._step !== null) {
            /** @type {?} */
            var closestStep = Math.round((val - this._min) / this._step) * this._step + this._min;
            points.push(closestStep);
        }
        /** @type {?} */
        var diffs = points.map(function (point) {
            return Math.abs(val - point);
        });
        return points[diffs.indexOf(Math.min.apply(Math, this.toConsumableArray(diffs)))];
    };
    /**
     * @param {?} step
     * @return {?}
     */
    SliderHandle.prototype.getPrecision = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        /** @type {?} */
        var stepString = step.toString();
        /** @type {?} */
        var precision = 0;
        if (stepString.indexOf('.') >= 0) {
            precision = stepString.length - stepString.indexOf('.') - 1;
        }
        return precision;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderHandle.prototype.calcOffset = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var ratio = (value - this._min) / (this._max - this._min);
        return ratio * 100;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SliderHandle.prototype.pauseEvent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        e.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderHandle.prototype.isMouseTarget = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var parentFound = false;
        while (target !== null && !parentFound) {
            if (target === this._elf.nativeElement) {
                parentFound = true;
            }
            target = target.parentElement;
        }
        return parentFound;
    };
    /**
     * @param {?} arr
     * @return {?}
     */
    SliderHandle.prototype.toConsumableArray = /**
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        if (Array.isArray(arr)) {
            /** @type {?} */
            var arr2 = Array(arr.length);
            for (var i = 0; i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        }
    };
    /**
     * @return {?}
     */
    SliderHandle.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._elf.nativeElement.addEventListener('mousedown', this.mouseDown, false);
        this._handleOffsetX = this._elf.nativeElement.getBoundingClientRect().x;
        this.left = this.calcOffset(this._value);
        this._minBound = this._minBound === undefined ? this._min : this._minBound;
        this._maxBound = this._maxBound === undefined ? this._max : this._maxBound;
        this.onAfterChange.emit(this._value);
    };
    /**
     * @return {?}
     */
    SliderHandle.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        document.removeEventListener('mousemove', this.mouseMove, false);
        document.removeEventListener('mouseup', this.mouseUp, false);
    };
    SliderHandle.decorators = [
        { type: Component, args: [{
                    selector: 'SliderHandle, nzm-slider-handle',
                    template: "<div role=\"slider\"\n     class=\"am-slider-handle\"\n     [ngStyle]=\"handleStyle\"\n     [style.left.%]=\"left\">\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SliderHandle.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer }
    ]; };
    SliderHandle.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        minBound: [{ type: Input }],
        maxBound: [{ type: Input }],
        step: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        sliderLength: [{ type: Input }],
        sliderStart: [{ type: Input }],
        handleStyle: [{ type: Input }],
        onChange: [{ type: Output }],
        onAfterChange: [{ type: Output }],
        panstart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['touchend', ['$event'],] }]
    };
    return SliderHandle;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderMarks = /** @class */ (function () {
    function SliderMarks(_elf) {
        this._elf = _elf;
        this.markArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._className = 'am-slider-mark';
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
    }
    Object.defineProperty(SliderMarks.prototype, "min", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value <= this._max) {
                this._min = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "max", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value >= this._min) {
                this._max = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "marks", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "included", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "upperBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value !== this._upperBound) {
                this._upperBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "lowerBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value !== this.lowerBound) {
                this._lowerBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarks.prototype, "class", {
        get: /**
         * @return {?}
         */
        function () {
            return this._className;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} marksKeys
     * @return {?}
     */
    SliderMarks.prototype.getMarks = /**
     * @param {?} marksKeys
     * @return {?}
     */
    function (marksKeys) {
        var _this = this;
        this.markArray = [];
        marksKeys
            .map(parseFloat)
            .sort(function (a, b) { return a - b; })
            .map(function (point) {
            var _a;
            /** @type {?} */
            var markItem = {
                markLabel: '',
                point: '',
                className: {},
                style: {}
            };
            /** @type {?} */
            var markPoint = _this._marks[point];
            /** @type {?} */
            var markPointIsObject = typeof markPoint === 'object';
            /** @type {?} */
            var markLabel = markPointIsObject ? markPoint.label : markPoint;
            if (!markLabel && markLabel !== 0) {
                return null;
            }
            /** @type {?} */
            var isActive = (!_this._included && point === _this._upperBound) ||
                (_this._included && point <= _this._upperBound && point >= _this._lowerBound);
            /** @type {?} */
            var markClassName = (_a = {},
                _a[_this._className + "-text"] = true,
                _a[_this._className + "-text-active"] = isActive,
                _a);
            /** @type {?} */
            var bottomStyle = {
                marginBottom: '-50%',
                bottom: ((point - _this._min) / _this._range) * 100 + "%"
            };
            /** @type {?} */
            var leftStyle = {
                width: _this._markWidth + "%",
                marginLeft: -_this._markWidth / 2 + "%",
                left: ((point - _this._min) / _this._range) * 100 + "%"
            };
            /** @type {?} */
            var style$$1 = leftStyle;
            /** @type {?} */
            var markStyle = markPointIsObject ? __assign({}, style$$1, markPoint.style) : style$$1;
            markItem.markLabel = markLabel;
            markItem.point = point;
            markItem.className = Object.keys(markClassName).join(' ');
            markItem.style = markStyle;
            _this.markArray.push(markItem);
        });
    };
    /**
     * @return {?}
     */
    SliderMarks.prototype.setActiveCls = /**
     * @return {?}
     */
    function () {
        var _a;
        for (var i = 0; i < this.markArray.length; i++) {
            /** @type {?} */
            var point = this.markArray[i].point;
            /** @type {?} */
            var isActive = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.markArray[i].className = (_a = {},
                _a[this._className + "-text"] = true,
                _a[this._className + "-text-active"] = isActive,
                _a);
        }
    };
    /**
     * @return {?}
     */
    SliderMarks.prototype.setMarksLable = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.markArray.length; i++) {
            /** @type {?} */
            var markEle = this._elf.nativeElement.getElementsByClassName(this._className + '-text')[i];
            markEle.innerHTML = this.markArray[i].markLabel;
        }
    };
    /**
     * @return {?}
     */
    SliderMarks.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var marksKeys = Object.keys(this._marks);
        /** @type {?} */
        var marksCount = marksKeys.length;
        /** @type {?} */
        var unit = marksCount > 1 ? 100 / (marksCount - 1) : 100;
        this._markWidth = unit * 0.9;
        this._range = this._max - this._min;
        this.getMarks(marksKeys);
    };
    /**
     * @return {?}
     */
    SliderMarks.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setMarksLable();
    };
    SliderMarks.decorators = [
        { type: Component, args: [{
                    selector: 'SliderMarks, nzm-slider-marks',
                    template: "<span *ngFor=\"let item of markArray\"\n      [ngClass]=\"item.className\"\n      [ngStyle]=\"item.style\"\n      (onMouseDown)=\"onClickLabel($event, point)\"\n      (onTouchStart)=\"onClickLabel($events, point)\">\n</span>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SliderMarks.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SliderMarks.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        marks: [{ type: Input }],
        included: [{ type: Input }],
        upperBound: [{ type: Input }],
        lowerBound: [{ type: Input }],
        onChange: [{ type: Output }],
        onAfterChange: [{ type: Output }],
        class: [{ type: HostBinding }]
    };
    return SliderMarks;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderSteps = /** @class */ (function () {
    function SliderSteps(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.stepArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._dots = false;
    }
    Object.defineProperty(SliderSteps.prototype, "min", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value <= this._max) {
                this._min = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "max", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value >= this._min) {
                this._max = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "marks", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "step", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "included", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "dots", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dots = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "upperBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined && value !== this._upperBound) {
                this._upperBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "lowerBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined && value !== this.lowerBound) {
                this._lowerBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "class", {
        get: /**
         * @return {?}
         */
        function () {
            return 'am-slider-step';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderSteps.prototype.calPoints = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var points = Object.keys(this._marks).map(parseFloat);
        if (this._dots) {
            for (var i = this._min; i <= this._max; i = i + this._step) {
                if (points.indexOf(i) < 0) {
                    points.push(i);
                }
            }
        }
        return points;
    };
    /**
     * @param {?} points
     * @return {?}
     */
    SliderSteps.prototype.getSteps = /**
     * @param {?} points
     * @return {?}
     */
    function (points) {
        var _this = this;
        /** @type {?} */
        var range = this._max - this._min;
        this.stepArray = [];
        points.map(function (point) {
            var _a;
            /** @type {?} */
            var stepItem = {
                stepStyle: {},
                stepClass: {},
                point: null
            };
            /** @type {?} */
            var offset = (Math.abs(point - _this._min) / range) * 100 + "%";
            /** @type {?} */
            var isActived = (!_this._included && point === _this._upperBound) ||
                (_this._included && point <= _this._upperBound && point >= _this._lowerBound);
            /** @type {?} */
            var style$$1 = __assign({ left: offset }, _this._dotStyle);
            if (isActived) {
                style$$1 = __assign({}, style$$1, _this._activeDotStyle);
            }
            /** @type {?} */
            var pointClassName = (_a = {},
                _a[_this.prefixCls + "-dot"] = true,
                _a[_this.prefixCls + "-dot-active"] = isActived,
                _a);
            stepItem.point = point;
            stepItem.stepStyle = style$$1;
            stepItem.stepClass = pointClassName;
            _this.stepArray.push(stepItem);
        });
    };
    /**
     * @return {?}
     */
    SliderSteps.prototype.setActiveCls = /**
     * @return {?}
     */
    function () {
        var _a;
        for (var i = 0; i < this.stepArray.length; i++) {
            /** @type {?} */
            var point = this.stepArray[i].point;
            /** @type {?} */
            var isActived = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.stepArray[i].stepClass = (_a = {},
                _a[this.prefixCls + "-dot"] = true,
                _a[this.prefixCls + "-dot-active"] = isActived,
                _a);
        }
    };
    /**
     * @return {?}
     */
    SliderSteps.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var points = this.calPoints();
        this.getSteps(points);
    };
    SliderSteps.decorators = [
        { type: Component, args: [{
                    selector: 'SliderSteps, nzm-slider-steps',
                    template: "<span *ngFor=\"let item of stepArray\"\n      [ngClass]=\"item.stepClass\"\n      [ngStyle]=\"item.stepStyle\">\n</span>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SliderSteps.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SliderSteps.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        marks: [{ type: Input }],
        step: [{ type: Input }],
        included: [{ type: Input }],
        dots: [{ type: Input }],
        upperBound: [{ type: Input }],
        lowerBound: [{ type: Input }],
        class: [{ type: HostBinding }]
    };
    return SliderSteps;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderTrack = /** @class */ (function () {
    function SliderTrack(_elf, _sanitizer) {
        this._elf = _elf;
        this._sanitizer = _sanitizer;
        this.prefixCls = 'am-slider';
        this._included = true;
    }
    Object.defineProperty(SliderTrack.prototype, "className", {
        get: /**
         * @return {?}
         */
        function () {
            return this._className;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._className = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderTrack.prototype, "included", {
        get: /**
         * @return {?}
         */
        function () {
            return this._included;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderTrack.prototype, "offset", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._offset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderTrack.prototype, "length", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._length = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderTrack.prototype, "style", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._style = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderTrack.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var positonStyle = {
            left: this._offset + "%",
            width: this._length + "%"
        };
        this.elStyle = __assign({}, this._style, positonStyle);
    };
    SliderTrack.decorators = [
        { type: Component, args: [{
                    selector: 'SliderTrack, nzm-slider-track',
                    template: "<div *ngIf=\"included\" \n     [ngClass]=\"className\" \n     [ngStyle]=\"elStyle\" >\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SliderTrack.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer }
    ]; };
    SliderTrack.propDecorators = {
        className: [{ type: Input }],
        included: [{ type: Input }],
        offset: [{ type: Input }],
        length: [{ type: Input }],
        style: [{ type: Input }]
    };
    return SliderTrack;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderModule = /** @class */ (function () {
    function SliderModule() {
    }
    SliderModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Slider, SliderHandle, SliderMarks, SliderSteps, SliderTrack],
                    declarations: [Slider, SliderHandle, SliderMarks, SliderSteps, SliderTrack],
                    imports: [CommonModule]
                },] }
    ];
    return SliderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RangeModule = /** @class */ (function () {
    function RangeModule() {
    }
    RangeModule.decorators = [
        { type: NgModule, args: [{
                    exports: [Range],
                    declarations: [Range],
                    imports: [CommonModule, SliderModule]
                },] }
    ];
    return RangeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PaginationComponent = /** @class */ (function () {
    function PaginationComponent(_localeProviderService) {
        this._localeProviderService = _localeProviderService;
        this.prefixCls = 'am-pagination';
        this._locale = {};
        this._unsubscribe$ = new Subject();
        this.mode = 'button';
        this.current = 1;
        this.total = 0;
        this.simple = false;
        this.disabled = false;
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(PaginationComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._locale = v;
            this._unsubscribe$.next();
            this._unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @return {?}
     */
    PaginationComponent.prototype.isTemplateRef = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return /** @type {?} */ (key) instanceof TemplateRef;
    };
    /**
     * @param {?} p
     * @return {?}
     */
    PaginationComponent.prototype.onClick = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        this.current = p;
        this.onChange.emit(p);
    };
    /**
     * @param {?} p
     * @return {?}
     */
    PaginationComponent.prototype.getNumber = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        return new Array(p);
    };
    /**
     * @return {?}
     */
    PaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this._locale = _this._localeProviderService.getLocaleSubObj('Pagination');
        });
    };
    /**
     * @return {?}
     */
    PaginationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    PaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Pagination, nzm-pagination',
                    template: "<div class=\"{{prefixCls}} {{prefixCls}}-align-center\">\n  <Flex *ngIf=\"mode === 'button'\">\n    <FlexItem class=\"{{prefixCls}}-wrap-btn {{prefixCls}}-wrap-btn-prev\">\n      <a Button [inline]=\"true\" [disabled]=\"current <= 1\" (onClick)=\"onClick(current - 1)\">\n        <ng-container *ngIf=\"!isTemplateRef(locale.prevText)\">\n          {{locale.prevText}}\n        </ng-container>\n        <ng-template *ngIf=\"isTemplateRef(locale.prevText)\" [ngTemplateOutlet]=\"locale.prevText\"></ng-template>\n      </a>\n    </FlexItem>\n    <FlexItem class=\"{{prefixCls}}-wrap\" aria-live=\"assertive\" *ngIf=\"!simple\">\n      <span class=\"active\">{{current}}</span>/\n      <span>{{total}}</span>\n    </FlexItem>\n    <FlexItem class=\"{{prefixCls}}-wrap-btn {{prefixCls}}-wrap-btn-next\">\n      <a Button [inline]=\"true\" [disabled]=\"current>= total\" (onClick)=\"onClick(current + 1)\">\n        <ng-container *ngIf=\"!isTemplateRef(locale.nextText)\">\n          {{locale.nextText}}\n        </ng-container>\n        <ng-template *ngIf=\"isTemplateRef(locale.nextText)\" [ngTemplateOutlet]=\"locale.nextText\"></ng-template>\n      </a>\n    </FlexItem>\n  </Flex>\n\n  <div class=\"{{prefixCls}}-wrap\" *ngIf=\"mode === 'number'\">\n    <span class=\"active\">{{current}}</span>/<span>{{total}}</span>\n  </div>\n\n  <div class=\"{{prefixCls}}-wrap\" *ngIf=\"mode === 'pointer'\">\n    <div *ngFor=\"let number of getNumber(total); let i = index\" class=\"{{prefixCls}}-wrap-dot {{current === i+1 ? (prefixCls + '-wrap-dot-active') : ''}}\">\n      <span></span>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PaginationComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    PaginationComponent.propDecorators = {
        mode: [{ type: Input }],
        current: [{ type: Input }],
        total: [{ type: Input }],
        simple: [{ type: Input }],
        disabled: [{ type: Input }],
        locale: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return PaginationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PaginationModule = /** @class */ (function () {
    function PaginationModule() {
    }
    PaginationModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ButtonModule, FlexModule, IconModule, LocaleProviderModule],
                    declarations: [PaginationComponent],
                    exports: [PaginationComponent],
                    providers: [LocaleProviderModule]
                },] }
    ];
    return PaginationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TagComponent = /** @class */ (function () {
    function TagComponent() {
        this.prefixCls = 'am-tag';
        this.closed = false;
        this.wrapCls = {};
        this._small = false;
        this._closable = false;
        this._selected = false;
        this._disabled = false;
        this.onChange = new EventEmitter();
        this.onClose = new EventEmitter();
        this.afterClose = new EventEmitter();
    }
    Object.defineProperty(TagComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._small = v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagComponent.prototype, "closable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._closable;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._closable = v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagComponent.prototype, "selected", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._selected = v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disabled = v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TagComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this._disabled) {
            return;
        }
        this._selected = !this._selected;
        this.onChange.emit(this._selected);
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    TagComponent.prototype.onTagClose = /**
     * @return {?}
     */
    function () {
        this.onClose.emit();
        this.closed = true;
        this.afterClose.emit();
    };
    /**
     * @return {?}
     */
    TagComponent.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.wrapCls = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-normal"] = !this._disabled && (!this._selected || this._small || this._closable),
            _a[this.prefixCls + "-small"] = this._small,
            _a[this.prefixCls + "-active"] = this._selected && !this._disabled && !this._small && !this._closable,
            _a[this.prefixCls + "-disabled"] = this._disabled,
            _a[this.prefixCls + "-closable"] = this._closable,
            _a);
    };
    /**
     * @return {?}
     */
    TagComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    TagComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Tag, nzm-tag',
                    template: "<div *ngIf=\"!closed\" [ngClass]=\"wrapCls\" (click)=\"onClick()\">\n  <div class=\"{{prefixCls}}-text\">\n    <ng-content></ng-content>\n  </div>\n  <div *ngIf=\"closable && !disabled && !small\"\n       role=\"button\"\n       class=\"{{prefixCls}}-close\"\n       aria-label=\"remove tag\"\n       (click)=\"onTagClose()\">\n    <Icon aria-hidden=\"true\" [type]=\"'cross-circle'\" [size]=\"'xs'\"></Icon>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    TagComponent.ctorParameters = function () { return []; };
    TagComponent.propDecorators = {
        small: [{ type: Input }],
        closable: [{ type: Input }],
        selected: [{ type: Input }],
        disabled: [{ type: Input }],
        onChange: [{ type: Output }],
        onClose: [{ type: Output }],
        afterClose: [{ type: Output }]
    };
    return TagComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TagModule = /** @class */ (function () {
    function TagModule() {
    }
    TagModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule],
                    declarations: [TagComponent],
                    exports: [TagComponent]
                },] }
    ];
    return TagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MenuComponent = /** @class */ (function () {
    function MenuComponent(_localeProviderService) {
        this._localeProviderService = _localeProviderService;
        this.prefixCls = 'am-menu';
        this.subMenuPrefixCls = 'am-sub-menu';
        this.radioPrefixCls = 'am-radio';
        this.multiSelectMenuBtnsCls = 'am-multi-select-btns';
        this.menuSelectContanerPrefixCls = 'am-menu-select-container';
        this.locale = {};
        this._data = [];
        this._unsubscribe$ = new Subject();
        this.level = 2;
        this.value = [];
        this.height = document.documentElement.clientHeight / 2;
        this.multiSelect = false;
        this.onChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onCancel = new EventEmitter();
    }
    Object.defineProperty(MenuComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            this.initData();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MenuComponent.prototype.onMenuOk = /**
     * @return {?}
     */
    function () {
        this.onOk.emit(this.value);
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.onMenuCancel = /**
     * @return {?}
     */
    function () {
        this.onCancel.emit();
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.getNewFsv = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstValue = '';
        if (this.value && this.value.length) {
            firstValue = /** @type {?} */ (this.value[0]);
        }
        else if (this._data && this._data.length && !this._data[0].isLeaf) {
            firstValue = this._data[0].value;
        }
        return firstValue;
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    MenuComponent.prototype.onClickFirstLevelItem = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        this.firstLevelSelectValue = dataItem.value;
        if (dataItem.isLeaf && this.onChange) {
            this.onChange.emit([dataItem.value]);
        }
        this.initData();
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    MenuComponent.prototype.onClickSubMenuItem = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        var _this = this;
        this.value = this.getSelectValue(dataItem);
        this.initData();
        setTimeout(function () {
            _this.onChange.emit(_this.value);
        }, 300);
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    MenuComponent.prototype.getSelectValue = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        if (this.multiSelect) {
            if (this.value && this.value.length > 0) {
                if (this.level === 2 && this.value[0] !== this.firstLevelSelectValue) {
                    return [this.firstLevelSelectValue, [dataItem.value]];
                }
                else {
                    if (this.level == 1) {
                        /** @type {?} */
                        var chosenValues = Array.from(this.value);
                        /** @type {?} */
                        var existIndex = chosenValues.indexOf(dataItem.value);
                        if (existIndex === -1) {
                            chosenValues.push(dataItem.value);
                        }
                        else {
                            chosenValues.splice(existIndex, 1);
                        }
                        return chosenValues;
                    }
                    else {
                        /** @type {?} */
                        var chosenValues = Array.from(this.value[1]);
                        /** @type {?} */
                        var existIndex = chosenValues.indexOf(dataItem.value);
                        if (existIndex === -1) {
                            chosenValues.push(dataItem.value);
                        }
                        else {
                            chosenValues.splice(existIndex, 1);
                        }
                        return [this.firstLevelSelectValue, chosenValues];
                    }
                }
            }
            else {
                return this.level === 2 ? [this.firstLevelSelectValue, [dataItem.value]] : [dataItem.value];
            }
        }
        return this.level === 2 ? [this.firstLevelSelectValue, dataItem.value] : [dataItem.value];
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.initData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subMenuData = this._data;
        if (this.level === 2) {
            /** @type {?} */
            var parent_1 = this._data;
            if (this.firstLevelSelectValue && this.firstLevelSelectValue !== '') {
                parent_1 = this._data.filter(function (dataItem) { return dataItem.value === _this.firstLevelSelectValue; });
            }
            if (parent_1[0] && parent_1[0].children && parent_1[0].isLeaf !== true) {
                this.subMenuData = parent_1[0].children;
            }
            else {
                this.subMenuData = [];
            }
        }
        /** @type {?} */
        var subValue = (this.value && this.value.length > 0 && __spread(this.value)) || [];
        if (this.level === 2 && subValue.length > 1) {
            subValue.shift();
            if (this.multiSelect) {
                subValue = /** @type {?} */ (subValue[0]);
            }
        }
        this.subSelInitItem = this.subMenuData.filter(function (dataItem) { return subValue.indexOf(dataItem.value) !== -1; }).map(function (item) {
            return item.value;
        });
        /** @type {?} */
        var parentValue = this.value && this.value.length > 1 && this.level === 2 ? this.value[0] : null;
        this.showSelect = true;
        if (this.level === 2 && parentValue !== this.firstLevelSelectValue) {
            this.showSelect = false;
        }
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    MenuComponent.prototype.getClass = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        return this.dataItemSelected(dataItem) ? this.prefixCls + '-selected' : '';
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    MenuComponent.prototype.dataItemSelected = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        return dataItem.value === this.firstLevelSelectValue;
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this.locale = _this._localeProviderService.getLocaleSubObj('Menu');
        });
        this.firstLevelSelectValue = this.getNewFsv();
        this.heightStyle = {
            height: this.height + 'px'
        };
        this.initData();
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    MenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Menu, nzm-menu',
                    template: "<Flex class=\"{{prefixCls}}\"\n      [ngStyle]=\"heightStyle\"\n      [direction]=\"'column'\"\n      [align]=\"'stretch'\"\n>\n  <Flex class=\"{{menuSelectContanerPrefixCls}}\" [align]=\"'start'\">\n    <FlexItem *ngIf=\"level == 2\">\n      <List role=\"tablist\">\n        <ListItem role=\"tab\"\n                  *ngFor=\"let dataItem of data, let i = index\"\n                  [className]=\"getClass(dataItem)\"\n                  (click)=\"onClickFirstLevelItem(dataItem)\"\n        >\n          {{dataItem.label}}\n        </ListItem>\n      </List>\n    </FlexItem>\n\n    <FlexItem role=\"tabpanel\" aria-hidden=\"false\" class=\"{{menuSelectContanerPrefixCls}}-submenu\">\n      <SubMenu [subMenuPrefixCls]=\"subMenuPrefixCls\"\n               [radioPrefixCls]=\"radioPrefixCls\"\n               [subMenuData]=\"subMenuData\"\n               [selItem]=\"subSelInitItem\"\n               [showSelect]=\"showSelect\"\n               [multiSelect]=\"multiSelect\"\n               (onSel)=\"onClickSubMenuItem($event)\">\n      </SubMenu>\n    </FlexItem>\n  </Flex>\n\n  <div *ngIf=\"multiSelect\" class=\"{{multiSelectMenuBtnsCls}}\">\n    <a Button\n       [className]=\"'am-multi-select-btns-btn'\"\n       [inline]=\"true\"\n       (onClick)=\"onMenuCancel()\"\n    >\n      {{locale.cancelText}}\n    </a>\n    <a Button\n       [className]=\"'am-multi-select-btns-btn'\"\n       [inline]=\"true\" [type]=\"'primary'\"\n       (onClick)=\"onMenuOk()\"\n    >\n      {{locale.okText}}\n    </a>\n  </div>\n</Flex>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    MenuComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    MenuComponent.propDecorators = {
        data: [{ type: Input }],
        level: [{ type: Input }],
        value: [{ type: Input }],
        height: [{ type: Input }],
        multiSelect: [{ type: Input }],
        onChange: [{ type: Output }],
        onOk: [{ type: Output }],
        onCancel: [{ type: Output }]
    };
    return MenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SubMenuComponent = /** @class */ (function () {
    function SubMenuComponent() {
        this.prefixCls = 'am-sub-menu';
        this.onSel = new EventEmitter();
    }
    Object.defineProperty(SubMenuComponent.prototype, "subMenuPrefixCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subMenuPrefixCls;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._subMenuPrefixCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubMenuComponent.prototype, "radioPrefixCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._radioPrefixCls;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._radioPrefixCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubMenuComponent.prototype, "subMenuData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subMenuData;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._subMenuData = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubMenuComponent.prototype, "showSelect", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showSelect;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._showSelect = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubMenuComponent.prototype, "selItem", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selItem;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._selItem = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubMenuComponent.prototype, "multiSelect", {
        get: /**
         * @return {?}
         */
        function () {
            return this._multiSelect;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._multiSelect = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} dataItem
     * @return {?}
     */
    SubMenuComponent.prototype.onClick = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        this.onSel.emit(dataItem);
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    SubMenuComponent.prototype.selected = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        return this._showSelect && (this._selItem.length > 0 && this._selItem.indexOf(dataItem.value) !== -1);
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    SubMenuComponent.prototype.getClass = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        /** @type {?} */
        var name = this._radioPrefixCls + '-item ';
        name += this.selected(dataItem) ? this._subMenuPrefixCls + '-item-selected' : '';
        name += dataItem.disabled ? this._subMenuPrefixCls + '-item-disabled' : '';
        return name;
    };
    SubMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'SubMenu, nzm-sub-menu',
                    template: "<List class=\"{{subMenuPrefixCls}}\" style=\"padding: 0\">\n  <ListItem *ngFor=\"let dataItem of subMenuData; let i = index;\"\n            key=\"i\"\n            [className]=\"getClass(dataItem)\"\n            [extra]=\"extra\"\n  >\n    {{dataItem.label}}\n\n    <ng-template #extra>\n      <label Radio\n             *ngIf=\"!multiSelect\"\n             [checked]=\"selected(dataItem)\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n      <label Checkbox\n             *ngIf=\"multiSelect\"\n             [checked]=\"selected(dataItem)\"\n             [disabled]=\"dataItem.disabled\"\n             (onChange)=\"onClick(dataItem)\"\n      >\n      </label>\n    </ng-template>\n  </ListItem>\n</List>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SubMenuComponent.ctorParameters = function () { return []; };
    SubMenuComponent.propDecorators = {
        onSel: [{ type: Output }],
        subMenuPrefixCls: [{ type: Input }],
        radioPrefixCls: [{ type: Input }],
        subMenuData: [{ type: Input }],
        showSelect: [{ type: Input }],
        selItem: [{ type: Input }],
        multiSelect: [{ type: Input }]
    };
    return SubMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MenuModule = /** @class */ (function () {
    function MenuModule() {
    }
    MenuModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FlexModule, ListModule, RadioModule, CheckboxModule, ButtonModule, LocaleProviderModule],
                    exports: [MenuComponent, SubMenuComponent],
                    declarations: [MenuComponent, SubMenuComponent],
                    providers: [LocaleProviderModule]
                },] }
    ];
    return MenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DrawerComponent = /** @class */ (function () {
    function DrawerComponent(_el) {
        this._el = _el;
        this.prefixCls = 'am-drawer';
        this.sidebarStyleFinal = {};
        this.contentStyleFinal = {};
        this.overlayStyleFinal = {};
        this.sidebarWidth = 0;
        this.sidebarHeight = 0;
        this.sidebarTop = 0;
        this.dragHandleTop = 0;
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.touchSupported = typeof window === 'object' && 'ontouchstart' in window;
        this._docked = false;
        this._open = false;
        this._position = 'left';
        this.sidebarStyle = {};
        this.contentStyle = {};
        this.overlayStyle = {};
        this.dragHandleStyle = {};
        this.transitions = true;
        this.touch = true;
        this.enableDragHandle = true;
        this.dragToggleDistance = 30;
        this.onOpenChange = new EventEmitter();
        this.am = true;
        this.left = this._position === 'left';
        this.right = this._position === 'right';
        this.top = this._position == 'top';
        this.bottom = this._position == 'bottom';
        this.dockedCls = this._docked;
        this.openCls = this._open;
    }
    Object.defineProperty(DrawerComponent.prototype, "docked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._docked;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._docked = v;
            this.dockedCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerComponent.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._open = v;
            this.openCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerComponent.prototype, "position", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._position = v;
            this.right = false;
            this.left = false;
            this.top = false;
            this.bottom = false;
            switch (v) {
                case 'right':
                    this.right = true;
                    break;
                case 'left':
                    this.left = true;
                    break;
                case 'top':
                    this.top = true;
                    break;
                case 'bottom':
                    this.bottom = true;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DrawerComponent.prototype.onOverlayClicked = /**
     * @return {?}
     */
    function () {
        if (this._open) {
            this.onOpenChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.isTouching = /**
     * @return {?}
     */
    function () {
        return this.touchIdentifier !== null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrawerComponent.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var touch = event.changedTouches[0];
        this.touchIdentifier = touch.identifier;
        this.touchStartX = touch.clientX;
        this.touchStartY = touch.clientY;
        this.touchCurrentX = touch.clientX;
        this.touchCurrentY = touch.clientY;
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    DrawerComponent.prototype.onTouchMove = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        for (var ind = 0; ind < ev.changedTouches.length; ind++) {
            if (ev.changedTouches[ind].identifier === this.touchIdentifier) {
                this.touchCurrentX = ev.changedTouches[ind].clientX;
                this.touchCurrentY = ev.changedTouches[ind].clientY;
                break;
            }
        }
        this.update();
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.onTouchEnd = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var touchWidth = this.touchSidebarWidth();
        if ((this._open && touchWidth < this.sidebarWidth - this.dragToggleDistance) ||
            (!this._open && touchWidth > this.dragToggleDistance)) {
            this.onOpenChange.emit(!this._open);
        }
        /** @type {?} */
        var touchHeight = this.touchSidebarHeight();
        if ((this._open && touchHeight < this.sidebarHeight - this.dragToggleDistance) ||
            (!this._open && touchHeight > this.dragToggleDistance)) {
            this.onOpenChange.emit(!this._open);
        }
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.update();
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.saveSidebarSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sidebar = this._el.nativeElement.querySelector('#sidebar');
        /** @type {?} */
        var dragHandle = this._el.nativeElement.querySelector('#dragHandle');
        /** @type {?} */
        var width = sidebar.offsetWidth;
        /** @type {?} */
        var height = sidebar.offsetHeight;
        /** @type {?} */
        var sidebarTop = this.getOffset(sidebar).top;
        /** @type {?} */
        var dragHandleTop = this.getOffset(dragHandle).top;
        if (width !== this.sidebarWidth) {
            this.sidebarWidth = width;
        }
        if (height !== this.sidebarHeight) {
            this.sidebarHeight = height;
        }
        if (sidebarTop !== this.sidebarTop) {
            this.sidebarTop = sidebarTop;
        }
        if (dragHandleTop !== this.dragHandleTop) {
            this.dragHandleTop = dragHandleTop;
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.touchSidebarWidth = /**
     * @return {?}
     */
    function () {
        if (this._position === 'right') {
            if (this._open && window.innerWidth - this.touchStartX < this.sidebarWidth) {
                if (this.touchCurrentX > this.touchStartX) {
                    return this.sidebarWidth + this.touchStartX - this.touchCurrentX;
                }
                return this.sidebarWidth;
            }
            return Math.min(window.innerWidth - this.touchCurrentX, this.sidebarWidth);
        }
        if (this._position === 'left') {
            if (this._open && this.touchStartX < this.sidebarWidth) {
                if (this.touchCurrentX > this.touchStartX) {
                    return this.sidebarWidth;
                }
                return this.sidebarWidth - this.touchStartX + this.touchCurrentX;
            }
            return Math.min(this.touchCurrentX, this.sidebarWidth);
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.touchSidebarHeight = /**
     * @return {?}
     */
    function () {
        if (this._position === 'bottom') {
            if (this._open &&
                this._el.nativeElement.offsetHeight - this.touchStartY + this._el.nativeElement.offsetTop < this.sidebarHeight) {
                if (this.touchCurrentY > this.touchStartY) {
                    return this.sidebarHeight + this.touchStartY - this.touchCurrentY;
                }
                return this.sidebarHeight;
            }
            return Math.min(this._el.nativeElement.offsetHeight - this.touchCurrentY + this._el.nativeElement.offsetTop, this.sidebarHeight);
        }
        if (this._position === 'top') {
            /** @type {?} */
            var touchStartOffsetY = this.touchStartY - this.sidebarTop;
            if (this._open && touchStartOffsetY < this.sidebarHeight) {
                if (this.touchCurrentY > this.touchStartY) {
                    return this.sidebarHeight;
                }
                return this.sidebarHeight - this.touchStartY + this.touchCurrentY;
            }
            return Math.min(this.touchCurrentY - this.dragHandleTop, this.sidebarHeight);
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    DrawerComponent.prototype.renderStyle = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var sidebarStyle = _a.sidebarStyle, isTouching = _a.isTouching, overlayStyle = _a.overlayStyle, contentStyle = _a.contentStyle;
        if (this._position === 'right' || this._position === 'left') {
            sidebarStyle.transform = "translateX(0%)";
            sidebarStyle.WebkitTransform = "translateX(0%)";
            if (isTouching) {
                /** @type {?} */
                var percentage = this.touchSidebarWidth() / this.sidebarWidth;
                // slide open to what we dragged
                if (this._position === 'right') {
                    sidebarStyle.transform = "translateX(" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateX(" + (1 - percentage) * 100 + "%)";
                }
                if (this._position === 'left') {
                    sidebarStyle.transform = "translateX(-" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateX(-" + (1 - percentage) * 100 + "%)";
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = this.sidebarWidth + "px";
            }
        }
        if (this._position === 'top' || this._position === 'bottom') {
            sidebarStyle.transform = "translateY(0%)";
            sidebarStyle.WebkitTransform = "translateY(0%)";
            if (isTouching) {
                /** @type {?} */
                var percentage = this.touchSidebarHeight() / this.sidebarHeight;
                if (this._position === 'bottom') {
                    sidebarStyle.transform = "translateY(" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateY(" + (1 - percentage) * 100 + "%)";
                }
                if (this._position === 'top') {
                    sidebarStyle.transform = "translateY(-" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateY(-" + (1 - percentage) * 100 + "%)";
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = this.sidebarHeight + "px";
            }
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sidebarStyle = __assign({}, this.sidebarStyle);
        /** @type {?} */
        var contentStyle = __assign({}, this.contentStyle);
        /** @type {?} */
        var overlayStyle = __assign({}, this.overlayStyle);
        if (this.isTouching()) {
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: true,
                contentStyle: undefined,
                overlayStyle: overlayStyle
            });
        }
        else if (this._docked) {
            this.dockedCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: contentStyle,
                overlayStyle: undefined
            });
        }
        else if (this._open) {
            this.openCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: undefined,
                overlayStyle: undefined
            });
            overlayStyle["opacity"] = 1;
            overlayStyle["visibility"] = 'visible';
        }
        if (this.isTouching() || !this.transitions) {
            sidebarStyle["transition"] = 'none';
            sidebarStyle["WebkitTransition"] = 'none';
            contentStyle["transition"] = 'none';
            overlayStyle["transition"] = 'none';
        }
        this.sidebarStyleFinal = sidebarStyle;
        this.contentStyleFinal = contentStyle;
        this.overlayStyleFinal = overlayStyle;
    };
    /**
     * @param {?} ele
     * @return {?}
     */
    DrawerComponent.prototype.getOffset = /**
     * @param {?} ele
     * @return {?}
     */
    function (ele) {
        /** @type {?} */
        var el = ele;
        /** @type {?} */
        var _x = 0;
        /** @type {?} */
        var _y = 0;
        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (!this.isTouching()) {
            this.saveSidebarSize();
        }
    };
    /**
     * @return {?}
     */
    DrawerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.update();
    };
    DrawerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Drawer, nzm-drawer',
                    template: "<div class=\"{{prefixCls}}-sidebar\"\n     [ngStyle]=\"sidebarStyleFinal\"\n     id=\"sidebar\">\n  <ng-template [ngTemplateOutlet]=\"sidebar\"></ng-template>\n</div>\n<div class=\"{{prefixCls}}-overlay\"\n     [ngStyle]=\"overlayStyleFinal\"\n     role=\"presentation\"\n     ref=\"overlay\"\n     (click)=\"onOverlayClicked()\"\n></div>\n<div class=\"{{prefixCls}}-content\"\n     [ngStyle]=\"contentStyleFinal\"\n     ref=\"content\">\n  <div *ngIf=\"touch && touchSupported && !open && !docked && enableDragHandle\"\n       id=\"dragHandle\"\n       class=\"{{prefixCls}}-draghandle\"\n       [ngStyle]=\"dragHandleStyle\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd()\"\n       (touchcancle)=\"onTouchEnd()\"\n  ></div>\n  <ng-content></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DrawerComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DrawerComponent.propDecorators = {
        sidebar: [{ type: Input }],
        sidebarStyle: [{ type: Input }],
        contentStyle: [{ type: Input }],
        overlayStyle: [{ type: Input }],
        dragHandleStyle: [{ type: Input }],
        transitions: [{ type: Input }],
        touch: [{ type: Input }],
        enableDragHandle: [{ type: Input }],
        dragToggleDistance: [{ type: Input }],
        docked: [{ type: Input }],
        open: [{ type: Input }],
        position: [{ type: Input }],
        onOpenChange: [{ type: Output }],
        am: [{ type: HostBinding, args: ['class.am-drawer',] }],
        left: [{ type: HostBinding, args: ['class.am-drawer-left',] }],
        right: [{ type: HostBinding, args: ['class.am-drawer-right',] }],
        top: [{ type: HostBinding, args: ['class.am-drawer-top',] }],
        bottom: [{ type: HostBinding, args: ['class.am-drawer-bottom',] }],
        dockedCls: [{ type: HostBinding, args: ['class.am-drawer-docked',] }],
        openCls: [{ type: HostBinding, args: ['class.am-drawer-open',] }]
    };
    return DrawerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DrawerModule = /** @class */ (function () {
    function DrawerModule() {
    }
    DrawerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [DrawerComponent],
                    exports: [DrawerComponent]
                },] }
    ];
    return DrawerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SwipeAction = /** @class */ (function () {
    function SwipeAction() {
        var _this = this;
        this.prefixCls = 'am-swipe';
        this.wrapCls = {};
        this._swiping = false;
        this._openedLeft = false;
        this._openedRight = false;
        this.left = [];
        this.right = [];
        this.autoClose = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onCloseSwipe = function () {
            if (!(_this._openedLeft || _this._openedRight)) {
                return;
            }
            _this.close();
        };
        this.onTouchStart = function (e) {
            _this._startX = e.changedTouches[0].clientX;
            _this._swiping = true;
        };
    }
    /**
     * @return {?}
     */
    SwipeAction.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.wrapCls = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-swiping"] = this._swiping,
            _a);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this._openedLeft || this._openedRight) {
            this.onClose.emit();
        }
        this.setBtnStyle(0);
        this._openedLeft = false;
        this._openedRight = false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SwipeAction.prototype.setBtnStyle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var limit = value > 0 ? this._btnsLeftWidth : -this._btnsRightWidth;
        /** @type {?} */
        var contentLeft = this.getContentEasing(value, limit);
        this.content.nativeElement.style.left = contentLeft + "px";
        this.cover.nativeElement.style.display = Math.abs(value) > 0 ? 'block' : 'none';
        this.cover.nativeElement.style.left = contentLeft + "px";
    };
    /**
     * @param {?} value
     * @param {?} limit
     * @return {?}
     */
    SwipeAction.prototype.getContentEasing = /**
     * @param {?} value
     * @param {?} limit
     * @return {?}
     */
    function (value, limit) {
        return Math.abs(value) - Math.abs(limit) > 0 ? limit : value;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SwipeAction.prototype.onTouchMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var deltaX = e.changedTouches[0].clientX - this._startX;
        e.preventDefault();
        this._needShowRight = deltaX < 0 && this.right.length > 0;
        this._needShowLeft = deltaX > 0 && this.left.length > 0;
        if (this.leftBtnRef) {
            this.leftBtnRef.nativeElement.style.visibility = this._needShowRight ? 'hidden' : 'visible';
        }
        if (this.rightBtnRef) {
            this.rightBtnRef.nativeElement.style.visibility = this._needShowLeft ? 'hidden' : 'visible';
        }
        this.setBtnStyle(deltaX);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SwipeAction.prototype.onTouchEnd = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var deltaX = e.changedTouches[0].clientX - this._startX;
        /** @type {?} */
        var needOpenRight = this._needShowRight && Math.abs(deltaX) > this._btnsRightWidth / 2;
        /** @type {?} */
        var needOpenLeft = this._needShowLeft && Math.abs(deltaX) > this._btnsLeftWidth / 2;
        if (needOpenRight) {
            this.doOpenRight();
        }
        else if (needOpenLeft) {
            this.doOpenLeft();
        }
        else {
            this.close();
        }
        this._swiping = false;
        this._needShowLeft = false;
        this._needShowRight = false;
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.doOpenLeft = /**
     * @return {?}
     */
    function () {
        this.open(this._btnsLeftWidth, true, false);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.doOpenRight = /**
     * @return {?}
     */
    function () {
        this.open(-this._btnsRightWidth, false, true);
    };
    /**
     * @param {?} ev
     * @param {?} btn
     * @return {?}
     */
    SwipeAction.prototype.onBtnClick = /**
     * @param {?} ev
     * @param {?} btn
     * @return {?}
     */
    function (ev, btn) {
        /** @type {?} */
        var onPress = btn.onPress;
        if (onPress) {
            onPress(ev);
        }
        if (this.autoClose) {
            this.close();
        }
    };
    /**
     * @param {?} value
     * @param {?} openedLeft
     * @param {?} openedRight
     * @return {?}
     */
    SwipeAction.prototype.open = /**
     * @param {?} value
     * @param {?} openedLeft
     * @param {?} openedRight
     * @return {?}
     */
    function (value, openedLeft, openedRight) {
        this.onOpen.emit();
        this._openedLeft = openedLeft;
        this._openedRight = openedRight;
        this.setBtnStyle(value);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._btnsLeftWidth = this.leftBtnRef ? this.leftBtnRef.nativeElement.offsetWidth : 0;
        this._btnsRightWidth = this.rightBtnRef ? this.rightBtnRef.nativeElement.offsetWidth : 0;
        document.body.addEventListener('touchstart', this.onCloseSwipe, true);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        document.body.removeEventListener('touchstart', this.onCloseSwipe, true);
    };
    SwipeAction.decorators = [
        { type: Component, args: [{
                    selector: 'SwipeAction, nzm-swipe-action',
                    template: "<div *ngIf=\"(left.length != 0 || right.length != 0) && !disabled\" [ngClass]=\"wrapCls\">\n  <div class=\"{{prefixCls}}-cover\" #coverRef></div>\n  <div *ngIf=\"left && left.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-left\"\n       #leftBtnRef>\n    <div *ngFor=\"let btn of left\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\">\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"right && right.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-right\"\n       #rightBtnRef>\n    <div *ngFor=\"let btn of right\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\"\n         >\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div class=\"{{prefixCls}}-content\"\n       #contentRef\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\">\n    <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n  </div>\n</div>\n<div *ngIf=\"!((left.length != 0 || right.length != 0) && !disabled)\"\n     class=\"{{prefixCls}}-content\"\n     #contentRef>\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</div>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SwipeAction.ctorParameters = function () { return []; };
    SwipeAction.propDecorators = {
        leftBtnRef: [{ type: ViewChild, args: ['leftBtnRef',] }],
        rightBtnRef: [{ type: ViewChild, args: ['rightBtnRef',] }],
        content: [{ type: ViewChild, args: ['contentRef',] }],
        cover: [{ type: ViewChild, args: ['coverRef',] }],
        left: [{ type: Input }],
        right: [{ type: Input }],
        autoClose: [{ type: Input }],
        disabled: [{ type: Input }],
        onOpen: [{ type: Output }],
        onClose: [{ type: Output }]
    };
    return SwipeAction;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SwipeActionModule = /** @class */ (function () {
    function SwipeActionModule() {
    }
    SwipeActionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [SwipeAction],
                    declarations: [SwipeAction],
                    providers: [],
                },] }
    ];
    return SwipeActionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefreshComponent = /** @class */ (function () {
    function PullToRefreshComponent() {
        this.transtionCls = {};
        this.style = {
            '-webkit-transform': 'translate3d( 0, 0, 0 )',
            transform: 'translate3d( 0, 0, 0 )'
        };
        this.state = {
            currSt: 'deactivate',
            drag: false
        };
        this._indicator = {
            activate: '松开立即刷新',
            deactivate: '下拉可以刷新',
            release: '刷新中。。。',
            finish: '完成刷新'
        };
        this._direction = 'down';
        this._clientHeight = 0;
        this._currentContentHeight = 0;
        this._footerHeight = 54;
        this._lastcontentOffset = 0;
        this._viewHeight = Math.max(window.innerHeight, window.innerWidth);
        this.scrollRefresh = false;
        this.distanceToRefresh = 25;
        this.damping = 100;
        this.footerRefresh = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.refresh = true;
        this.container = true;
        this.refreshUp = false;
        this.refreshDown = true;
    }
    Object.defineProperty(PullToRefreshComponent.prototype, "direction", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this.refreshUp = this._direction === 'up';
            this.refreshDown = this._direction === 'down';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PullToRefreshComponent.prototype, "indicator", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indicator;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._indicator.activate = value.activate ? value.activate : this._indicator.activate;
            this._indicator.deactivate = value.deactivate ? value.deactivate : this._indicator.deactivate;
            this._indicator.release = value.release ? value.release : this._indicator.release;
            this._indicator.finish = value.finish ? value.finish : this._indicator.finish;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchstart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._direction === 'down') {
            if (document.getElementsByTagName('pulltorefresh')[0].scrollTop > 0) {
                this.startY = undefined;
                return;
            }
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this.state.drag = undefined;
        }
        else {
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this._clientHeight = this._pullToRefresh.element.nativeElement.clientHeight;
            this._currentContentHeight = document.getElementsByTagName('pulltorefresh')[0].clientHeight;
        }
        this.transtionCls = '';
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchmove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._direction === 'down') {
            if (!this.startY) {
                return;
            }
            /** @type {?} */
            var distanceY = e.changedTouches[0].clientY - this.startY;
            if (distanceY < 0) {
                // 滚动
                this.state.drag = false;
            }
            else {
                // 下拉
                this.state.drag = true;
            }
            if (this.state.drag) {
                // 禁止滚动
                e.preventDefault();
            }
            else {
                return;
            }
            if (distanceY > this.damping) {
                //当超过设定阈值是，缓慢增加
                distanceY = (distanceY / (distanceY + this.damping)) * this.damping * 2;
            }
            else if (distanceY < 0) {
                distanceY = 0;
            }
            if (distanceY > this.distanceToRefresh) {
                this.state.currSt = 'activate';
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
        else {
            /** @type {?} */
            var distanceY = e.changedTouches[0].clientY - this.startY;
            //向上拉动的时候，如果当前窗口内容没有滚到最后，则不实现拖动的动作；向下滚动不实现拖动动作
            if (Math.abs(this._lastcontentOffset) <= this._clientHeight - this._currentContentHeight - this.distanceToRefresh ||
                distanceY > 0) {
                // 滚动
                this.state.drag = false;
            }
            else {
                // 上拉
                this.state.drag = true;
            }
            if (this.state.drag) {
                // 禁止滚动
                e.preventDefault();
            }
            else {
                return;
            }
            //如果滑动到底部了，滑动距离随着拉动的距离增加缓慢增加
            distanceY = -(distanceY / (distanceY - this.damping)) * this.damping;
            if (Math.abs(distanceY) > this.distanceToRefresh) {
                this.state.currSt = 'activate';
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchend = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (!this.startY || this.state.drag === false) {
            return;
        }
        /** @type {?} */
        var distanceY = e.changedTouches[0].clientY - this.startY;
        if (Math.abs(distanceY) >= this.distanceToRefresh) {
            this.state.currSt = 'release';
            if (this._direction === 'down') {
                this.translateY(this.distanceToRefresh + 1);
            }
            else {
                this.translateY(-this.distanceToRefresh - 1);
            }
            setTimeout(function () {
                _this.state.currSt = 'finish';
                _this.onRefresh.emit();
                setTimeout(function () {
                    _this.state.currSt = 'deactivate';
                    _this.translateY(0);
                }, 0);
            }, 500);
        }
        else {
            this.translateY(0);
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchcancel = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        this.translateY(0);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    PullToRefreshComponent.prototype.scroll = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        /** @type {?} */
        var contentOffset = evt.target.scrollTop;
        /** @type {?} */
        var offset = contentOffset - this._lastcontentOffset;
        this._lastcontentOffset = contentOffset;
        if (!this.scrollRefresh) {
            return;
        }
        if (offset > 0 &&
            contentOffset > 0 &&
            evt.target.scrollTop + this._viewHeight > evt.target.scrollHeight - this._footerHeight / 2) {
            setTimeout(function () {
                _this.footerRefresh.emit('finished');
            }, 500);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PullToRefreshComponent.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
    };
    /**
     * @param {?} distanceY
     * @return {?}
     */
    PullToRefreshComponent.prototype.translateY = /**
     * @param {?} distanceY
     * @return {?}
     */
    function (distanceY) {
        this.transtionCls = 'am-pull-to-refresh-transition';
        this.style = {
            '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
            transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
        };
    };
    PullToRefreshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'PullToRefresh, nzm-pull-to-refresh',
                    template: "<div class=\"am-pull-to-refresh-content-wrapper\">\n  <div class=\"am-pull-to-refresh-content\" [ngClass]=\"transtionCls\" [ngStyle]=\"style\">\n    <div *ngIf=\"direction === 'down'\" class=\"am-pull-to-refresh-indicator\">\n      <ng-template *ngIf=\"isTemplateRef(indicator[state.currSt])\" [ngTemplateOutlet]=\"indicator[state.currSt]\"></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(indicator[state.currSt])\">{{indicator[state.currSt]}}</ng-container>\n    </div>\n    <div #pullToRefresh>\n      <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"direction === 'up'\" class=\"am-pull-to-refresh-indicator\">\n      <ng-template *ngIf=\"isTemplateRef(indicator[state.currSt])\" [ngTemplateOutlet]=\"indicator[state.currSt]\"></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(indicator[state.currSt])\">{{indicator[state.currSt]}}</ng-container>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PullToRefreshComponent.ctorParameters = function () { return []; };
    PullToRefreshComponent.propDecorators = {
        _pullToRefresh: [{ type: ViewChild, args: ['pullToRefresh', { read: ViewContainerRef },] }],
        scrollRefresh: [{ type: Input }],
        distanceToRefresh: [{ type: Input }],
        damping: [{ type: Input }],
        direction: [{ type: Input }],
        indicator: [{ type: Input }],
        footerRefresh: [{ type: Output }],
        onRefresh: [{ type: Output }],
        refresh: [{ type: HostBinding, args: ['class.am-pull-to-refresh',] }],
        container: [{ type: HostBinding, args: ['class.super-container',] }],
        refreshUp: [{ type: HostBinding, args: ['class.am-pull-to-refresh-up',] }],
        refreshDown: [{ type: HostBinding, args: ['class.am-pull-to-refresh-down',] }],
        touchstart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        touchmove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        touchend: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        touchcancel: [{ type: HostListener, args: ['touchcancel', ['$event'],] }],
        scroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return PullToRefreshComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var PullToRefreshModule = /** @class */ (function () {
    function PullToRefreshModule() {
    }
    PullToRefreshModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, IconModule],
                    exports: [PullToRefreshComponent],
                    declarations: [PullToRefreshComponent]
                },] }
    ];
    return PullToRefreshModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ToastOptions = /** @class */ (function () {
    function ToastOptions() {
    }
    ToastOptions.decorators = [
        { type: Injectable }
    ];
    return ToastOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Toast = /** @class */ (function () {
    function Toast(_appRef, _compiler, _cfr, _zone) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        this._zone = _zone;
        Toast._zone = this._zone;
        Toast._appRef = this._appRef;
        Toast._toastCompFactory = this._cfr.resolveComponentFactory(ToastComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    Toast._initConfig = /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    function (config, options) {
        /** @type {?} */
        var props = {};
        /** @type {?} */
        var optionalParams = ['content', 'iconType', 'mask'];
        config = Object.assign(options, config);
        optionalParams.forEach(function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        /** @type {?} */
        var iconType = {
            info: '',
            success: 'success',
            fail: 'fail',
            offline: 'dislike',
            loading: 'loading'
        }[options.iconType];
        props['iconType'] = iconType;
        props['mask'] = options.mask;
        return props;
    };
    /**
     * @param {?} config
     * @param {?} type
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.notice = /**
     * @param {?} config
     * @param {?} type
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (config, type, timeInterval, onClose, mask) {
        if (timeInterval === void 0) { timeInterval = 2000; }
        if (mask === void 0) { mask = true; }
        // 如果已经存在，在没有遮罩层的情况下，会响应别的toast，需要清除原来的
        if (Toast.compRef) {
            Toast.hide();
        }
        /** @type {?} */
        var options = new ToastOptions();
        options.iconType = type;
        options.mask = mask;
        /** @type {?} */
        var props = Toast._initConfig(config, options);
        document.body.insertBefore(document.createElement(Toast._toastCompFactory.selector), document.body.firstChild);
        /** @type {?} */
        var instance;
        /** @type {?} */
        var subject;
        Toast.compRef = Toast._appRef.bootstrap(Toast._toastCompFactory);
        instance = Toast.compRef.instance;
        subject = instance.subject;
        if (timeInterval) {
            Toast.timeout = setTimeout(function () {
                if (onClose) {
                    onClose();
                }
                Toast.hide();
            }, timeInterval);
        }
        Object.assign(instance, props);
        return subject;
    };
    /**
     * Open info dialog
     */
    /**
     * Open info dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.info = /**
     * Open info dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, onClose, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'info',
            content: content
        });
        return Toast.notice(config, 'info', timeInterval, onClose, mask);
    };
    /**
     * Open success dialog
     */
    /**
     * Open success dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.success = /**
     * Open success dialog
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, onClose, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'success',
            content: content
        });
        return Toast.notice(config, 'success', timeInterval, onClose, mask);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} mask
     * @return {?}
     */
    Toast.show = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'info',
            content: content
        });
        return Toast.notice(config, 'info', timeInterval, function () { }, mask);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.fail = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, onClose, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'fail',
            content: content
        });
        return Toast.notice(config, 'fail', timeInterval, onClose, mask);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.offline = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, onClose, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'offline',
            content: content
        });
        return Toast.notice(config, 'offline', timeInterval, onClose, mask);
    };
    /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    Toast.loading = /**
     * @param {?=} content
     * @param {?=} timeInterval
     * @param {?=} onClose
     * @param {?=} mask
     * @return {?}
     */
    function (content, timeInterval, onClose, mask) {
        /** @type {?} */
        var config = Object.assign({
            iconType: 'loading',
            content: content
        });
        return Toast.notice(config, 'loading', timeInterval, onClose, mask);
    };
    /**
     * @return {?}
     */
    Toast.hide = /**
     * @return {?}
     */
    function () {
        if (Toast.timeout) {
            clearTimeout(Toast.timeout);
        }
        if (Toast.compRef) {
            Toast._zone.run(function () {
                Toast.compRef.destroy();
            });
            Toast.compRef = null;
        }
    };
    Toast.timeout = null;
    Toast._zone = null;
    Toast.compRef = null;
    Toast._toastCompFactory = null;
    Toast._appRef = null;
    Toast.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Toast.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: Compiler },
        { type: ComponentFactoryResolver },
        { type: NgZone }
    ]; };
    return Toast;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Modal = /** @class */ (function () {
    function Modal(_appRef, _compiler, _cfr) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        Modal.appRef = this._appRef;
        Modal._modalCompFactory = this._cfr.resolveComponentFactory(ModalComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    Modal._initConfig = /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    function (config, options) {
        /** @type {?} */
        var props = new BaseOptions();
        /** @type {?} */
        var optionalParams = [
            'visible',
            'focus',
            'closable',
            'maskClosable',
            'onClose',
            'transparent',
            'popup',
            'animationType',
            'title',
            'footer',
            'platform',
            'className',
            'wrapClassName',
            'message',
            'actions',
            'callbackOrActions',
            'type',
            'defaultValue',
            'placeholders',
            'operation',
            'transitionName',
            'maskTransitionName',
            'close'
        ];
        options.transitionName = options.transitionName + "-enter " + options.transitionName + "-enter-active";
        options.maskTransitionName = options.maskTransitionName + "-enter " + options.maskTransitionName + "-enter-active";
        config = Object.assign(options, config, {
            close: function () {
                if (config.maskClosable || config.closable) {
                    Modal.closeWithAnimation();
                }
            }
        });
        optionalParams.forEach(function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    };
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    Modal._open = /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    function (props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        var subject;
        Modal.compRef = Modal.appRef.bootstrap(factory);
        Modal.instance = Modal.compRef.instance;
        subject = Modal.instance.subject;
        Object.assign(Modal.instance, props);
        return subject;
    };
    /**
     * @return {?}
     */
    Modal.closeWithAnimation = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = new BaseOptions();
        Modal.instance.transitionName = options.transitionName + "-leave " + options.transitionName + "-leave-active";
        Modal.instance.maskTransitionName = options.maskTransitionName + "-leave " + options.maskTransitionName + "-leave-active";
        setTimeout(function () {
            Modal.close();
        }, 200);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    Modal.open = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var options = new ModalOptions();
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, Modal._modalCompFactory);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    Modal.alert = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, actions, platform) {
        /** @type {?} */
        var options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.platform = 'ios';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    Modal.prompt = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, callbackOrActions, type, defaultValue, placeholders, platform) {
        var _this = this;
        /** @type {?} */
        var options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.className = 'am-modal-alert-content';
        options.defaultValue = defaultValue;
        options.placeholders = placeholders;
        (options.type = type ? type : 'default'), (options.platform = platform ? platform : 'ios');
        /**
         * @param {?} self
         * @param {?} func
         * @return {?}
         */
        function getArgs(self, func) {
            /** @type {?} */
            var text = self.instance.data.text || defaultValue || '';
            /** @type {?} */
            var password = self.instance.data.password || '';
            if (type === 'login-password') {
                return func(text, password);
            }
            else if (type === 'secure-text') {
                return func(password || defaultValue);
            }
            return func(text);
        }
        /** @type {?} */
        var actions;
        if (typeof callbackOrActions === 'function') {
            actions = [
                { text: '取消' },
                {
                    text: '确定',
                    onPress: function () {
                        getArgs(_this, callbackOrActions);
                    }
                }
            ];
        }
        else {
            actions = callbackOrActions.map(function (item) {
                return {
                    text: item.text,
                    onPress: function () {
                        if (item.onPress) {
                            return getArgs(_this, item.onPress);
                        }
                    }
                };
            });
        }
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            type: type ? type : 'default',
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    Modal.operation = /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (actions, platform) {
        /** @type {?} */
        var options = new BaseOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.operation = true;
        options.className = 'am-modal-operation';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @return {?}
     */
    Modal.close = /**
     * @return {?}
     */
    function () {
        if (Modal.compRef) {
            Modal.compRef.destroy();
            Modal.compRef = null;
        }
    };
    Modal.compRef = null;
    Modal._modalCompFactory = null;
    Modal.appRef = null;
    Modal.instance = null;
    Modal.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Modal.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: Compiler },
        { type: ComponentFactoryResolver }
    ]; };
    return Modal;
}());
/**
 * @param {?} actions
 * @return {?}
 */
function getFooter(actions) {
    return actions.map(function (button) {
        /** @type {?} */
        var orginPress = button.onPress || function () { };
        button.onPress = function () {
            /** @type {?} */
            var res = orginPress();
            if (res && res.then) {
                res.then(function () {
                    Modal.closeWithAnimation();
                });
            }
            else {
                Modal.closeWithAnimation();
            }
        };
        return button;
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ActionSheetOptions = /** @class */ (function () {
    function ActionSheetOptions() {
        this.transitionName = 'am-slide-up';
        this.maskTransitionName = 'am-fade';
    }
    ActionSheetOptions.decorators = [
        { type: Injectable }
    ];
    return ActionSheetOptions;
}());
var ShareActionSheetWithOptions = /** @class */ (function (_super) {
    __extends(ShareActionSheetWithOptions, _super);
    function ShareActionSheetWithOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShareActionSheetWithOptions.decorators = [
        { type: Injectable }
    ];
    return ShareActionSheetWithOptions;
}(ActionSheetOptions));
var ActionSheetWithOptions = /** @class */ (function (_super) {
    __extends(ActionSheetWithOptions, _super);
    function ActionSheetWithOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionSheetWithOptions.decorators = [
        { type: Injectable }
    ];
    return ActionSheetWithOptions;
}(ActionSheetOptions));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var NORMAL = 'NORMAL';
/** @type {?} */
var SHARE = 'SHARE';
/**
 * @return {?}
 */
function noop() { }
var ActionSheet = /** @class */ (function () {
    function ActionSheet(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        ActionSheet.appRef = this._appRef;
        ActionSheet._actionSheetCompFactory = this._cfr.resolveComponentFactory(ActionSheetComponent);
    }
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    ActionSheet._initConfig = /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    function (config, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var props = new ActionSheetOptions();
        /** @type {?} */
        var optionalParams = [
            'prefixCls',
            'maskClosable',
            'cancelButtonIndex',
            'destructiveButtonIndex',
            'title',
            'message',
            'className',
            'transitionName',
            'maskTransitionName',
            'options'
        ];
        config = Object.assign(options, config);
        optionalParams.forEach(function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    };
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    ActionSheet._open = /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    function (props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        var subject;
        ActionSheet.compRef = ActionSheet.appRef.bootstrap(factory);
        ActionSheet.instance = ActionSheet.compRef.instance;
        subject = ActionSheet.instance.subject;
        Object.assign(ActionSheet.instance, props);
        return subject;
    };
    /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    ActionSheet.createActionSheet = /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    function (flag, config, callback) {
        /** @type {?} */
        var options = new ActionSheetOptions();
        /** @type {?} */
        var transitionName = config.transitionName ? config.transitionName : options.transitionName;
        options.transitionName = transitionName + "-enter " + transitionName + "-enter-active";
        /** @type {?} */
        var maskTransitionName = config.maskTransitionName ? config.maskTransitionName : options.maskTransitionName;
        options.maskTransitionName = maskTransitionName + "-enter " + maskTransitionName + "-enter-active";
        /** @type {?} */
        var props = ActionSheet._initConfig(config, options);
        Object.assign(props, { onPress: cb }, { flag: flag });
        /**
         * @param {?} index
         * @param {?=} rowIndex
         * @param {?=} event
         * @return {?}
         */
        function cb(index, rowIndex, event) {
            if (rowIndex === void 0) { rowIndex = 0; }
            event.stopPropagation();
            /** @type {?} */
            var res = callback(index, rowIndex);
            if (res && res.then) {
                res.then(function () {
                    ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
                });
            }
            else {
                ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
            }
        }
        return ActionSheet._open(props, ActionSheet._actionSheetCompFactory);
    };
    /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    ActionSheet.closeWithAnimation = /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    function (transitionName, maskTransitionName) {
        ActionSheet.instance.transitionName = transitionName + "-leave " + transitionName + "-leave-active";
        ActionSheet.instance.maskTransitionName = maskTransitionName + "-leave " + maskTransitionName + "-leave-active";
        setTimeout(function () {
            ActionSheet.close();
        }, 200);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheet.showActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheet.createActionSheet(NORMAL, config, callback);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheet.showShareActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheet.createActionSheet(SHARE, config, callback);
    };
    /**
     * @return {?}
     */
    ActionSheet.close = /**
     * @return {?}
     */
    function () {
        if (ActionSheet.compRef) {
            ActionSheet.compRef.destroy();
            ActionSheet.compRef = null;
        }
    };
    ActionSheet.compRef = null;
    ActionSheet._actionSheetCompFactory = null;
    ActionSheet.appRef = null;
    ActionSheet.instance = null;
    ActionSheet.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActionSheet.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver }
    ]; };
    return ActionSheet;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Picker$5 = /** @class */ (function (_super) {
    __extends(Picker, _super);
    function Picker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    Picker.showPicker = /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    function (config, confirmCallback, cancelCallback) {
        var _this = this;
        if (config === void 0) { config = Picker.defaultOptions; }
        /** @type {?} */
        var options = new PickerOptions();
        Object.assign(options, config, {
            hidePicker: function (event) {
                _this.hidePicker();
            },
            confirm: function (event) {
                if (confirmCallback) {
                    confirmCallback(event);
                }
            },
            cancel: function () {
                if (cancelCallback) {
                    cancelCallback();
                }
            }
        });
        /** @type {?} */
        var optionalParams = [
            'data',
            'value',
            'cols',
            'mask',
            'title',
            'okText',
            'dismissText',
            'disabled',
            'cascade',
            'onOk',
            'onPickerChange',
            'indicatorStyle'
        ];
        optionalParams.forEach(function (param) {
            if (typeof _this[param] !== 'undefined') {
                (/** @type {?} */ (options))[param] = _this[param];
            }
        });
        /** @type {?} */
        var childInjector = Injector.create([
            {
                provide: PickerOptions,
                useValue: options
            }
        ]);
        Picker.showPopup(PickerComponent, childInjector);
    };
    /**
     * @return {?}
     */
    Picker.hidePicker = /**
     * @return {?}
     */
    function () {
        Picker.hidePopup();
    };
    Picker.defaultOptions = new PickerOptions();
    Picker.decorators = [
        { type: Injectable }
    ];
    return Picker;
}(PopupService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgZorroAntdMobileModule = /** @class */ (function () {
    function NgZorroAntdMobileModule() {
    }
    /**
     * @return {?}
     */
    NgZorroAntdMobileModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgZorroAntdMobileModule,
            providers: [ActionSheet, Toast, Modal, Picker$5]
        };
    };
    NgZorroAntdMobileModule.decorators = [
        { type: NgModule, args: [{
                    providers: [],
                    exports: [
                        ActivityIndicatorModule,
                        CardModule,
                        TabsModule,
                        TabBarModule,
                        ButtonModule,
                        SwitchModule,
                        SearchBarModule,
                        StepperModule,
                        StepsModule,
                        CheckboxModule,
                        ProgressModule,
                        SegmentedControlModule,
                        BadgeModule,
                        CarouselModule,
                        ActionSheetModule,
                        AccordionModule,
                        NoticeBarModule,
                        IconModule,
                        ToastModule,
                        RadioModule,
                        ModalModule,
                        PopoverModule,
                        PopoverItemModule,
                        NavBarModule,
                        ListModule,
                        CalendarModule,
                        InputItemModule,
                        FlexModule,
                        GridModule,
                        RangeModule,
                        SliderModule,
                        TextareaItemModule,
                        NgZorroAntdMobilePipesModule,
                        PickerModule,
                        PickerViewModule,
                        ImagePickerModule,
                        ResultModule,
                        WhiteSpaceModule,
                        WingBlankModule,
                        LocaleProviderModule,
                        NgZorroAntdMobilePipesModule,
                        PaginationModule,
                        TagModule,
                        MenuModule,
                        DatePickerModule,
                        DatePickerViewModule,
                        DrawerModule,
                        PullToRefreshModule,
                        SwipeActionModule
                    ]
                },] }
    ];
    return NgZorroAntdMobileModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ActivityIndicatorModule, CardModule, ResultModule, WhiteSpaceModule, WingBlankModule, TabsModule, TabBarModule, BadgeModule, InputItemModule, ButtonModule, SwitchModule, SearchBarModule, StepperModule, StepsModule, CalendarModule, CarouselModule, CheckboxModule, RadioModule, ProgressModule, AccordionModule, NoticeBarModule, IconModule, ToastModule, ModalModule, PopoverModule, NavBarModule, ListModule, PopoverItemModule, FlexModule, GridModule, ActionSheetModule, SegmentedControlModule, TextareaItemModule, NgZorroAntdMobilePipesModule, RangeModule, SliderModule, PaginationModule, TagModule, MenuModule, PickerModule, PickerViewModule, ImagePickerModule, DatePickerModule, DatePickerViewModule, DrawerModule, SwipeActionModule, PullToRefreshModule, LocaleProviderModule, LocaleProviderService, LOCAL_PROVIDER_TOKEN, LocaleProviderPipe, Toast, ToastComponent, Modal, ModalComponent, ActionSheet, ActionSheetComponent, Picker$5 as Picker, PickerComponent, NgZorroAntdMobileModule, en_US, ru_RU, sv_SE, zh_CN, da_DK, AccordionGroupComponent as ɵbq, AccordionComponent as ɵbo, AccordionService as ɵbp, ActivityIndicator as ɵe, Badge as ɵl, Button as ɵo, NZ_BUTTON_DIRECTIVES as ɵb, CalendarComponent as ɵck, ConfirmPanelComponent as ɵcp, DatePickerComponent as ɵcm, HeaderComponent as ɵcl, ShortcutPanelComponent as ɵcr, SingleMonthComponent as ɵco, TimePickerComponent as ɵcq, WeekPanelComponent as ɵcn, CardBody as ɵh, CardFooter as ɵi, CardHeader as ɵg, Card as ɵf, CarouselSlideComponent as ɵbh, CarouselComponent as ɵbg, DotIndicatorComponent as ɵbi, AgreeItem as ɵbd, CheckboxItem as ɵbc, Checkbox as ɵbb, CoreModule as ɵbk, TouchFeedBackComponent as ɵbn, TouchFeedbackDirective as ɵbm, PopupService as ɵbl, IconHandler as ɵq, DatePickerViewComponent as ɵcj, DatePickerOptions as ɵch, DatePickerComponent$1 as ɵcg, DatePickerDirective as ɵci, DrawerComponent as ɵdl, FlexComponent as ɵcs, FlexItemComponent as ɵct, GridComponent as ɵcu, IconComponent as ɵp, ImagePicker as ɵdf, CustomInput as ɵbw, CustomInputService as ɵbx, CustomKeyboard as ɵbv, InputItem as ɵbu, Brief as ɵv, ListItem as ɵu, List as ɵt, LOCALE_PROVIDER_SERVICE_FACTORY as ɵc, LOCALE_PROVIDER_SERVICE_PROVIDER as ɵd, MenuComponent as ɵdj, SubMenuComponent as ɵdk, BaseOptions as ɵby, ModalOptions as ɵbz, NavBarComponent as ɵcf, NoticeBarComponent as ɵbr, PaginationComponent as ɵdh, PickerViewComponent as ɵde, PickerOptions as ɵdc, PickerDirective as ɵdd, SafeHTMLPipe as ɵbj, PopoverComponentOptions as ɵcd, PopoverItemComponent as ɵce, PopoverOptions as ɵcb, PopoverComponent as ɵcc, PopoverDirective as ɵca, ProgressComponent as ɵbe, PullToRefreshComponent as ɵdm, RadioItem as ɵbt, Radio as ɵbs, Range as ɵcv, Result as ɵdg, SearchBar$1 as ɵx, SegmentedControlComponent as ɵbf, SliderHandle as ɵcx, SliderMarks as ɵcy, SliderSteps as ɵcz, SliderTrack as ɵda, Slider as ɵcw, Stepper as ɵy, Step as ɵba, Steps as ɵz, SwipeAction as ɵdn, Switch as ɵw, TabBarTab as ɵn, TabBar as ɵm, DefaultTabBarComponent as ɵk, TabPane as ɵa, Tabs as ɵj, TagComponent as ɵdi, TextareaItem as ɵdb, WhiteSpace as ɵs, WingBlank as ɵr };

//# sourceMappingURL=ng-zorro-antd-mobile.js.map