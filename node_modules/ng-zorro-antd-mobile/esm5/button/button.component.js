/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, Output, ElementRef, HostListener, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
var Button = /** @class */ (function () {
    function Button(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.prefixCls = 'am-button';
        this.ngTemplate = false;
        this._className = '';
        this._classList = [];
        this._size = 'large';
        this._loading = false;
        this._active = false;
        this._inline = false;
        this._disabled = false;
        this._icon = '';
        this._userAgent = (/** @type {?} */ (navigator)).userAgent || (/** @type {?} */ (navigator)).vendor || (/** @type {?} */ (window)).opera;
        this.onClick = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, this.prefixCls);
        this._className = this._el.className;
    }
    Object.defineProperty(Button.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = value;
            if (value) {
                if (this._el.querySelector('icon')) {
                    this._el.querySelector('icon').parentNode.removeChild(this._el.querySelector('icon'));
                }
            }
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "inline", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inline;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inline = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.ngTemplate = true;
                this._icon = value;
            }
            else {
                this.ngTemplate = false;
                this._icon = /** @type {?} */ (value);
                this.setClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._className = this._className + ' ' + v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.touchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = true;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.touchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this._active = false;
        this.setClassMap();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Button.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._disabled) {
            return;
        }
        this.onClick.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Button.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    /**
     * @return {?}
     */
    Button.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._el.querySelector('img')) {
            /** @type {?} */
            var amSize = this._size === 'small' ? 'am-icon-xxs' : 'am-icon-md';
            this._el.querySelector('img').setAttribute('class', "am-icon " + this.prefixCls + "-icon " + amSize);
            this._render.addClass(this._el, this.prefixCls + "-icon");
        }
    };
    /**
     * @return {?}
     */
    Button.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        this.iconType = this._loading ? 'loading' : this._icon;
        this._classList = [
            this._type && this.prefixCls + "-" + this._type,
            this._size === 'small' && this.prefixCls + "-" + this._size,
            this._disabled && this.prefixCls + "-disabled",
            this._loading && this.prefixCls + "-loading",
            this.iconType && this.prefixCls + "-icon",
            this._active && this.prefixCls + "-active",
            this._inline && this.prefixCls + "-inline"
        ].filter(function (item) {
            return !!item;
        });
        this._el.className = this._className + ' ' + this._classList.join(' ');
    };
    Button.decorators = [
        { type: Component, args: [{
                    selector: '[Button], nzm-button',
                    encapsulation: ViewEncapsulation.None,
                    template: "<Icon *ngIf=\"!ngTemplate\"\n      class=\"{{prefixCls}}-icon\"\n      [type]=\"iconType\"\n      [size]=\"size ==='small' ? 'xxs' : 'md'\"\n></Icon>\n<ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"icon\"></ng-template>\n<ng-content select=\"img\"></ng-content>\n<div class=\"{{prefixCls}}-content\">\n  <span>\n    <ng-content></ng-content>\n  </span>\n</div>"
                }] }
    ];
    /** @nocollapse */
    Button.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Button.propDecorators = {
        type: [{ type: Input }],
        size: [{ type: Input }],
        disabled: [{ type: Input }],
        loading: [{ type: Input }],
        inline: [{ type: Input }],
        icon: [{ type: Input }],
        className: [{ type: Input }],
        onClick: [{ type: Output }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }, { type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return Button;
}());
export { Button };
if (false) {
    /** @type {?} */
    Button.prototype.prefixCls;
    /** @type {?} */
    Button.prototype.ngTemplate;
    /** @type {?} */
    Button.prototype.iconType;
    /** @type {?} */
    Button.prototype._el;
    /** @type {?} */
    Button.prototype._className;
    /** @type {?} */
    Button.prototype._classList;
    /** @type {?} */
    Button.prototype._type;
    /** @type {?} */
    Button.prototype._size;
    /** @type {?} */
    Button.prototype._loading;
    /** @type {?} */
    Button.prototype._active;
    /** @type {?} */
    Button.prototype._inline;
    /** @type {?} */
    Button.prototype._disabled;
    /** @type {?} */
    Button.prototype._icon;
    /** @type {?} */
    Button.prototype._userAgent;
    /** @type {?} */
    Button.prototype.onClick;
    /** @type {?} */
    Button.prototype._elementRef;
    /** @type {?} */
    Button.prototype._render;
}

//# sourceMappingURL=data:application/json;base64,