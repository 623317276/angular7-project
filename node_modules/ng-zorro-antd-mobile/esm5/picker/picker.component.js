/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewEncapsulation, ViewChild, ViewContainerRef, HostListener, EventEmitter, Output } from '@angular/core';
import { PickerOptions } from './picker-options.provider';
import * as data from './demo-data/address-data';
import * as velocity from '../core/util/velocity';
import * as touchEvent from '../core/util/touch-event';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var PickerComponent = /** @class */ (function () {
    function PickerComponent(elementRef, options, _localeProviderService) {
        this.elementRef = elementRef;
        this.options = options;
        this._localeProviderService = _localeProviderService;
        this.transitionName = 'am-slide-up-enter am-slide-up-enter-active';
        this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
        this.address = data.getData();
        this.startY = 0;
        this.differY = 0;
        this.currentY = 0;
        this.len = 0;
        this.dom = null;
        this.index = 0;
        this.maxY = 0;
        this.lineHeight = 34;
        this.data = [];
        this.selectedTarget = [];
        this.isMouseDown = false;
        this.Velocity = velocity.getVelocity();
        this._unsubscribe$ = new Subject();
        this.onChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask')) {
            return;
        }
        this.isMouseDown = true;
        event.preventDefault();
        this.dom = touchEvent.getEventTarget(event).target.parentElement.children[2];
        this.len = this.dom.children.length;
        this.maxY = -(this.len - 1);
        if (this.dom.style.transform === 'translateY(0px)') {
            this.currentY = 0;
            this.maxY = -(this.len - 1);
        }
        else if (this.selectedTarget.length > 0) {
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    _this.currentY = item.currentY;
                }
            });
        }
        this.startY = touchEvent.getEventTarget(event).clientY;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        event.preventDefault();
        /** @type {?} */
        var ev = touchEvent.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        this.Velocity.record(this.differY);
        this.dom.style.transition = 'transform 0s';
        this.dom.style.transform = "translateY(" + (this.currentY * this.lineHeight + this.differY) + "px)";
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerComponent.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown) {
            return;
        }
        this.isMouseDown = false;
        event.preventDefault();
        /** @type {?} */
        var ev = touchEvent.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        /** @type {?} */
        var time = 0.3;
        /** @type {?} */
        var velocityTemp = this.Velocity.getVelocity(this.differY) * 4;
        if (velocity) {
            this.differY = velocityTemp * 40 + this.differY;
            time = Math.abs(velocityTemp) * 0.1;
        }
        this.dom.style.transition = 'transform ' + (time < 0.3 ? 0.3 : time) + 's';
        if (this.differY <= -this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY <= this.maxY) {
                this.currentY = this.maxY;
            }
        }
        else if (this.differY >= this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY >= 0) {
                this.currentY = 0;
            }
        }
        if (this.selectedTarget.length > 0) {
            /** @type {?} */
            var hasKey_1 = false;
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    hasKey_1 = true;
                    item.targetId = event.target.id;
                    item.currentY = _this.currentY;
                }
                else if (parseInt(item.targetId, 0) > parseInt(event.target.id, 0) && _this.options.cascade) {
                    item.currentY = 0;
                }
            });
            if (!hasKey_1) {
                this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
            }
        }
        else {
            this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
        }
        this.dom.style.transform = "translateY(" + this.currentY * this.lineHeight + "px)";
        this.index = Math.floor(Math.abs(this.currentY / 1));
        this.setCurrentSelected(parseInt(event.target.id, 0), this.index);
        this.onChange.emit(this.combineReslut());
        this.options.onPickerChange.emit(this.combineReslut());
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        if (this.options.data.length > 0) {
            this.address = this.options.data;
        }
        if (this.data.length > 0) {
            this.selectedTarget = [];
            this.data = [];
        }
        this.data.push(this.generateArrayData(this.address));
        if (this.options.value.length > 0) {
            this.getInitValueIndex(this.data);
        }
        else {
            this.checkArrayDeep(this.address[0]);
            for (var index = 0; index < this.data.length; index++) {
                this.selectedTarget.push({ targetId: "" + index, currentY: 0 });
            }
        }
    };
    /**
     * @param {?} dataTemp
     * @return {?}
     */
    PickerComponent.prototype.getInitValueIndex = /**
     * @param {?} dataTemp
     * @return {?}
     */
    function (dataTemp) {
        var _this = this;
        this.selectedTarget = [];
        this.options.value.forEach(function (element, i) {
            dataTemp.forEach(function (item, j) {
                item.forEach(function (item1, k) {
                    if (element === (item1.label || item1) && i === j) {
                        _this.checkArrayDeep(_this.data[i][k], false);
                        _this.selectedTarget.push({ targetId: "" + i, currentY: -k });
                    }
                });
            });
        });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.reloadPicker = /**
     * @return {?}
     */
    function () {
        if (!this._picker || this._picker === undefined) {
            return;
        }
        this.currentPicker = this._picker.element.nativeElement;
        if (this.currentPicker && this.currentPicker.children.length > 0) {
            /** @type {?} */
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    /** @type {?} */
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    /**
     * @param {?} targetArr
     * @return {?}
     */
    PickerComponent.prototype.generateArrayData = /**
     * @param {?} targetArr
     * @return {?}
     */
    function (targetArr) {
        /** @type {?} */
        var tempArr = [];
        if (targetArr instanceof Array) {
            targetArr.forEach(function (item, i) {
                if (item instanceof Array) {
                    /** @type {?} */
                    var keys = Object.keys(item);
                    /** @type {?} */
                    var element_1 = {};
                    keys.forEach(function (key) {
                        element_1[key] = targetArr[i][key] || targetArr[i];
                    });
                    tempArr.push(element_1);
                }
                else {
                    tempArr.push(item);
                }
            });
            return tempArr;
        }
        return [];
    };
    /**
     * @param {?} parent
     * @param {?=} init
     * @return {?}
     */
    PickerComponent.prototype.checkArrayDeep = /**
     * @param {?} parent
     * @param {?=} init
     * @return {?}
     */
    function (parent, init) {
        if (init === void 0) { init = true; }
        if (parent instanceof Object && parent.children && parent.children.length > 0) {
            if (this.generateArrayData(parent.children).length > 0 && this.data.length < this.options.cols) {
                this.data.push(this.generateArrayData(parent.children));
                if (init) {
                    this.checkArrayDeep(parent.children[0]);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        this.options.onOk.emit(this.combineReslut());
        if (this.options.confirm) {
            this.options.confirm(this.combineReslut());
        }
        this.setTransitionName();
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.combineReslut = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = [];
        this.selectedTarget.forEach(function (item) {
            result.push(_this.data[parseInt(item.targetId, 0)][-item.currentY]);
        });
        return result;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.setTransitionName();
        this.options.onDismiss.emit();
        if (this.options.cancel) {
            this.options.cancel();
        }
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.setTransitionName = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transitionName = 'am-slide-up-leave am-slide-up-leave-active';
        this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
        setTimeout(function () {
            _this.options.hidePicker();
        }, 200);
    };
    /**
     * @param {?} target
     * @param {?} index
     * @return {?}
     */
    PickerComponent.prototype.setCurrentSelected = /**
     * @param {?} target
     * @param {?} index
     * @return {?}
     */
    function (target, index) {
        var _this = this;
        if (!this.options.cascade) {
            return;
        }
        /** @type {?} */
        var a = this.data.slice(0, target + 1);
        this.data = a;
        this.checkArrayDeep(this.data[target][index]);
        setTimeout(function () {
            _this.data.forEach(function (item, i) {
                if (target !== "" + i && i > target) {
                    _this._picker.element.nativeElement.children[i].children[2].style.transition = 'transform .3s';
                    _this._picker.element.nativeElement.children[i].children[2].style.transform = 'translateY(0px)';
                }
            });
        }, 0);
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.init();
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            /** @type {?} */
            var locale = _this._localeProviderService.getLocaleSubObj('Picker');
            _this.options.okText = locale.okText;
            _this.options.dismissText = locale.dismissText;
        });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.reloadPicker();
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    PickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Picker',
                    template: "<div *ngIf=\"options.mask\" class=\"am-picker-popup-mask {{maskTransitionName}}\" (click)=\"cancel()\"></div>\n<div class=\"am-picker-popup {{transitionName}}\" style=\"z-index: 1001\">\n  <div class=\"am-picker-popup-content\">\n    <div class=\"am-picker-popup-body\">\n      <div>\n        <div class=\"am-picker-popup-header\">\n          <div class=\"am-picker-popup-item am-picker-popup-header-left\" (click)=\"cancel()\">{{options.dismissText}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-title\">{{options.title}}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-header-right\" (click)=\"ok()\">{{options.okText}}</div>\n        </div>\n        <div class=\"am-picker\" style=\"flex-direction: row; align-items: center;\" #picker>\n          <div *ngFor=\"let item of data; let i = index\" class=\"am-picker-col\">\n            <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"options.indicatorStyle\"></div>\n            <div class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\" id={{i}}></div>\n            <div class=\"am-picker-col-content\">\n              <div *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\" id={{i}}>{{val.label?val.label:val}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: PickerOptions },
        { type: LocaleProviderService }
    ]; };
    PickerComponent.propDecorators = {
        _picker: [{ type: ViewChild, args: ['picker', { read: ViewContainerRef },] }],
        onChange: [{ type: Output }],
        panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }]
    };
    return PickerComponent;
}());
export { PickerComponent };
if (false) {
    /** @type {?} */
    PickerComponent.prototype.transitionName;
    /** @type {?} */
    PickerComponent.prototype.maskTransitionName;
    /** @type {?} */
    PickerComponent.prototype.address;
    /** @type {?} */
    PickerComponent.prototype.startY;
    /** @type {?} */
    PickerComponent.prototype.differY;
    /** @type {?} */
    PickerComponent.prototype.currentY;
    /** @type {?} */
    PickerComponent.prototype.len;
    /** @type {?} */
    PickerComponent.prototype.dom;
    /** @type {?} */
    PickerComponent.prototype.index;
    /** @type {?} */
    PickerComponent.prototype.maxY;
    /** @type {?} */
    PickerComponent.prototype.lineHeight;
    /** @type {?} */
    PickerComponent.prototype.data;
    /** @type {?} */
    PickerComponent.prototype.selectedTarget;
    /** @type {?} */
    PickerComponent.prototype.isMouseDown;
    /** @type {?} */
    PickerComponent.prototype.Velocity;
    /** @type {?} */
    PickerComponent.prototype.currentPicker;
    /** @type {?} */
    PickerComponent.prototype._unsubscribe$;
    /** @type {?} */
    PickerComponent.prototype._picker;
    /** @type {?} */
    PickerComponent.prototype.onChange;
    /** @type {?} */
    PickerComponent.prototype.elementRef;
    /** @type {?} */
    PickerComponent.prototype.options;
    /** @type {?} */
    PickerComponent.prototype._localeProviderService;
}

//# sourceMappingURL=data:application/json;base64,