/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { PopupService } from '../core/core.module';
var Picker = /** @class */ (function (_super) {
    tslib_1.__extends(Picker, _super);
    function Picker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    Picker.showPicker = /**
     * @param {?=} config
     * @param {?=} confirmCallback
     * @param {?=} cancelCallback
     * @return {?}
     */
    function (config, confirmCallback, cancelCallback) {
        var _this = this;
        if (config === void 0) { config = Picker.defaultOptions; }
        /** @type {?} */
        var options = new PickerOptions();
        Object.assign(options, config, {
            hidePicker: function (event) {
                _this.hidePicker();
            },
            confirm: function (event) {
                if (confirmCallback) {
                    confirmCallback(event);
                }
            },
            cancel: function () {
                if (cancelCallback) {
                    cancelCallback();
                }
            }
        });
        /** @type {?} */
        var optionalParams = [
            'data',
            'value',
            'cols',
            'mask',
            'title',
            'okText',
            'dismissText',
            'disabled',
            'cascade',
            'onOk',
            'onPickerChange',
            'indicatorStyle'
        ];
        optionalParams.forEach(function (param) {
            if (typeof _this[param] !== 'undefined') {
                (/** @type {?} */ (options))[param] = _this[param];
            }
        });
        /** @type {?} */
        var childInjector = Injector.create([
            {
                provide: PickerOptions,
                useValue: options
            }
        ]);
        Picker.showPopup(PickerComponent, childInjector);
    };
    /**
     * @return {?}
     */
    Picker.hidePicker = /**
     * @return {?}
     */
    function () {
        Picker.hidePopup();
    };
    Picker.defaultOptions = new PickerOptions();
    Picker.decorators = [
        { type: Injectable }
    ];
    return Picker;
}(PopupService));
export { Picker };
if (false) {
    /** @type {?} */
    Picker.defaultOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInBpY2tlci9waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7SUFFdkIsa0NBQVk7Ozs7Ozs7Ozs7SUFHL0IsaUJBQVU7Ozs7OztJQUFqQixVQUNFLE1BQTZDLEVBQzdDLGVBQWdDLEVBQ2hDLGNBQStCO1FBSGpDLGlCQWdEQztRQS9DQyx1QkFBQSxFQUFBLFNBQXdCLE1BQU0sQ0FBQyxjQUFjOztRQUk3QyxJQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtZQUM3QixVQUFVLEVBQUUsVUFBQyxLQUFLO2dCQUNoQixLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDbkI7WUFDRCxPQUFPLEVBQUUsVUFBQyxLQUFLO2dCQUNiLElBQUksZUFBZSxFQUFFO29CQUNuQixlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0Y7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxjQUFjLEVBQUU7b0JBQ2xCLGNBQWMsRUFBRSxDQUFDO2lCQUNsQjthQUNGO1NBQ0YsQ0FBQyxDQUFDOztRQUVILElBQU0sY0FBYyxHQUFlO1lBQ2pDLE1BQU07WUFDTixPQUFPO1lBQ1AsTUFBTTtZQUNOLE1BQU07WUFDTixPQUFPO1lBQ1AsUUFBUTtZQUNSLGFBQWE7WUFDYixVQUFVO1lBQ1YsU0FBUztZQUNULE1BQU07WUFDTixnQkFBZ0I7WUFDaEIsZ0JBQWdCO1NBQ2pCLENBQUM7UUFDRixjQUFjLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUMxQixJQUFJLE9BQU8sS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsRUFBRTtnQkFDdEMsbUJBQUMsT0FBYyxFQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0YsQ0FBQyxDQUFDOztRQUNILElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDcEM7Z0JBQ0UsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFFBQVEsRUFBRSxPQUFPO2FBQ2xCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDbEQ7Ozs7SUFFTSxpQkFBVTs7O0lBQWpCO1FBQ0UsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ3BCOzRCQXREc0MsSUFBSSxhQUFhLEVBQUU7O2dCQUYzRCxVQUFVOztpQkFKWDtFQUs0QixZQUFZO1NBQTNCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFBpY2tlckNhbGxCYWNrLCBQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9waWNrZXItb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyBQb3B1cFNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL2NvcmUubW9kdWxlJztcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQaWNrZXIgZXh0ZW5kcyBQb3B1cFNlcnZpY2Uge1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnM6IFBpY2tlck9wdGlvbnMgPSBuZXcgUGlja2VyT3B0aW9ucygpO1xuXG4gIHN0YXRpYyBzaG93UGlja2VyKFxuICAgIGNvbmZpZzogUGlja2VyT3B0aW9ucyA9IFBpY2tlci5kZWZhdWx0T3B0aW9ucyxcbiAgICBjb25maXJtQ2FsbGJhY2s/OiBQaWNrZXJDYWxsQmFjayxcbiAgICBjYW5jZWxDYWxsYmFjaz86IFBpY2tlckNhbGxCYWNrXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBuZXcgUGlja2VyT3B0aW9ucygpO1xuICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgY29uZmlnLCB7XG4gICAgICBoaWRlUGlja2VyOiAoZXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5oaWRlUGlja2VyKCk7XG4gICAgICB9LFxuICAgICAgY29uZmlybTogKGV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChjb25maXJtQ2FsbGJhY2spIHtcbiAgICAgICAgICBjb25maXJtQ2FsbGJhY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2FuY2VsOiAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChjYW5jZWxDYWxsYmFjaykge1xuICAgICAgICAgIGNhbmNlbENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG9wdGlvbmFsUGFyYW1zOiBBcnJheTxhbnk+ID0gW1xuICAgICAgJ2RhdGEnLFxuICAgICAgJ3ZhbHVlJyxcbiAgICAgICdjb2xzJyxcbiAgICAgICdtYXNrJyxcbiAgICAgICd0aXRsZScsXG4gICAgICAnb2tUZXh0JyxcbiAgICAgICdkaXNtaXNzVGV4dCcsXG4gICAgICAnZGlzYWJsZWQnLFxuICAgICAgJ2Nhc2NhZGUnLFxuICAgICAgJ29uT2snLFxuICAgICAgJ29uUGlja2VyQ2hhbmdlJyxcbiAgICAgICdpbmRpY2F0b3JTdHlsZSdcbiAgICBdO1xuICAgIG9wdGlvbmFsUGFyYW1zLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzW3BhcmFtXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgKG9wdGlvbnMgYXMgYW55KVtwYXJhbV0gPSB0aGlzW3BhcmFtXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBjaGlsZEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKFtcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogUGlja2VyT3B0aW9ucyxcbiAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgIH1cbiAgICBdKTtcbiAgICBQaWNrZXIuc2hvd1BvcHVwKFBpY2tlckNvbXBvbmVudCwgY2hpbGRJbmplY3Rvcik7XG4gIH1cblxuICBzdGF0aWMgaGlkZVBpY2tlcigpOiB2b2lkIHtcbiAgICBQaWNrZXIuaGlkZVBvcHVwKCk7XG4gIH1cbn1cbiJdfQ==