/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChildren, HostBinding, Input, Output, HostListener, QueryList, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';
import { CarouselSlideComponent } from './carousel-slide/carousel-slide.component';
import * as touchEvent from '../core/util/touch-event';
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent(_ele) {
        this._ele = _ele;
        this.style = {
            height: 'auto',
            width: '100%',
            transform: 'translate3d(0px, 0px, 0px)',
            margin: ''
        };
        this._nodeArr = [];
        this._lastIndex = 0;
        this._isMouseDown = false;
        this._rationWidth = 0;
        this._currentSlideWidth = 0;
        this._currentSlideHeight = 0;
        this._transition = '';
        this._spaceWidth = 0;
        this.speed = 500;
        this.selectedIndex = 0;
        this.dots = true;
        this.vertical = false;
        this.autoplay = false;
        this.autoplayInterval = 3000;
        this.infinite = false;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.frameOverflow = 'hidden';
        this.cellSpacing = 0;
        this.slideWidth = 1;
        this.swipeSpeed = 12;
        this.dragging = true;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.carouselWrapper = true;
        this.carouselwrap = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panstart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.dragging) {
            return;
        }
        this.stopTimer();
        this._isMouseDown = true;
        this.touchObject = {
            startX: touchEvent.getEventTarget(event).pageX,
            startY: touchEvent.getEventTarget(event).pageY,
            direction: this.touchObject.direction
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panmove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        var direction = this.swipeDirection(this.touchObject.startX, touchEvent.getEventTarget(event).pageX, this.touchObject.startY, touchEvent.getEventTarget(event).pageY).direction;
        if (direction !== 0) {
            event.preventDefault();
        }
        /** @type {?} */
        var length = this.vertical
            ? Math.abs(touchEvent.getEventTarget(event).pageY - this.touchObject.startY)
            : Math.abs(touchEvent.getEventTarget(event).pageX - this.touchObject.startX);
        /** @type {?} */
        var offset = -this.touchObject.direction * length - this.selectedIndex * this._rationWidth;
        this.touchObject = {
            startX: this.touchObject.startX,
            startY: this.touchObject.startY,
            endX: touchEvent.getEventTarget(event).pageX,
            endY: touchEvent.getEventTarget(event).pageY,
            length: length,
            direction: direction,
            offset: offset
        };
        if (direction !== 0) {
            this.setSlideStyles(this.selectedIndex, this.touchObject.direction);
        }
        this.getListStyles(offset);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CarouselComponent.prototype.panend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this.dragging && !this._isMouseDown) {
            return;
        }
        this._isMouseDown = false;
        if (this.touchObject.length > this.swipeSpeed) {
            this.carousel(this.touchObject.direction);
        }
        else {
            this.getListStyles(this.touchObject.direction * this.touchObject.length + this.touchObject.offset);
            this.style['transition'] = this._transition;
        }
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.initCarouselSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nativeElement = this._ele.nativeElement;
        this.slideHeight = nativeElement.querySelector('carouselslide').clientHeight;
        this._currentSlideHeight = this.slideHeight * this.slideWidth;
        this._currentSlideWidth = nativeElement.clientWidth;
        this._rationWidth = this.vertical ? this._currentSlideWidth : this._currentSlideWidth * this.slideWidth;
        this._spaceWidth = ((this.vertical ? this.slideHeight : this._currentSlideWidth) - this._rationWidth) / 2;
    };
    /**
     * @param {?} items
     * @return {?}
     */
    CarouselComponent.prototype.carouselInit = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        this.infinite = this.infinite || true;
        this._nodeArr = items['_results'];
        this.dragging = this.dragging ? this.dragging : false;
        if (this._nodeArr.length > 1) {
            this._lastIndex = this._nodeArr.length - 1;
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    v.width = _this.vertical ? 'auto' : _this._rationWidth - _this.cellSpacing;
                    v.left = _this.vertical ? 0 : index === _this._lastIndex ? -_this._rationWidth : index * _this._rationWidth;
                    v.top = _this.vertical ? (index === _this._lastIndex ? -_this._rationWidth : index * _this._rationWidth) : 0;
                    v.margin = _this.vertical ? _this.cellSpacing / 2 + "px auto" : "auto " + _this.cellSpacing / 2 + "px";
                });
                _this.startTimer();
            }, 0);
        }
        else if (this._nodeArr.length === 1) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v) {
                    v.width = _this._rationWidth - _this.cellSpacing;
                    v.left = 0;
                    v.top = 0;
                    v.margin = "auto " + _this.cellSpacing / 2 + "px";
                });
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.startTimer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.autoplay) {
            return;
        }
        this.stopTimer();
        this._timer = this.autoplayInterval
            ? setInterval(function () {
                _this.carousel(1);
            }, this.autoplayInterval)
            : 0;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        clearInterval(this._timer);
    };
    /**
     * @param {?} moveDirection
     * @return {?}
     */
    CarouselComponent.prototype.carousel = /**
     * @param {?} moveDirection
     * @return {?}
     */
    function (moveDirection) {
        if (this.vertical) {
            if (moveDirection === 1) {
                this.moveUp();
            }
            else if (moveDirection === -1) {
                this.moveDown();
            }
        }
        else {
            if (moveDirection === 1) {
                this.moveLeft();
            }
            else if (moveDirection === -1) {
                this.moveRight();
            }
        }
        this.style['transition'] = this._transition;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveUp = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveLeft = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.moveRight = /**
     * @return {?}
     */
    function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    /**
     * @param {?} pre
     * @return {?}
     */
    CarouselComponent.prototype.getAfterNode = /**
     * @param {?} pre
     * @return {?}
     */
    function (pre) {
        var _this = this;
        /** @type {?} */
        var nextIndex;
        if (pre) {
            if (this.selectedIndex <= 0) {
                this.getListStyles(this._rationWidth);
                setTimeout(function () {
                    _this._nodeArr.forEach(function (v, tempIndex) {
                        if (tempIndex === 0) {
                            v.left = _this.vertical ? 0 : _this._nodeArr.length * _this._rationWidth;
                            v.top = _this.vertical ? _this._nodeArr.length * _this._rationWidth : 0;
                        }
                        else {
                            v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                            v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                        }
                    });
                    _this.getListStyles(-_this._rationWidth * (_this.items.length - 1));
                }, this.speed);
                nextIndex = !this.infinite ? null : this._lastIndex;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex - 1;
            this.getListStyles(nextIndex * this._rationWidth * this.touchObject.direction);
            this._nodeArr.forEach(function (v, tempIndex) {
                if (0 === tempIndex && nextIndex === _this._nodeArr.length - 2) {
                    v.left = 0;
                    v.top = 0;
                }
            });
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
        else {
            if (this.selectedIndex >= this._lastIndex) {
                this.setSlideStyles(this.selectedIndex, 1);
                this.getListStyles(-(this._lastIndex + 1) * this._rationWidth);
                nextIndex = !this.infinite ? null : 0;
                this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.selectedIndex + 1;
            this.setSlideStyles(this.selectedIndex, 1);
            this.getListStyles(-nextIndex * this._rationWidth);
            this.beforeChange.emit({ from: this.selectedIndex, to: nextIndex });
            return nextIndex;
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.caculateDirectionLeftCurrentIndex = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex + 1) % this.items.length;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.caculateDirectionRightCurrentIndex = /**
     * @return {?}
     */
    function () {
        if (this.selectedIndex === 0) {
            this.selectedIndex = this.items.length;
        }
        /** @type {?} */
        var previousIndex = this.selectedIndex;
        this.selectedIndex = (previousIndex - 1) % this.items.length;
    };
    /**
     * @param {?} afterIndex
     * @return {?}
     */
    CarouselComponent.prototype.gotoCarousel = /**
     * @param {?} afterIndex
     * @return {?}
     */
    function (afterIndex) {
        var _this = this;
        if (afterIndex === null) {
            return;
        }
        this.getCurrentIndex();
        if (afterIndex === 0) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    if (index === _this._nodeArr.length - 1) {
                        v.left = _this.vertical ? 0 : -_this._rationWidth;
                        v.top = _this.vertical ? -_this._rationWidth : 0;
                    }
                    else {
                        v.left = _this.vertical ? 0 : index * _this._rationWidth;
                        v.top = _this.vertical ? index * _this._rationWidth : 0;
                    }
                });
                _this.startTimer();
                _this.getListStyles(0);
            }, this.speed);
        }
        this.selectedIndex = afterIndex;
        this.afterChange.emit(this.selectedIndex);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.getCurrentIndex = /**
     * @return {?}
     */
    function () {
        if (this.touchObject.direction === 1) {
            this.caculateDirectionLeftCurrentIndex();
        }
        else {
            this.caculateDirectionRightCurrentIndex();
        }
    };
    /**
     * @param {?} index
     * @param {?} direction
     * @param {?=} xDist
     * @return {?}
     */
    CarouselComponent.prototype.setSlideStyles = /**
     * @param {?} index
     * @param {?} direction
     * @param {?=} xDist
     * @return {?}
     */
    function (index, direction, xDist) {
        var _this = this;
        if (xDist === void 0) { xDist = 0; }
        if (direction === 1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index < _this._nodeArr.length && index - 1 === tempIndex) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length + tempIndex) * _this._rationWidth : 0;
                    }
                }
                else if (_this._nodeArr.length - 1 === tempIndex && index !== 2) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length - 1) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length - 1) * _this._rationWidth : 0;
                    }
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 1 && _this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 0 && !_this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
        else if (direction === -1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index === 0 && _this._nodeArr.length - 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 2 && index + 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === 1 && 0 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth * tempIndex;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index > 1) {
                    v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
    };
    /**
     * @param {?=} offset
     * @return {?}
     */
    CarouselComponent.prototype.getListStyles = /**
     * @param {?=} offset
     * @return {?}
     */
    function (offset) {
        if (offset === void 0) { offset = 0; }
        /** @type {?} */
        var positionOffset = offset +
            (this.vertical
                ? (this.slideHeight - this._currentSlideHeight) / 2
                : (this._currentSlideWidth - this._rationWidth) / 2) -
            this.cellSpacing;
        this.style = {
            height: this._currentSlideHeight + 'px',
            width: this.items.length * this._rationWidth + 'px',
            transform: this.vertical
                ? "translate3d(0px, " + positionOffset + "px, 0px)"
                : "translate3d(" + positionOffset + "px, 0px, 0px)",
            margin: this.vertical ? (this.cellSpacing / 2) * -1 + "px 0px" : "0px " + (this.cellSpacing / 2) * -1 + "px"
        };
    };
    /**
     * @param {?} x1
     * @param {?} x2
     * @param {?} y1
     * @param {?} y2
     * @return {?}
     */
    CarouselComponent.prototype.swipeDirection = /**
     * @param {?} x1
     * @param {?} x2
     * @param {?} y1
     * @param {?} y2
     * @return {?}
     */
    function (x1, x2, y1, y2) {
        /** @type {?} */
        var xDist = x1 - x2;
        /** @type {?} */
        var yDist = y1 - y2;
        /** @type {?} */
        var r = Math.atan2(yDist, xDist);
        /** @type {?} */
        var swipeAngle = Math.round((r * 180) / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return {
                direction: -1,
                xDist: xDist
            };
        }
        if (this.vertical === true) {
            if (swipeAngle >= 35 + 33 && swipeAngle <= 135) {
                return {
                    direction: 1,
                    xDist: xDist
                };
            }
            else {
                return {
                    direction: -1,
                    xDist: xDist
                };
            }
        }
        return {
            direction: 0,
            xDist: xDist
        };
    };
    Object.defineProperty(CarouselComponent.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? this.selectedIndex : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "pageCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? this.items.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "dotindicatorStatus", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dots ? (this.items.length > 1) : this.dots;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.touchObject = { direction: 1 };
        this._transition = "transform " + this.speed / 1000 + "s";
        this.items.changes.subscribe(function (items) {
            _this.carouselInit(items);
        });
        this.initCarouselSize();
        this.getListStyles();
        this.carouselInit(this.items);
        /** @type {?} */
        var nativeElement = this._ele.nativeElement;
        /** @type {?} */
        var targetNode = nativeElement.querySelector('carouselslide');
        /** @type {?} */
        var config = { attributes: true, childList: true, subtree: true };
        /** @type {?} */
        var callback = function (mutationsList) {
            var e_1, _a;
            try {
                for (var mutationsList_1 = tslib_1.__values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    if (mutation.type == 'attributes') {
                        if (_this.slideHeight !== nativeElement.querySelector('carouselslide').clientHeight) {
                            _this.initCarouselSize();
                            _this.getListStyles();
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        this.observer = new MutationObserver(callback);
        this.observer.observe(targetNode, config);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.observer.disconnect();
        this.observer = null;
        this.stopTimer();
    };
    CarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Carousel, nzm-carousel',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div class=\"slider-frame\" [ngStyle]=\"{overflow: frameOverflow}\">\n  <ul class=\"slider-list\" [ngStyle]=\"style\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n<DotIndicator *ngIf=\"dotindicatorStatus\"\n              class=\"am-carousel-wrap-dot\"\n              [page]=\"page\"\n              [dotStyle]=\"dotStyle\"\n              [pageCount]=\"pageCount\"\n              [dotActiveStyle]=\"dotActiveStyle\"\n></DotIndicator>\n"
                }] }
    ];
    /** @nocollapse */
    CarouselComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CarouselComponent.propDecorators = {
        items: [{ type: ContentChildren, args: [CarouselSlideComponent,] }],
        speed: [{ type: Input }],
        selectedIndex: [{ type: Input }],
        dots: [{ type: Input }],
        vertical: [{ type: Input }],
        autoplay: [{ type: Input }],
        autoplayInterval: [{ type: Input }],
        infinite: [{ type: Input }],
        dotStyle: [{ type: Input }],
        dotActiveStyle: [{ type: Input }],
        frameOverflow: [{ type: Input }],
        cellSpacing: [{ type: Input }],
        slideWidth: [{ type: Input }],
        swipeSpeed: [{ type: Input }],
        dragging: [{ type: Input }],
        afterChange: [{ type: Output }],
        beforeChange: [{ type: Output }],
        carouselWrapper: [{ type: HostBinding, args: ['class.am-carousel',] }],
        carouselwrap: [{ type: HostBinding, args: ['class.carousel',] }],
        panstart: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
        panmove: [{ type: HostListener, args: ['mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
        panend: [{ type: HostListener, args: ['mouseleave', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }, { type: HostListener, args: ['touchend', ['$event'],] }],
        cancel: [{ type: HostListener, args: ['touchcancel', ['$event'],] }]
    };
    return CarouselComponent;
}());
export { CarouselComponent };
if (false) {
    /** @type {?} */
    CarouselComponent.prototype.slideHeight;
    /** @type {?} */
    CarouselComponent.prototype.touchObject;
    /** @type {?} */
    CarouselComponent.prototype.style;
    /** @type {?} */
    CarouselComponent.prototype._timer;
    /** @type {?} */
    CarouselComponent.prototype._nodeArr;
    /** @type {?} */
    CarouselComponent.prototype._lastIndex;
    /** @type {?} */
    CarouselComponent.prototype._isMouseDown;
    /** @type {?} */
    CarouselComponent.prototype._rationWidth;
    /** @type {?} */
    CarouselComponent.prototype._currentSlideWidth;
    /** @type {?} */
    CarouselComponent.prototype._currentSlideHeight;
    /** @type {?} */
    CarouselComponent.prototype._transition;
    /** @type {?} */
    CarouselComponent.prototype._spaceWidth;
    /** @type {?} */
    CarouselComponent.prototype.observer;
    /** @type {?} */
    CarouselComponent.prototype.items;
    /** @type {?} */
    CarouselComponent.prototype.speed;
    /** @type {?} */
    CarouselComponent.prototype.selectedIndex;
    /** @type {?} */
    CarouselComponent.prototype.dots;
    /** @type {?} */
    CarouselComponent.prototype.vertical;
    /** @type {?} */
    CarouselComponent.prototype.autoplay;
    /** @type {?} */
    CarouselComponent.prototype.autoplayInterval;
    /** @type {?} */
    CarouselComponent.prototype.infinite;
    /** @type {?} */
    CarouselComponent.prototype.dotStyle;
    /** @type {?} */
    CarouselComponent.prototype.dotActiveStyle;
    /** @type {?} */
    CarouselComponent.prototype.frameOverflow;
    /** @type {?} */
    CarouselComponent.prototype.cellSpacing;
    /** @type {?} */
    CarouselComponent.prototype.slideWidth;
    /** @type {?} */
    CarouselComponent.prototype.swipeSpeed;
    /** @type {?} */
    CarouselComponent.prototype.dragging;
    /** @type {?} */
    CarouselComponent.prototype.afterChange;
    /** @type {?} */
    CarouselComponent.prototype.beforeChange;
    /** @type {?} */
    CarouselComponent.prototype.carouselWrapper;
    /** @type {?} */
    CarouselComponent.prototype.carouselwrap;
    /** @type {?} */
    CarouselComponent.prototype._ele;
}

//# sourceMappingURL=data:application/json;base64,