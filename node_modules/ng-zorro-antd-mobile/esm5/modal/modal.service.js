/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Compiler, ComponentFactoryResolver } from '@angular/core';
import { ModalComponent } from './modal.component';
import { BaseOptions, ModalOptions, AlertOptions } from './modal-options.provider';
var Modal = /** @class */ (function () {
    function Modal(_appRef, _compiler, _cfr) {
        this._appRef = _appRef;
        this._compiler = _compiler;
        this._cfr = _cfr;
        Modal.appRef = this._appRef;
        Modal._modalCompFactory = this._cfr.resolveComponentFactory(ModalComponent);
    }
    /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    Modal._initConfig = /**
     * @param {?} config
     * @param {?} options
     * @return {?}
     */
    function (config, options) {
        /** @type {?} */
        var props = new BaseOptions();
        /** @type {?} */
        var optionalParams = [
            'visible',
            'focus',
            'closable',
            'maskClosable',
            'onClose',
            'transparent',
            'popup',
            'animationType',
            'title',
            'footer',
            'platform',
            'className',
            'wrapClassName',
            'message',
            'actions',
            'callbackOrActions',
            'type',
            'defaultValue',
            'placeholders',
            'operation',
            'transitionName',
            'maskTransitionName',
            'close'
        ];
        options.transitionName = options.transitionName + "-enter " + options.transitionName + "-enter-active";
        options.maskTransitionName = options.maskTransitionName + "-enter " + options.maskTransitionName + "-enter-active";
        config = Object.assign(options, config, {
            close: function () {
                if (config.maskClosable || config.closable) {
                    Modal.closeWithAnimation();
                }
            }
        });
        optionalParams.forEach(function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    };
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    Modal._open = /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    function (props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        var subject;
        Modal.compRef = Modal.appRef.bootstrap(factory);
        Modal.instance = Modal.compRef.instance;
        subject = Modal.instance.subject;
        Object.assign(Modal.instance, props);
        return subject;
    };
    /**
     * @return {?}
     */
    Modal.closeWithAnimation = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = new BaseOptions();
        Modal.instance.transitionName = options.transitionName + "-leave " + options.transitionName + "-leave-active";
        Modal.instance.maskTransitionName = options.maskTransitionName + "-leave " + options.maskTransitionName + "-leave-active";
        setTimeout(function () {
            Modal.close();
        }, 200);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    Modal.open = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var options = new ModalOptions();
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, Modal._modalCompFactory);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    Modal.alert = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, actions, platform) {
        /** @type {?} */
        var options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.platform = 'ios';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    Modal.prompt = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} callbackOrActions
     * @param {?=} type
     * @param {?=} defaultValue
     * @param {?=} placeholders
     * @param {?=} platform
     * @return {?}
     */
    function (title, message, callbackOrActions, type, defaultValue, placeholders, platform) {
        var _this = this;
        /** @type {?} */
        var options = new AlertOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.className = 'am-modal-alert-content';
        options.defaultValue = defaultValue;
        options.placeholders = placeholders;
        (options.type = type ? type : 'default'), (options.platform = platform ? platform : 'ios');
        /**
         * @param {?} self
         * @param {?} func
         * @return {?}
         */
        function getArgs(self, func) {
            /** @type {?} */
            var text = self.instance.data.text || defaultValue || '';
            /** @type {?} */
            var password = self.instance.data.password || '';
            if (type === 'login-password') {
                return func(text, password);
            }
            else if (type === 'secure-text') {
                return func(password || defaultValue);
            }
            return func(text);
        }
        /** @type {?} */
        var actions;
        if (typeof callbackOrActions === 'function') {
            actions = [
                { text: '取消' },
                {
                    text: '确定',
                    onPress: function () {
                        getArgs(_this, callbackOrActions);
                    }
                }
            ];
        }
        else {
            actions = callbackOrActions.map(function (item) {
                return {
                    text: item.text,
                    onPress: function () {
                        if (item.onPress) {
                            return getArgs(_this, item.onPress);
                        }
                    }
                };
            });
        }
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            title: title,
            message: message,
            type: type ? type : 'default',
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    Modal.operation = /**
     * @param {?=} actions
     * @param {?=} platform
     * @return {?}
     */
    function (actions, platform) {
        /** @type {?} */
        var options = new BaseOptions();
        options.visible = true;
        options.transparent = true;
        options.closable = false;
        options.maskClosable = false;
        options.operation = true;
        options.className = 'am-modal-operation';
        /** @type {?} */
        var footer = getFooter(actions);
        /** @type {?} */
        var config = Object.assign({
            actions: footer ? footer : [{ text: '确定' }],
            platform: platform ? platform : 'ios'
        });
        /** @type {?} */
        var props = Modal._initConfig(config, options);
        return Modal._open(props, this._modalCompFactory);
    };
    /**
     * @return {?}
     */
    Modal.close = /**
     * @return {?}
     */
    function () {
        if (Modal.compRef) {
            Modal.compRef.destroy();
            Modal.compRef = null;
        }
    };
    Modal.compRef = null;
    Modal._modalCompFactory = null;
    Modal.appRef = null;
    Modal.instance = null;
    Modal.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Modal.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: Compiler },
        { type: ComponentFactoryResolver }
    ]; };
    return Modal;
}());
export { Modal };
if (false) {
    /** @type {?} */
    Modal.compRef;
    /** @type {?} */
    Modal._modalCompFactory;
    /** @type {?} */
    Modal.appRef;
    /** @type {?} */
    Modal.instance;
    /** @type {?} */
    Modal.prototype._appRef;
    /** @type {?} */
    Modal.prototype._compiler;
    /** @type {?} */
    Modal.prototype._cfr;
}
/**
 * @param {?} actions
 * @return {?}
 */
function getFooter(actions) {
    return actions.map(function (button) {
        /** @type {?} */
        var orginPress = button.onPress || function () { };
        button.onPress = function () {
            /** @type {?} */
            var res = orginPress();
            if (res && res.then) {
                res.then(function () {
                    Modal.closeWithAnimation();
                });
            }
            else {
                Modal.closeWithAnimation();
            }
        };
        return button;
    });
}

//# sourceMappingURL=data:application/json;base64,