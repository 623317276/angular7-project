/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, HostBinding, EventEmitter, Input, Output, TemplateRef, Optional } from '@angular/core';
import { TabPane } from '../tabs/tab-pane.component';
/**
 * @record
 */
export function OnPressEvent() { }
/** @type {?} */
OnPressEvent.prototype.title;
/** @type {?} */
OnPressEvent.prototype.key;
var TabBarTab = /** @class */ (function () {
    function TabBarTab(tabPane) {
        this.tabPane = tabPane;
        this.prefixCls = 'am-tab-bar-tab';
        this.selected = false;
        this.tintColor = '#108ee9';
        this.unselectedTintColor = '#888';
        this.key = '';
        this.title = '';
        this.dot = false;
        this.badge = null;
        this.icon = null;
        this.selectedIcon = null;
        this.onPress = new EventEmitter();
        this.tabBarTab = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TabBarTab.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * @return {?}
     */
    TabBarTab.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.tabPane.active) {
            this.selected = true;
        }
        else {
            this.selected = false;
        }
        this.tintColor = this.tabPane.tintColor;
        this.unselectedTintColor = this.tabPane.unselectedTintColor;
    };
    TabBarTab.decorators = [
        { type: Component, args: [{
                    selector: 'TabBarTab, nzm-tab-bar-tab',
                    template: "<div class=\"{{prefixCls}}-icon\" [style.color]=\"selected ? tintColor : unselectedTintColor\">\n  <Badge *ngIf=\"badge\" className=\"{{prefixCls}}-badge tab-badge\" [text]=\"badge\">\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </Badge>\n  <Badge className=\"{{prefixCls}}-badge tab-badge\" [dot]=\"dot\" *ngIf=\"dot\">\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </Badge>\n  <ng-container *ngIf=\"!badge && !dot\" >\n    <ng-container *ngIf=\"isTemplateRef(selected ? selectedIcon : icon); then domTemplate; else imgTemplate\">\n    </ng-container>\n  </ng-container>\n</div>\n<p class=\"{{prefixCls}}-title\" [style.color]=\"selected ? tintColor : unselectedTintColor\">\n  {{title}}\n</p>\n\n<ng-template #domTemplate>\n  <ng-template [ngTemplateOutlet]=\"(selected ? selectedIcon : icon)\"></ng-template>\n</ng-template>\n<ng-template #imgTemplate >\n  <img src=\"{{selected ? selectedIcon : icon}}\" alt=\"{{title}}\">\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    TabBarTab.ctorParameters = function () { return [
        { type: TabPane, decorators: [{ type: Optional }] }
    ]; };
    TabBarTab.propDecorators = {
        key: [{ type: Input }],
        title: [{ type: Input }],
        dot: [{ type: Input }],
        badge: [{ type: Input }],
        icon: [{ type: Input }],
        selectedIcon: [{ type: Input }],
        onPress: [{ type: Output }],
        tabBarTab: [{ type: HostBinding, args: ['class.am-tab-bar-tab',] }]
    };
    return TabBarTab;
}());
export { TabBarTab };
if (false) {
    /** @type {?} */
    TabBarTab.prototype.prefixCls;
    /** @type {?} */
    TabBarTab.prototype.selected;
    /** @type {?} */
    TabBarTab.prototype.tintColor;
    /** @type {?} */
    TabBarTab.prototype.unselectedTintColor;
    /** @type {?} */
    TabBarTab.prototype.key;
    /** @type {?} */
    TabBarTab.prototype.title;
    /** @type {?} */
    TabBarTab.prototype.dot;
    /** @type {?} */
    TabBarTab.prototype.badge;
    /** @type {?} */
    TabBarTab.prototype.icon;
    /** @type {?} */
    TabBarTab.prototype.selectedIcon;
    /** @type {?} */
    TabBarTab.prototype.onPress;
    /** @type {?} */
    TabBarTab.prototype.tabBarTab;
    /** @type {?} */
    TabBarTab.prototype.tabPane;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWJhci10YWIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ0YWItYmFyL3RhYi1iYXItdGFiLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7Ozs7Ozs7SUFtQ25ELG1CQUErQixPQUFnQjtRQUFoQixZQUFPLEdBQVAsT0FBTyxDQUFTO3lCQXZCM0IsZ0JBQWdCO3dCQUNoQixLQUFLO3lCQUNMLFNBQVM7bUNBQ0MsTUFBTTttQkFHdEIsRUFBRTtxQkFFQSxFQUFFO21CQUVILEtBQUs7cUJBRUssSUFBSTtvQkFFTSxJQUFJOzRCQUVJLElBQUk7dUJBRVQsSUFBSSxZQUFZLEVBQWdCO3lCQUdqRCxJQUFJO0tBRTBCOzs7OztJQUVuRCxpQ0FBYTs7OztJQUFiLFVBQWMsS0FBSztRQUNqQixPQUFPLEtBQUssWUFBWSxXQUFXLENBQUM7S0FDckM7Ozs7SUFFRCxzQ0FBa0I7OztJQUFsQjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDdEI7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN4QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztLQUM3RDs7Z0JBMUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QywrbUNBQTJDO2lCQUM1Qzs7OztnQkFWUSxPQUFPLHVCQW1DRCxRQUFROzs7c0JBbEJwQixLQUFLO3dCQUVMLEtBQUs7c0JBRUwsS0FBSzt3QkFFTCxLQUFLO3VCQUVMLEtBQUs7K0JBRUwsS0FBSzswQkFFTCxNQUFNOzRCQUdOLFdBQVcsU0FBQyxzQkFBc0I7O29CQTFDckM7O1NBcUJhLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIEhvc3RCaW5kaW5nLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYlBhbmUgfSBmcm9tICcuLi90YWJzL3RhYi1wYW5lLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT25QcmVzc0V2ZW50IHtcbiAgdGl0bGU6IHN0cmluZztcbiAga2V5OiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1RhYkJhclRhYiwgbnptLXRhYi1iYXItdGFiJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYi1iYXItdGFiLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUYWJCYXJUYWIgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSAnYW0tdGFiLWJhci10YWInO1xuICBzZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuICB0aW50Q29sb3I6IHN0cmluZyA9ICcjMTA4ZWU5JztcbiAgdW5zZWxlY3RlZFRpbnRDb2xvcjogc3RyaW5nID0gJyM4ODgnO1xuXG4gIEBJbnB1dCgpXG4gIGtleTogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpXG4gIHRpdGxlOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KClcbiAgZG90OiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGJhZGdlOiBudW1iZXIgfCBzdHJpbmcgPSBudWxsO1xuICBASW5wdXQoKVxuICBpY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPiA9IG51bGw7XG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkSWNvbjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4gPSBudWxsO1xuICBAT3V0cHV0KClcbiAgb25QcmVzczogRXZlbnRFbWl0dGVyPE9uUHJlc3NFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9uUHJlc3NFdmVudD4oKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXRhYi1iYXItdGFiJylcbiAgdGFiQmFyVGFiOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgdGFiUGFuZTogVGFiUGFuZSkge31cblxuICBpc1RlbXBsYXRlUmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKHRoaXMudGFiUGFuZS5hY3RpdmUpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMudGludENvbG9yID0gdGhpcy50YWJQYW5lLnRpbnRDb2xvcjtcbiAgICB0aGlzLnVuc2VsZWN0ZWRUaW50Q29sb3IgPSB0aGlzLnRhYlBhbmUudW5zZWxlY3RlZFRpbnRDb2xvcjtcbiAgfVxufVxuIl19