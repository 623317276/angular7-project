/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
var Stepper = /** @class */ (function () {
    function Stepper() {
        this.prefixCls = 'am-stepper';
        this._max = Infinity;
        this._min = -Infinity;
        this._step = 1;
        this._disabled = false;
        this._readOnly = false;
        this._showNumber = false;
        this._upDisabled = false;
        this._downDisabled = false;
        this._isUpClick = false;
        this._isDownClick = false;
        this.onChange = new EventEmitter();
        this.clsStepper = true;
        this.clsStpDisabled = this._disabled;
        this.clsShowNum = this._showNumber;
    }
    Object.defineProperty(Stepper.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._defaultValue = value;
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._disabled = true;
                this._downDisabled = true;
                this._upDisabled = true;
            }
            this.clsStpDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readOnly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readOnly = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stepper.prototype, "showNumber", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showNumber = value;
            this.clsShowNum = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Stepper.prototype.onIncrease = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._upDisabled) {
            this._value = this._value + this._step;
            this.onChange.emit(this._value);
            if (this._value + this._step > this._max) {
                this._upDisabled = true;
            }
            if (this._value - this._step >= this._min) {
                this._downDisabled = false;
            }
            this._isUpClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isUpClick = false;
                _this.setCls();
            }, 100);
        }
    };
    /**
     * @return {?}
     */
    Stepper.prototype.onDecrease = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._downDisabled) {
            this._value = this._value - this._step;
            this.onChange.emit(this._value);
            if (this._value - this._step < this._min) {
                this._downDisabled = true;
            }
            if (this._value + this._step <= this._max) {
                this._upDisabled = false;
            }
            this._isDownClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isDownClick = false;
                _this.setCls();
            }, 100);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Stepper.prototype.inputChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        this._value = value ? parseInt(value, null) : 0;
        if (value < this._min) {
            this._value = this._min;
        }
        if (value > this._max) {
            this._value = this._max;
        }
        this.onChange.emit(this._value);
    };
    /**
     * @return {?}
     */
    Stepper.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        this.upDisableCls = (_a = {},
            _a[this.prefixCls + "-handler-up-disabled"] = this._upDisabled,
            _a[this.prefixCls + "-handler-active"] = this._isUpClick,
            _a);
        this.downDisableCls = (_b = {},
            _b[this.prefixCls + "-handler-down-disabled"] = this._downDisabled,
            _b[this.prefixCls + "-handler-active"] = this._isDownClick,
            _b);
    };
    /**
     * @return {?}
     */
    Stepper.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this._value + this._step > this._max) {
            this._upDisabled = true;
        }
        if (this._value - this._step < this._min) {
            this._downDisabled = true;
        }
        this.setCls();
    };
    Stepper.decorators = [
        { type: Component, args: [{
                    selector: 'Stepper , nzm-stepper',
                    template: "<div class=\"{{prefixCls}}-handler-wrap\">\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-up\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"upDisableCls\"\n          (click)=\"onIncrease()\">\n          <Icon [type]=\"'plus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n    <span role=\"button\"\n          class=\"{{prefixCls}}-handler {{prefixCls}}-handler-down\"\n          style=\"line-height:28px;\"\n          [ngClass]=\"downDisableCls\"\n          (click)=\"onDecrease()\">\n          <Icon [type]=\"'minus'\"\n                [size]=\"'xxs'\">\n          </Icon>\n    </span>\n</div>\n<div class=\"{{prefixCls}}-input-wrap\">\n    <input class=\"{{prefixCls}}-input\"\n           style=\"outline:none\"\n           [disabled]=\"disabled\"\n           [readonly]=\"readOnly\"\n           [autocomplete]=\"'off'\"\n           [max]=\"max\"\n           [min]=\"min\"\n           [(ngModel)]=\"value\"\n           (change)=\"inputChange($event)\">\n</div>"
                }] }
    ];
    /** @nocollapse */
    Stepper.ctorParameters = function () { return []; };
    Stepper.propDecorators = {
        max: [{ type: Input }],
        min: [{ type: Input }],
        value: [{ type: Input }],
        step: [{ type: Input }],
        defaultValue: [{ type: Input }],
        disabled: [{ type: Input }],
        readOnly: [{ type: Input }],
        showNumber: [{ type: Input }],
        onChange: [{ type: Output }],
        clsStepper: [{ type: HostBinding, args: ['class.am-stepper',] }],
        clsStpDisabled: [{ type: HostBinding, args: ['class.am-stepper-disabled',] }],
        clsShowNum: [{ type: HostBinding, args: ['class.showNumber',] }]
    };
    return Stepper;
}());
export { Stepper };
if (false) {
    /** @type {?} */
    Stepper.prototype.prefixCls;
    /** @type {?} */
    Stepper.prototype.upDisableCls;
    /** @type {?} */
    Stepper.prototype.downDisableCls;
    /** @type {?} */
    Stepper.prototype.stepperCls;
    /** @type {?} */
    Stepper.prototype._max;
    /** @type {?} */
    Stepper.prototype._min;
    /** @type {?} */
    Stepper.prototype._value;
    /** @type {?} */
    Stepper.prototype._step;
    /** @type {?} */
    Stepper.prototype._defaultValue;
    /** @type {?} */
    Stepper.prototype._disabled;
    /** @type {?} */
    Stepper.prototype._readOnly;
    /** @type {?} */
    Stepper.prototype._showNumber;
    /** @type {?} */
    Stepper.prototype._upDisabled;
    /** @type {?} */
    Stepper.prototype._downDisabled;
    /** @type {?} */
    Stepper.prototype._isUpClick;
    /** @type {?} */
    Stepper.prototype._isDownClick;
    /** @type {?} */
    Stepper.prototype.onChange;
    /** @type {?} */
    Stepper.prototype.clsStepper;
    /** @type {?} */
    Stepper.prototype.clsStpDisabled;
    /** @type {?} */
    Stepper.prototype.clsShowNum;
}

//# sourceMappingURL=data:application/json;base64,