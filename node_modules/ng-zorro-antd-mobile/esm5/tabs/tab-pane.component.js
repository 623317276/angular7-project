/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, TemplateRef } from '@angular/core';
import { trigger, state, style } from '@angular/animations';
/** @typedef {?} */
var TabPanelPositionState;
export { TabPanelPositionState };
var TabPane = /** @class */ (function () {
    function TabPane() {
        this.prefixCls = 'am-tabs-pane';
        this.tintColor = '#108ee9';
        this.unselectedTintColor = '#888';
        this.active = true;
        this.isTitleString = true;
        this.showTabPanelContent = false;
        this.paneWrap = true;
    }
    Object.defineProperty(TabPane.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isTitleString = !(value instanceof TemplateRef);
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPane.prototype, "wrapActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPane.prototype, "wrapInactive", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    TabPane.prototype.onTranslateTabStarted = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if ((e.toState == 'center-with-animation' ||
            e.toState == 'center-without-animation' ||
            e.toState == 'left-with-animation-with-higher-zindex' ||
            e.toState == 'right-with-animation-with-higher-zindex' ||
            e.toState == 'top-with-animation-with-higher-zindex' ||
            e.toState == 'bottom-with-animation-with-higher-zindex') &&
            (this.position == 'center-with-animation' ||
                this.position == 'center-without-animation' ||
                this.position == 'left-with-animation-with-higher-zindex' ||
                this.position == 'right-with-animation-with-higher-zindex' ||
                this.position == 'top-with-animation-with-higher-zindex' ||
                this.position == 'bottom-with-animation-with-higher-zindex')) {
            this.showTabPanelContent = true;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TabPane.prototype.onTranslateTabComplete = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.toState !== 'center-with-animation' &&
            e.toState !== 'center-without-animation' &&
            e.toState !== 'left-with-animation-with-higher-zindex' &&
            e.toState !== 'right-with-animation-with-higher-zindex' &&
            e.toState !== 'top-with-animation-with-higher-zindex' &&
            e.toState !== 'bottom-with-animation-with-higher-zindex' &&
            this.position !== 'center-with-animation' &&
            this.position !== 'center-without-animation' &&
            this.position !== 'left-with-animation-with-higher-zindex' &&
            this.position !== 'right-with-animation-with-higher-zindex' &&
            this.position !== 'top-with-animation-with-higher-zindex' &&
            this.position !== 'bottom-with-animation-with-higher-zindex') {
            this.showTabPanelContent = false;
        }
    };
    TabPane.decorators = [
        { type: Component, args: [{
                    selector: 'TabPane, nzm-tab-pane',
                    template: "<ng-content *ngIf=\"showTabPanelContent\"></ng-content>",
                    host: {
                        '[@translateTabPane]': 'position',
                        '(@translateTabPane.start)': 'onTranslateTabStarted($event)',
                        '(@translateTabPane.done)': 'onTranslateTabComplete($event)'
                    },
                    animations: [
                        trigger('translateTabPane', [
                            state('left-with-animation', style({
                                transform: 'translate3d(-100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('left-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(-100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('left-without-animation', style({ transform: 'translate3d(-100%, 0, 0)' })),
                            state('right-with-animation', style({
                                transform: 'translate3d(100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('right-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(100%, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('right-without-animation', style({ transform: 'translate3d(100%, 0, 0)' })),
                            state('top-with-animation', style({
                                transform: 'translate3d(0, -100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('top-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(0, -100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('top-without-animation', style({ transform: 'translate3d(0, -100%, 0)' })),
                            state('bottom-with-animation', style({
                                transform: 'translate3d(0, 100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('bottom-with-animation-with-higher-zindex', style({
                                'z-index': 100,
                                transform: 'translate3d(0, 100%, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('bottom-without-animation', style({ transform: 'translate3d(0, 100%, 0)' })),
                            state('center-with-animation', style({
                                'z-index': 100,
                                transform: 'translate3d(0, 0, 0)',
                                transition: '.3s cubic-bezier(0.35, 0, 0.25, 1)'
                            })),
                            state('center-without-animation', style({ transform: 'translate3d(0, 0, 0)' }))
                        ])
                    ],
                    styles: [":host {touch-action: auto}"]
                }] }
    ];
    /** @nocollapse */
    TabPane.ctorParameters = function () { return []; };
    TabPane.propDecorators = {
        title: [{ type: Input }],
        paneWrap: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap',] }],
        wrapActive: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap-active',] }],
        wrapInactive: [{ type: HostBinding, args: ['class.am-tabs-pane-wrap-inactive',] }]
    };
    return TabPane;
}());
export { TabPane };
if (false) {
    /** @type {?} */
    TabPane.prototype.prefixCls;
    /** @type {?} */
    TabPane.prototype.tintColor;
    /** @type {?} */
    TabPane.prototype.unselectedTintColor;
    /** @type {?} */
    TabPane.prototype.active;
    /** @type {?} */
    TabPane.prototype.isTitleString;
    /** @type {?} */
    TabPane.prototype.showTabPanelContent;
    /** @type {?} */
    TabPane.prototype.position;
    /** @type {?} */
    TabPane.prototype._title;
    /** @type {?} */
    TabPane.prototype.paneWrap;
}

//# sourceMappingURL=data:application/json;base64,