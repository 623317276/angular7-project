/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, QueryList, ViewChild, ElementRef, HostBinding, TemplateRef, EventEmitter, ContentChildren, ViewEncapsulation } from '@angular/core';
import { TabPane } from './tab-pane.component';
/** @typedef {?} */
var TabDirection;
export { TabDirection };
/** @typedef {?} */
var TabBarPositionType;
export { TabBarPositionType };
/**
 * @record
 */
export function OnChangeEvent() { }
/** @type {?} */
OnChangeEvent.prototype.index;
var Tabs = /** @class */ (function () {
    function Tabs() {
        this.prefixCls = 'am-tabs';
        this.selectedKey = 0;
        this.keyToSelect = 0;
        this.paneMoveStyle = '';
        this._startTime = 0;
        this._startPosition = 0;
        this._velocityThreshold = 0.3;
        this._tabDirection = 'horizontal';
        this._tabBarPosition = 'top';
        this.page = 5;
        this.swipeable = true;
        this.useOnPan = true;
        this.animated = true;
        this.distanceToChangeTab = 0.3;
        this.tabBarActiveTextColor = '';
        this.tabBarInactiveTextColor = '';
        this.renderTabBar = null;
        this.tabBarBackgroundColor = '#FFF';
        this.tabBarTextStyle = {};
        /**
         * should be removed when https://github.com/angular/angular/issues/20810 resolved *
         */
        this.tabPanesComponent = null;
        this.onChange = new EventEmitter();
        this.onTabClick = new EventEmitter();
        this.amTabs = true;
        this.amTabsTop = true;
        this.amTabsLeft = false;
        this.amTabsRight = false;
        this.amTabsBottom = false;
        this.amTabsVertical = false;
        this.amTabsHorizontal = true;
    }
    Object.defineProperty(Tabs.prototype, "activeTab", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedKey;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.keyToSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabBarPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabBarPosition;
        },
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tabBarPosition = position;
            switch (position) {
                case 'top':
                    this.amTabsTop = true;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'left':
                    this.amTabsTop = false;
                    this.amTabsLeft = true;
                    this.amTabsRight = false;
                    this.amTabsBottom = false;
                    break;
                case 'bottom':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = false;
                    this.amTabsBottom = true;
                    break;
                case 'right':
                    this.amTabsTop = false;
                    this.amTabsLeft = false;
                    this.amTabsRight = true;
                    this.amTabsBottom = false;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabDirection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tabDirection;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            this._tabDirection = direction;
            switch (direction) {
                case 'horizontal':
                    this.amTabsHorizontal = true;
                    this.amTabsVertical = false;
                    break;
                case 'vertical':
                    this.amTabsHorizontal = false;
                    this.amTabsVertical = true;
                    break;
                default:
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    Tabs.prototype.clickTab = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.selectedKey !== index) {
            this.keyToSelect = index;
            this.onTabClick.emit({ index: this.keyToSelect });
        }
    };
    /**
     * @return {?}
     */
    Tabs.prototype.getCurrentTabPanes = /**
     * @return {?}
     */
    function () {
        return this.tabPanesComponent || this.tabPanes;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._startTime = event.timeStamp;
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            }
            else if ('vertical' === this._tabDirection) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                // velocity 小于阈值才认为是pan操作
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(' + distance + 'px, 0, 0 )';
                }
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                if (distance < 0 && this.activeTab === this.getCurrentTabPanes().length - 1) {
                    return;
                }
                else if (distance > 0 && this.activeTab === 0) {
                    return;
                }
                if (this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    this.useOnPan &&
                    this.swipeable &&
                    this.animated) {
                    this.paneMoveStyle = 'translate3d(0, ' + distance + 'px, 0 )';
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Tabs.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            if ('horizontal' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientX - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetWidth * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(0, 0, 0 )';
            }
            else if ('vertical' === this._tabDirection) {
                /** @type {?} */
                var distance = event.changedTouches[0].clientY - this._startPosition;
                /** @type {?} */
                var distanceToChangeTabPx = this.tabContent.nativeElement.offsetHeight * this.distanceToChangeTab;
                if ((this.getVelocity(distance, event.timeStamp - this._startTime) <= this._velocityThreshold &&
                    (this.useOnPan && this.swipeable && Math.abs(distance) > distanceToChangeTabPx)) ||
                    (this.getVelocity(distance, event.timeStamp - this._startTime) > this._velocityThreshold &&
                        (this.swipeable && Math.abs(distance) > distanceToChangeTabPx / 2))) {
                    if (distance < 0 && this.activeTab < this.getCurrentTabPanes().length - 1) {
                        this.keyToSelect++;
                    }
                    else if (distance > 0 && this.activeTab > 0) {
                        this.keyToSelect--;
                    }
                }
                this.paneMoveStyle = 'translate3d(0, 0, 0 )';
            }
        }
    };
    /**
     * @return {?}
     */
    Tabs.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.selectTabPane(this.keyToSelect);
        this.selectedKey = this.keyToSelect;
    };
    /**
     * @return {?}
     */
    Tabs.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.keyToSelect !== this.selectedKey && this.getCurrentTabPanes() && this.getCurrentTabPanes().length > 0) {
            this.selectTabPane(this.keyToSelect);
            this.selectedKey = this.keyToSelect;
            this.onChange.emit({ index: this.selectedKey });
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tabs.prototype.selectTabPane = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var keyToSelect = Math.min(this.getCurrentTabPanes().length - 1, Math.max(index || 0, 0));
        this.getCurrentTabPanes().forEach(function (tabPane, indexKey) {
            if (keyToSelect < indexKey) {
                if (_this.animated) {
                    if ('horizontal' === _this._tabDirection) {
                        if (keyToSelect === indexKey - 1) {
                            tabPane.position = 'right-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'right-with-animation';
                        }
                    }
                    else if ('vertical' === _this._tabDirection) {
                        if (keyToSelect === indexKey - 1) {
                            tabPane.position = 'bottom-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'bottom-with-animation';
                        }
                    }
                }
                else {
                    if ('horizontal' === _this._tabDirection) {
                        tabPane.position = 'right-without-animation';
                    }
                    else if ('vertical' === _this._tabDirection) {
                        tabPane.position = 'bottom-without-animation';
                    }
                }
            }
            else if (keyToSelect > indexKey) {
                if (_this.animated) {
                    if ('horizontal' === _this._tabDirection) {
                        if (keyToSelect === indexKey + 1) {
                            tabPane.position = 'left-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'left-with-animation';
                        }
                    }
                    else if ('vertical' === _this._tabDirection) {
                        if (keyToSelect === indexKey + 1) {
                            tabPane.position = 'top-with-animation-with-higher-zindex';
                        }
                        else {
                            tabPane.position = 'top-with-animation';
                        }
                    }
                }
                else {
                    if ('horizontal' === _this._tabDirection) {
                        tabPane.position = 'left-without-animation';
                    }
                    else if ('vertical' === _this._tabDirection) {
                        tabPane.position = 'top-without-animation';
                    }
                }
            }
            else {
                if (_this.animated) {
                    tabPane.position = 'center-with-animation';
                }
                else {
                    tabPane.position = 'center-without-animation';
                }
            }
            if (keyToSelect !== indexKey) {
                tabPane.active = false;
            }
            else {
                tabPane.active = true;
            }
        });
    };
    /**
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    Tabs.prototype.getVelocity = /**
     * @param {?} deltaDistance
     * @param {?} deltaTime
     * @return {?}
     */
    function (deltaDistance, deltaTime) {
        return Math.abs(deltaDistance / deltaTime);
    };
    Tabs.decorators = [
        { type: Component, args: [{
                    selector: 'Tabs, nzm-tabs',
                    template: "<ng-container>\n  <ng-template *ngIf=\"'top' === tabBarPosition || 'left' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\">\n  </ng-template>\n  <div #TabContent\n       class=\"{{prefixCls}}-content-wrap\"\n       [ngClass]=\"{'am-tabs-content-wrap-animated': animated}\"\n       [ngStyle]=\"{'transform': paneMoveStyle, 'webkitTransform': paneMoveStyle}\"\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n  <ng-template *ngIf=\"'bottom' === tabBarPosition || 'right' === tabBarPosition\"\n               [ngTemplateOutlet]=\"renderTabBar || renderDefaultTabBar\"\n  ></ng-template>\n</ng-container>\n\n<ng-template #renderDefaultTabBar>\n  <DefaultTabBar #DefaultTabBar\n                 [page]=\"page\"\n                 [animated]=\"animated\"\n                 [activeTab]=\"selectedKey\"\n                 [tabBarPosition]=\"tabBarPosition\"\n                 [tabBarBackgroundColor]=\"tabBarBackgroundColor\"\n                 [tabBarUnderlineStyle]=\"tabBarUnderlineStyle\"\n  >\n    <div #TabTitle\n         *ngFor=\"let tabPane of getCurrentTabPanes(); let i = index\"\n         class=\"{{prefixCls}}-default-bar-tab\"\n         [ngClass]=\"{'am-tabs-default-bar-tab-active': tabPane.active, 'am-tabs-default-bar-tab-disabled': tabPane.disabled}\"\n         [ngStyle]=\"tabBarTextStyle\"\n         [style.color]=\"tabPane.active ? tabBarActiveTextColor : tabBarInactiveTextColor\"\n         (click)=\"clickTab(i)\"\n    >\n      <ng-container *ngIf=\"tabPane.isTitleString; else titleTemplate\">\n        {{tabPane.title}}\n      </ng-container>\n      <ng-template #titleTemplate>\n        <ng-template [ngTemplateOutlet]=\"tabPane.title\"></ng-template>\n      </ng-template>\n    </div>\n  </DefaultTabBar>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    Tabs.ctorParameters = function () { return []; };
    Tabs.propDecorators = {
        tabPanes: [{ type: ContentChildren, args: [TabPane, { descendants: true },] }],
        tabContent: [{ type: ViewChild, args: ['TabContent',] }],
        tabsBarSwipe: [{ type: ViewChild, args: ['TabsBarSwipe',] }],
        defaultTabBar: [{ type: ViewChild, args: ['DefaultTabBar',] }],
        tabsBarContainer: [{ type: ViewChild, args: ['TabsBarContainer',] }],
        page: [{ type: Input }],
        swipeable: [{ type: Input }],
        useOnPan: [{ type: Input }],
        animated: [{ type: Input }],
        tabBarUnderlineStyle: [{ type: Input }],
        distanceToChangeTab: [{ type: Input }],
        tabBarActiveTextColor: [{ type: Input }],
        tabBarInactiveTextColor: [{ type: Input }],
        renderTabBar: [{ type: Input }],
        tabBarBackgroundColor: [{ type: Input }],
        tabBarTextStyle: [{ type: Input }],
        tabPanesComponent: [{ type: Input }],
        activeTab: [{ type: Input }],
        tabBarPosition: [{ type: Input }],
        tabDirection: [{ type: Input }],
        onChange: [{ type: Output }],
        onTabClick: [{ type: Output }],
        amTabs: [{ type: HostBinding, args: ['class.am-tabs',] }],
        amTabsTop: [{ type: HostBinding, args: ['class.am-tabs-top',] }],
        amTabsLeft: [{ type: HostBinding, args: ['class.am-tabs-left',] }],
        amTabsRight: [{ type: HostBinding, args: ['class.am-tabs-right',] }],
        amTabsBottom: [{ type: HostBinding, args: ['class.am-tabs-bottom',] }],
        amTabsVertical: [{ type: HostBinding, args: ['class.am-tabs-vertical',] }],
        amTabsHorizontal: [{ type: HostBinding, args: ['class.am-tabs-horizontal',] }]
    };
    return Tabs;
}());
export { Tabs };
if (false) {
    /** @type {?} */
    Tabs.prototype.prefixCls;
    /** @type {?} */
    Tabs.prototype.selectedKey;
    /** @type {?} */
    Tabs.prototype.keyToSelect;
    /** @type {?} */
    Tabs.prototype.paneMoveStyle;
    /** @type {?} */
    Tabs.prototype._startTime;
    /** @type {?} */
    Tabs.prototype._startPosition;
    /** @type {?} */
    Tabs.prototype._velocityThreshold;
    /** @type {?} */
    Tabs.prototype._tabDirection;
    /** @type {?} */
    Tabs.prototype._tabBarPosition;
    /** @type {?} */
    Tabs.prototype.tabPanes;
    /** @type {?} */
    Tabs.prototype.tabContent;
    /** @type {?} */
    Tabs.prototype.tabsBarSwipe;
    /** @type {?} */
    Tabs.prototype.defaultTabBar;
    /** @type {?} */
    Tabs.prototype.tabsBarContainer;
    /** @type {?} */
    Tabs.prototype.page;
    /** @type {?} */
    Tabs.prototype.swipeable;
    /** @type {?} */
    Tabs.prototype.useOnPan;
    /** @type {?} */
    Tabs.prototype.animated;
    /** @type {?} */
    Tabs.prototype.tabBarUnderlineStyle;
    /** @type {?} */
    Tabs.prototype.distanceToChangeTab;
    /** @type {?} */
    Tabs.prototype.tabBarActiveTextColor;
    /** @type {?} */
    Tabs.prototype.tabBarInactiveTextColor;
    /** @type {?} */
    Tabs.prototype.renderTabBar;
    /** @type {?} */
    Tabs.prototype.tabBarBackgroundColor;
    /** @type {?} */
    Tabs.prototype.tabBarTextStyle;
    /**
     * should be removed when https://github.com/angular/angular/issues/20810 resolved *
     * @type {?}
     */
    Tabs.prototype.tabPanesComponent;
    /** @type {?} */
    Tabs.prototype.onChange;
    /** @type {?} */
    Tabs.prototype.onTabClick;
    /** @type {?} */
    Tabs.prototype.amTabs;
    /** @type {?} */
    Tabs.prototype.amTabsTop;
    /** @type {?} */
    Tabs.prototype.amTabsLeft;
    /** @type {?} */
    Tabs.prototype.amTabsRight;
    /** @type {?} */
    Tabs.prototype.amTabsBottom;
    /** @type {?} */
    Tabs.prototype.amTabsVertical;
    /** @type {?} */
    Tabs.prototype.amTabsHorizontal;
}

//# sourceMappingURL=data:application/json;base64,