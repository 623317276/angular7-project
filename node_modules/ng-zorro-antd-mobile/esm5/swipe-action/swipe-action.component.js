/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
var SwipeAction = /** @class */ (function () {
    function SwipeAction() {
        var _this = this;
        this.prefixCls = 'am-swipe';
        this.wrapCls = {};
        this._swiping = false;
        this._openedLeft = false;
        this._openedRight = false;
        this.left = [];
        this.right = [];
        this.autoClose = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onCloseSwipe = function () {
            if (!(_this._openedLeft || _this._openedRight)) {
                return;
            }
            _this.close();
        };
        this.onTouchStart = function (e) {
            _this._startX = e.changedTouches[0].clientX;
            _this._swiping = true;
        };
    }
    /**
     * @return {?}
     */
    SwipeAction.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this.wrapCls = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-swiping"] = this._swiping,
            _a);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this._openedLeft || this._openedRight) {
            this.onClose.emit();
        }
        this.setBtnStyle(0);
        this._openedLeft = false;
        this._openedRight = false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SwipeAction.prototype.setBtnStyle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var limit = value > 0 ? this._btnsLeftWidth : -this._btnsRightWidth;
        /** @type {?} */
        var contentLeft = this.getContentEasing(value, limit);
        this.content.nativeElement.style.left = contentLeft + "px";
        this.cover.nativeElement.style.display = Math.abs(value) > 0 ? 'block' : 'none';
        this.cover.nativeElement.style.left = contentLeft + "px";
    };
    /**
     * @param {?} value
     * @param {?} limit
     * @return {?}
     */
    SwipeAction.prototype.getContentEasing = /**
     * @param {?} value
     * @param {?} limit
     * @return {?}
     */
    function (value, limit) {
        return Math.abs(value) - Math.abs(limit) > 0 ? limit : value;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SwipeAction.prototype.onTouchMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var deltaX = e.changedTouches[0].clientX - this._startX;
        e.preventDefault();
        this._needShowRight = deltaX < 0 && this.right.length > 0;
        this._needShowLeft = deltaX > 0 && this.left.length > 0;
        if (this.leftBtnRef) {
            this.leftBtnRef.nativeElement.style.visibility = this._needShowRight ? 'hidden' : 'visible';
        }
        if (this.rightBtnRef) {
            this.rightBtnRef.nativeElement.style.visibility = this._needShowLeft ? 'hidden' : 'visible';
        }
        this.setBtnStyle(deltaX);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SwipeAction.prototype.onTouchEnd = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var deltaX = e.changedTouches[0].clientX - this._startX;
        /** @type {?} */
        var needOpenRight = this._needShowRight && Math.abs(deltaX) > this._btnsRightWidth / 2;
        /** @type {?} */
        var needOpenLeft = this._needShowLeft && Math.abs(deltaX) > this._btnsLeftWidth / 2;
        if (needOpenRight) {
            this.doOpenRight();
        }
        else if (needOpenLeft) {
            this.doOpenLeft();
        }
        else {
            this.close();
        }
        this._swiping = false;
        this._needShowLeft = false;
        this._needShowRight = false;
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.doOpenLeft = /**
     * @return {?}
     */
    function () {
        this.open(this._btnsLeftWidth, true, false);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.doOpenRight = /**
     * @return {?}
     */
    function () {
        this.open(-this._btnsRightWidth, false, true);
    };
    /**
     * @param {?} ev
     * @param {?} btn
     * @return {?}
     */
    SwipeAction.prototype.onBtnClick = /**
     * @param {?} ev
     * @param {?} btn
     * @return {?}
     */
    function (ev, btn) {
        /** @type {?} */
        var onPress = btn.onPress;
        if (onPress) {
            onPress(ev);
        }
        if (this.autoClose) {
            this.close();
        }
    };
    /**
     * @param {?} value
     * @param {?} openedLeft
     * @param {?} openedRight
     * @return {?}
     */
    SwipeAction.prototype.open = /**
     * @param {?} value
     * @param {?} openedLeft
     * @param {?} openedRight
     * @return {?}
     */
    function (value, openedLeft, openedRight) {
        this.onOpen.emit();
        this._openedLeft = openedLeft;
        this._openedRight = openedRight;
        this.setBtnStyle(value);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._btnsLeftWidth = this.leftBtnRef ? this.leftBtnRef.nativeElement.offsetWidth : 0;
        this._btnsRightWidth = this.rightBtnRef ? this.rightBtnRef.nativeElement.offsetWidth : 0;
        document.body.addEventListener('touchstart', this.onCloseSwipe, true);
    };
    /**
     * @return {?}
     */
    SwipeAction.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        document.body.removeEventListener('touchstart', this.onCloseSwipe, true);
    };
    SwipeAction.decorators = [
        { type: Component, args: [{
                    selector: 'SwipeAction, nzm-swipe-action',
                    template: "<div *ngIf=\"(left.length != 0 || right.length != 0) && !disabled\" [ngClass]=\"wrapCls\">\n  <div class=\"{{prefixCls}}-cover\" #coverRef></div>\n  <div *ngIf=\"left && left.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-left\"\n       #leftBtnRef>\n    <div *ngFor=\"let btn of left\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\">\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"right && right.length > 0\"\n       class=\"{{prefixCls}}-actions {{prefixCls}}-actions-right\"\n       #rightBtnRef>\n    <div *ngFor=\"let btn of right\"\n         class=\"{{prefixCls}}-btn\"\n         [ngStyle]=\"btn.style\"\n         role=\"button\"\n         (click)=\"onBtnClick($event, btn)\"\n         >\n      <div class=\"{{prefixCls}}-btn-text\">\n        {{btn.text || 'Click'}}\n      </div>\n    </div>\n  </div>\n  <div class=\"{{prefixCls}}-content\"\n       #contentRef\n       (touchstart)=\"onTouchStart($event)\"\n       (touchmove)=\"onTouchMove($event)\"\n       (touchend)=\"onTouchEnd($event)\">\n    <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n  </div>\n</div>\n<div *ngIf=\"!((left.length != 0 || right.length != 0) && !disabled)\"\n     class=\"{{prefixCls}}-content\"\n     #contentRef>\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</div>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SwipeAction.ctorParameters = function () { return []; };
    SwipeAction.propDecorators = {
        leftBtnRef: [{ type: ViewChild, args: ['leftBtnRef',] }],
        rightBtnRef: [{ type: ViewChild, args: ['rightBtnRef',] }],
        content: [{ type: ViewChild, args: ['contentRef',] }],
        cover: [{ type: ViewChild, args: ['coverRef',] }],
        left: [{ type: Input }],
        right: [{ type: Input }],
        autoClose: [{ type: Input }],
        disabled: [{ type: Input }],
        onOpen: [{ type: Output }],
        onClose: [{ type: Output }]
    };
    return SwipeAction;
}());
export { SwipeAction };
if (false) {
    /** @type {?} */
    SwipeAction.prototype.prefixCls;
    /** @type {?} */
    SwipeAction.prototype.wrapCls;
    /** @type {?} */
    SwipeAction.prototype._swiping;
    /** @type {?} */
    SwipeAction.prototype._openedLeft;
    /** @type {?} */
    SwipeAction.prototype._openedRight;
    /** @type {?} */
    SwipeAction.prototype._btnsLeftWidth;
    /** @type {?} */
    SwipeAction.prototype._btnsRightWidth;
    /** @type {?} */
    SwipeAction.prototype._needShowLeft;
    /** @type {?} */
    SwipeAction.prototype._needShowRight;
    /** @type {?} */
    SwipeAction.prototype._startX;
    /** @type {?} */
    SwipeAction.prototype.leftBtnRef;
    /** @type {?} */
    SwipeAction.prototype.rightBtnRef;
    /** @type {?} */
    SwipeAction.prototype.content;
    /** @type {?} */
    SwipeAction.prototype.cover;
    /** @type {?} */
    SwipeAction.prototype.left;
    /** @type {?} */
    SwipeAction.prototype.right;
    /** @type {?} */
    SwipeAction.prototype.autoClose;
    /** @type {?} */
    SwipeAction.prototype.disabled;
    /** @type {?} */
    SwipeAction.prototype.onOpen;
    /** @type {?} */
    SwipeAction.prototype.onClose;
    /** @type {?} */
    SwipeAction.prototype.onCloseSwipe;
    /** @type {?} */
    SwipeAction.prototype.onTouchStart;
}

//# sourceMappingURL=data:application/json;base64,