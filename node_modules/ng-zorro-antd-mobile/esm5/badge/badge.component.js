/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
var Badge = /** @class */ (function () {
    function Badge(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    Object.defineProperty(Badge.prototype, "size", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._size = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._text = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "corner", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._corner = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "dot", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dot;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._dot = v;
            if (this._dot) {
                this._text = '';
            }
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "overflowCount", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._overflowCount = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "hot", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hot = v;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "setStyle", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.style = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Badge.prototype, "className", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            this._setClass = v;
            /** @type {?} */
            var clsArr = this._setClass.split(' ');
            clsArr.forEach(function (cls) {
                _this.render.addClass(_this._ref.nativeElement, cls);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Badge.prototype.setCls = /**
     * @return {?}
     */
    function () {
        var _a;
        this.scrollNumberCls = (_a = {},
            _a[this.prefixCls + "-dot"] = this._dot,
            _a[this.prefixCls + "-dot-large"] = this._dot && this._size === 'large',
            _a[this.prefixCls + "-text"] = !this._dot && !this._corner,
            _a[this.prefixCls + "-corner"] = this._corner,
            _a[this.prefixCls + "-corner-large"] = this._corner && this._size === 'large',
            _a);
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    Badge.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (_this._ref.nativeElement.children.length > 1) {
                _this._children = true;
                _this.setCls();
            }
        }, 10);
    };
    Badge.decorators = [
        { type: Component, args: [{
                    selector: 'Badge, nzm-badge',
                    template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\"\n    [ngClass]=\"scrollNumberCls\"\n    [ngStyle]=\"style\">\n    <span>{{text}}</span>\n</sup>\n"
                }] }
    ];
    /** @nocollapse */
    Badge.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Badge.propDecorators = {
        size: [{ type: Input }],
        text: [{ type: Input }],
        corner: [{ type: Input }],
        dot: [{ type: Input }],
        overflowCount: [{ type: Input }],
        hot: [{ type: Input }],
        setStyle: [{ type: Input }],
        className: [{ type: Input }],
        clsBadge: [{ type: HostBinding, args: ['class.am-badge',] }],
        clsBadgeWrp: [{ type: HostBinding, args: ['class.am-badge-not-a-wrapper',] }],
        clsBadgeCornerWrp: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper',] }],
        clsBadgeHot: [{ type: HostBinding, args: ['class.am-badge-hot',] }],
        clsBadgeCornerWrpLg: [{ type: HostBinding, args: ['class.am-badge-corner-wrapper-large',] }]
    };
    return Badge;
}());
export { Badge };
if (false) {
    /** @type {?} */
    Badge.prototype.prefixCls;
    /** @type {?} */
    Badge.prototype.scrollNumberCls;
    /** @type {?} */
    Badge.prototype.style;
    /** @type {?} */
    Badge.prototype._text;
    /** @type {?} */
    Badge.prototype._setClass;
    /** @type {?} */
    Badge.prototype._size;
    /** @type {?} */
    Badge.prototype._dot;
    /** @type {?} */
    Badge.prototype._hot;
    /** @type {?} */
    Badge.prototype._corner;
    /** @type {?} */
    Badge.prototype._children;
    /** @type {?} */
    Badge.prototype._overflowCount;
    /** @type {?} */
    Badge.prototype.clsBadge;
    /** @type {?} */
    Badge.prototype.clsBadgeWrp;
    /** @type {?} */
    Badge.prototype.clsBadgeCornerWrp;
    /** @type {?} */
    Badge.prototype.clsBadgeHot;
    /** @type {?} */
    Badge.prototype.clsBadgeCornerWrpLg;
    /** @type {?} */
    Badge.prototype._ref;
    /** @type {?} */
    Badge.prototype.render;
}

//# sourceMappingURL=data:application/json;base64,