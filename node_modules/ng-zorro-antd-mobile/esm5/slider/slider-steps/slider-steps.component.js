/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, HostBinding, ViewEncapsulation } from '@angular/core';
var SliderSteps = /** @class */ (function () {
    function SliderSteps(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.stepArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._dots = false;
    }
    Object.defineProperty(SliderSteps.prototype, "min", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value <= this._max) {
                this._min = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "max", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value >= this._min) {
                this._max = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "marks", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "step", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "included", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "dots", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dots = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "upperBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined && value !== this._upperBound) {
                this._upperBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "lowerBound", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined && value !== this.lowerBound) {
                this._lowerBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderSteps.prototype, "class", {
        get: /**
         * @return {?}
         */
        function () {
            return 'am-slider-step';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderSteps.prototype.calPoints = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var points = Object.keys(this._marks).map(parseFloat);
        if (this._dots) {
            for (var i = this._min; i <= this._max; i = i + this._step) {
                if (points.indexOf(i) < 0) {
                    points.push(i);
                }
            }
        }
        return points;
    };
    /**
     * @param {?} points
     * @return {?}
     */
    SliderSteps.prototype.getSteps = /**
     * @param {?} points
     * @return {?}
     */
    function (points) {
        var _this = this;
        /** @type {?} */
        var range = this._max - this._min;
        this.stepArray = [];
        points.map(function (point) {
            var _a;
            /** @type {?} */
            var stepItem = {
                stepStyle: {},
                stepClass: {},
                point: null
            };
            /** @type {?} */
            var offset = (Math.abs(point - _this._min) / range) * 100 + "%";
            /** @type {?} */
            var isActived = (!_this._included && point === _this._upperBound) ||
                (_this._included && point <= _this._upperBound && point >= _this._lowerBound);
            /** @type {?} */
            var style = tslib_1.__assign({ left: offset }, _this._dotStyle);
            if (isActived) {
                style = tslib_1.__assign({}, style, _this._activeDotStyle);
            }
            /** @type {?} */
            var pointClassName = (_a = {},
                _a[_this.prefixCls + "-dot"] = true,
                _a[_this.prefixCls + "-dot-active"] = isActived,
                _a);
            stepItem.point = point;
            stepItem.stepStyle = style;
            stepItem.stepClass = pointClassName;
            _this.stepArray.push(stepItem);
        });
    };
    /**
     * @return {?}
     */
    SliderSteps.prototype.setActiveCls = /**
     * @return {?}
     */
    function () {
        var _a;
        for (var i = 0; i < this.stepArray.length; i++) {
            /** @type {?} */
            var point = this.stepArray[i].point;
            /** @type {?} */
            var isActived = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.stepArray[i].stepClass = (_a = {},
                _a[this.prefixCls + "-dot"] = true,
                _a[this.prefixCls + "-dot-active"] = isActived,
                _a);
        }
    };
    /**
     * @return {?}
     */
    SliderSteps.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var points = this.calPoints();
        this.getSteps(points);
    };
    SliderSteps.decorators = [
        { type: Component, args: [{
                    selector: 'SliderSteps, nzm-slider-steps',
                    template: "<span *ngFor=\"let item of stepArray\"\n      [ngClass]=\"item.stepClass\"\n      [ngStyle]=\"item.stepStyle\">\n</span>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SliderSteps.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SliderSteps.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        marks: [{ type: Input }],
        step: [{ type: Input }],
        included: [{ type: Input }],
        dots: [{ type: Input }],
        upperBound: [{ type: Input }],
        lowerBound: [{ type: Input }],
        class: [{ type: HostBinding }]
    };
    return SliderSteps;
}());
export { SliderSteps };
if (false) {
    /** @type {?} */
    SliderSteps.prototype.prefixCls;
    /** @type {?} */
    SliderSteps.prototype.stepArray;
    /** @type {?} */
    SliderSteps.prototype._min;
    /** @type {?} */
    SliderSteps.prototype._max;
    /** @type {?} */
    SliderSteps.prototype._step;
    /** @type {?} */
    SliderSteps.prototype._marks;
    /** @type {?} */
    SliderSteps.prototype._included;
    /** @type {?} */
    SliderSteps.prototype._upperBound;
    /** @type {?} */
    SliderSteps.prototype._lowerBound;
    /** @type {?} */
    SliderSteps.prototype._dots;
    /** @type {?} */
    SliderSteps.prototype._dotStyle;
    /** @type {?} */
    SliderSteps.prototype._activeDotStyle;
    /** @type {?} */
    SliderSteps.prototype._elf;
}

//# sourceMappingURL=data:application/json;base64,