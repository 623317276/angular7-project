/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, Output, EventEmitter, HostBinding } from '@angular/core';
var NavBarComponent = /** @class */ (function () {
    function NavBarComponent() {
        this.defaultProps = {
            prefixCls: 'am-navbar',
            mode: 'dark',
            onLeftClick: function () { }
        };
        this.navbarCls = {};
        this.isIconString = true;
        this.isLeftContentString = true;
        this.isRightContentString = true;
        this.onLeftClick = new EventEmitter();
        this._amNavbar = true;
    }
    Object.defineProperty(NavBarComponent.prototype, "mode", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defaultProps.mode = value;
            this._amNavbarLight = this.defaultProps.mode === 'light';
            this._amNavbardark = this.defaultProps.mode === 'dark';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isIconString = false;
            }
            else {
                this.isIconString = true;
            }
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "leftContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._leftContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isLeftContentString = false;
            }
            else {
                this.isLeftContentString = true;
            }
            this._leftContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavBarComponent.prototype, "rightContent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rightContent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.isRightContentString = false;
            }
            else {
                this.isRightContentString = true;
            }
            this._rightContent = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NavBarComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLeftClick.emit(event);
    };
    NavBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Navbar, nzm-nav-bar',
                    template: "<div role=\"button\" class=\"{{defaultProps.prefixCls}}-left\" (click)=\"click($event)\">\n  <ng-template *ngIf=\"!isLeftContentString\" [ngTemplateOutlet]=\"leftContent\"></ng-template>\n  <span *ngIf=\"icon\" class=\"{{defaultProps.prefixCls}}-left-icon\" aria-hidden=\"true\">\n    <Icon *ngIf=\"isIconString\" [type]=\"icon\"></Icon>\n    <ng-template *ngIf=\"!isIconString\" [ngTemplateOutlet]=\"icon\"></ng-template>\n  </span>\n  {{isLeftContentString ? leftContent: null}}\n</div>\n<div class=\"{{defaultProps.prefixCls}}-title\">\n  <ng-content></ng-content>\n</div>\n<div class=\"{{defaultProps.prefixCls}}-right\">\n  {{isRightContentString ? rightContent: null}}\n  <ng-template *ngIf=\"!isRightContentString\" [ngTemplateOutlet]=\"rightContent\"></ng-template>\n</div>"
                }] }
    ];
    /** @nocollapse */
    NavBarComponent.ctorParameters = function () { return []; };
    NavBarComponent.propDecorators = {
        mode: [{ type: Input }],
        icon: [{ type: Input }],
        leftContent: [{ type: Input }],
        rightContent: [{ type: Input }],
        onLeftClick: [{ type: Output }],
        _amNavbar: [{ type: HostBinding, args: ['class.am-navbar',] }],
        _amNavbarLight: [{ type: HostBinding, args: ['class.am-navbar-light',] }],
        _amNavbardark: [{ type: HostBinding, args: ['class.am-navbar-dark',] }]
    };
    return NavBarComponent;
}());
export { NavBarComponent };
if (false) {
    /** @type {?} */
    NavBarComponent.prototype.defaultProps;
    /** @type {?} */
    NavBarComponent.prototype.navbarCls;
    /** @type {?} */
    NavBarComponent.prototype.isIconString;
    /** @type {?} */
    NavBarComponent.prototype.isLeftContentString;
    /** @type {?} */
    NavBarComponent.prototype.isRightContentString;
    /** @type {?} */
    NavBarComponent.prototype._icon;
    /** @type {?} */
    NavBarComponent.prototype._leftContent;
    /** @type {?} */
    NavBarComponent.prototype._rightContent;
    /** @type {?} */
    NavBarComponent.prototype.onLeftClick;
    /** @type {?} */
    NavBarComponent.prototype._amNavbar;
    /** @type {?} */
    NavBarComponent.prototype._amNavbarLight;
    /** @type {?} */
    NavBarComponent.prototype._amNavbardark;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbIm5hdi1iYXIvbmF2LWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUF5RS9GOzRCQWxFZTtZQUNiLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVyxFQUFFLGVBQVE7U0FDdEI7eUJBQ1csRUFBRTs0QkFDVSxJQUFJO21DQUNHLElBQUk7b0NBQ0gsSUFBSTsyQkFpREgsSUFBSSxZQUFZLEVBQUU7eUJBRy9CLElBQUk7S0FNUjtJQXBEaEIsc0JBQ0ksaUNBQUk7Ozs7O1FBRFIsVUFDUyxLQUFLO1lBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO1lBQ3pELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDO1NBQ3hEOzs7T0FBQTtJQUNELHNCQUNJLGlDQUFJOzs7O1FBRFI7WUFFRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7Ozs7O1FBQ0QsVUFBUyxLQUFnQztZQUN2QyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQzFCO1lBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDcEI7OztPQVJBO0lBU0Qsc0JBQ0ksd0NBQVc7Ozs7UUFEZjtZQUVFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMxQjs7Ozs7UUFDRCxVQUFnQixLQUFnQztZQUM5QyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7YUFDbEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQzNCOzs7T0FSQTtJQVNELHNCQUNJLHlDQUFZOzs7O1FBRGhCO1lBRUUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCOzs7OztRQUNELFVBQWlCLEtBQWdDO1lBQy9DLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2FBQ2xDO1lBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDNUI7OztPQVJBOzs7OztJQXFCRCwrQkFBSzs7OztJQUFMLFVBQU0sS0FBSztRQUNULElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlCOztnQkEzRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLHl4QkFBdUM7aUJBQ3hDOzs7Ozt1QkFnQkUsS0FBSzt1QkFNTCxLQUFLOzhCQVlMLEtBQUs7K0JBWUwsS0FBSzs4QkFZTCxNQUFNOzRCQUdOLFdBQVcsU0FBQyxpQkFBaUI7aUNBRTdCLFdBQVcsU0FBQyx1QkFBdUI7Z0NBRW5DLFdBQVcsU0FBQyxzQkFBc0I7OzBCQXRFckM7O1NBTWEsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnTmF2YmFyLCBuem0tbmF2LWJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXYtYmFyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOYXZCYXJDb21wb25lbnQge1xuICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcHJlZml4Q2xzOiAnYW0tbmF2YmFyJyxcbiAgICBtb2RlOiAnZGFyaycsXG4gICAgb25MZWZ0Q2xpY2s6ICgpID0+IHt9XG4gIH07XG4gIG5hdmJhckNscyA9IHt9O1xuICBpc0ljb25TdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBpc0xlZnRDb250ZW50U3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgaXNSaWdodENvbnRlbnRTdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIHByaXZhdGUgX2ljb246IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gIHByaXZhdGUgX2xlZnRDb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICBwcml2YXRlIF9yaWdodENvbnRlbnQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQElucHV0KClcbiAgc2V0IG1vZGUodmFsdWUpIHtcbiAgICB0aGlzLmRlZmF1bHRQcm9wcy5tb2RlID0gdmFsdWU7XG4gICAgdGhpcy5fYW1OYXZiYXJMaWdodCA9IHRoaXMuZGVmYXVsdFByb3BzLm1vZGUgPT09ICdsaWdodCc7XG4gICAgdGhpcy5fYW1OYXZiYXJkYXJrID0gdGhpcy5kZWZhdWx0UHJvcHMubW9kZSA9PT0gJ2RhcmsnO1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBpY29uKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9pY29uO1xuICB9XG4gIHNldCBpY29uKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuaXNJY29uU3RyaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNJY29uU3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5faWNvbiA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCBsZWZ0Q29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fbGVmdENvbnRlbnQ7XG4gIH1cbiAgc2V0IGxlZnRDb250ZW50KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuaXNMZWZ0Q29udGVudFN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzTGVmdENvbnRlbnRTdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9sZWZ0Q29udGVudCA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIGdldCByaWdodENvbnRlbnQoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3JpZ2h0Q29udGVudDtcbiAgfVxuICBzZXQgcmlnaHRDb250ZW50KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuaXNSaWdodENvbnRlbnRTdHJpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1JpZ2h0Q29udGVudFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3JpZ2h0Q29udGVudCA9IHZhbHVlO1xuICB9XG4gIEBPdXRwdXQoKVxuICBvbkxlZnRDbGljazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1uYXZiYXInKVxuICBwcml2YXRlIF9hbU5hdmJhciA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tbmF2YmFyLWxpZ2h0JylcbiAgcHJpdmF0ZSBfYW1OYXZiYXJMaWdodDtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1uYXZiYXItZGFyaycpXG4gIHByaXZhdGUgX2FtTmF2YmFyZGFyaztcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgY2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLm9uTGVmdENsaWNrLmVtaXQoZXZlbnQpO1xuICB9XG59XG4iXX0=