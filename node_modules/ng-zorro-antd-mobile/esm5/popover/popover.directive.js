/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, TemplateRef } from '@angular/core';
import { PopoverComponent } from './popover.component';
import { PopoverOptions } from './popover-options.provider';
import { PopoverComponentOptions } from './popover-component-options.provider';
import * as Positioning from '../core/util/position';
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onSelect = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PopoverDirective.prototype.togglePopover = /**
     * @return {?}
     */
    function () {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    };
    /**
     * @param {?} placement
     * @return {?}
     */
    PopoverDirective.prototype.positionMap = /**
     * @param {?} placement
     * @return {?}
     */
    function (placement) {
        switch (placement) {
            case 'topLeft':
                return 'top-left';
            case 'topRight':
                return 'top-right';
            case 'bottomLeft':
                return 'bottom-left';
            case 'bottomRight':
                return 'bottom-right';
            case 'leftTop':
                return 'left-top';
            case 'leftBottom':
                return 'left-bottom';
            case 'rightTop':
                return 'right-top';
            case 'rightBottom':
                return 'right-bottom';
            case 'fullScreen':
            case 'landScape':
                return 'bottom';
            default:
                return placement;
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopoverDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes["visible"] && changes["visible"].currentValue) {
            setTimeout(function () {
                _this.showPopover();
            }, 0);
        }
        else {
            setTimeout(function () {
                _this.hidePopover();
            }, 0);
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hidePopover();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PopoverDirective.prototype.onDocumentClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.popover &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target)) {
            this.hidePopover();
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.showPopover = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.popover) {
            setTimeout(function () {
                _this._eventListeners = [
                    _this._renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('window', 'resize', function () { return _this.positionPopover(); })
                ];
            });
            /** @type {?} */
            var options_1 = new PopoverComponentOptions();
            options_1.placement = this.placement;
            Object.assign(options_1, this._defaultOptions, {
                hidePopover: function (event) {
                    _this.hidePopover();
                },
                onAfterViewInit: function () {
                    _this.positionPopover();
                    /** @type {?} */
                    var children = document.getElementsByClassName('am-popover-inner-wrapper')[0].children;
                    if (children.length > 0) {
                        var _loop_1 = function (i) {
                            children[i].id = "" + i;
                            children[i].addEventListener('click', function () {
                                if (_this.onSelect) {
                                    _this.onSelect.emit(children[i]);
                                    if (options_1.autoClose) {
                                        _this.hidePopover();
                                    }
                                }
                            }, false);
                        };
                        // 首先我们检查它是否包含子节点
                        for (var i = 0; i < children.length; i++) {
                            _loop_1(i);
                        }
                    }
                }
            });
            /** @type {?} */
            var optionalParams = [
                'mask',
                'showArrow',
                'placement',
                'appendToBody',
                'overlay',
                'className',
                'autoClose'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    (/** @type {?} */ (options_1))[param] = _this[param];
                }
            });
            /** @type {?} */
            var componentFactory = this._cfr.resolveComponentFactory(PopoverComponent);
            /** @type {?} */
            var childInjector = Injector.create([
                {
                    provide: PopoverComponentOptions,
                    useValue: options_1
                }
            ], this._viewContainerRef.parentInjector);
            this.popover = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.positionPopover = /**
     * @return {?}
     */
    function () {
        if (this.popover) {
            /** @type {?} */
            var popoverElement = this.popover.location.nativeElement.children[1];
            /** @type {?} */
            var popoverPosition = Positioning.getPositionElements(this._elm.nativeElement, popoverElement, this.positionMap(this.placement) || this._defaultOptions.placement, this.appendToBody || this._defaultOptions.appendToBody);
            if (this.placement === 'landScape') {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else if (this.placement === 'fullScreen') {
                this._renderer.setStyle(popoverElement, 'top', 0 + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', popoverPosition.left + "px");
            }
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.hidePopover = /**
     * @return {?}
     */
    function () {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    PopoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[Popover], [nzm-popover]',
                    providers: [PopoverOptions]
                },] }
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: PopoverOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 }
    ]; };
    PopoverDirective.propDecorators = {
        mask: [{ type: Input }],
        showArrow: [{ type: Input }],
        visible: [{ type: Input }],
        placement: [{ type: Input }],
        overlay: [{ type: Input }],
        onVisibleChange: [{ type: Output }],
        onSelect: [{ type: Output }],
        appendToBody: [{ type: Input }],
        className: [{ type: Input }],
        autoClose: [{ type: Input }],
        togglePopover: [{ type: HostListener, args: ['click',] }]
    };
    return PopoverDirective;
}());
export { PopoverDirective };
if (false) {
    /** @type {?} */
    PopoverDirective.prototype.popover;
    /** @type {?} */
    PopoverDirective.prototype._eventListeners;
    /** @type {?} */
    PopoverDirective.prototype.mask;
    /** @type {?} */
    PopoverDirective.prototype.showArrow;
    /** @type {?} */
    PopoverDirective.prototype.visible;
    /** @type {?} */
    PopoverDirective.prototype.placement;
    /** @type {?} */
    PopoverDirective.prototype.overlay;
    /** @type {?} */
    PopoverDirective.prototype.onVisibleChange;
    /** @type {?} */
    PopoverDirective.prototype.onSelect;
    /** @type {?} */
    PopoverDirective.prototype.appendToBody;
    /** @type {?} */
    PopoverDirective.prototype.className;
    /** @type {?} */
    PopoverDirective.prototype.autoClose;
    /** @type {?} */
    PopoverDirective.prototype._viewContainerRef;
    /** @type {?} */
    PopoverDirective.prototype._elm;
    /** @type {?} */
    PopoverDirective.prototype._defaultOptions;
    /** @type {?} */
    PopoverDirective.prototype._cfr;
    /** @type {?} */
    PopoverDirective.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,