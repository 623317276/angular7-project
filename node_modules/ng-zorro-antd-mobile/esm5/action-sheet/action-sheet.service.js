/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { ActionSheetComponent } from './action-sheet.component';
import { ActionSheetOptions } from './action-sheet-options.provider';
/** @type {?} */
var NORMAL = 'NORMAL';
/** @type {?} */
var SHARE = 'SHARE';
/**
 * @return {?}
 */
function noop() { }
var ActionSheet = /** @class */ (function () {
    function ActionSheet(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        ActionSheet.appRef = this._appRef;
        ActionSheet._actionSheetCompFactory = this._cfr.resolveComponentFactory(ActionSheetComponent);
    }
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    ActionSheet._initConfig = /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    function (config, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var props = new ActionSheetOptions();
        /** @type {?} */
        var optionalParams = [
            'prefixCls',
            'maskClosable',
            'cancelButtonIndex',
            'destructiveButtonIndex',
            'title',
            'message',
            'className',
            'transitionName',
            'maskTransitionName',
            'options'
        ];
        config = Object.assign(options, config);
        optionalParams.forEach(function (key) {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        return props;
    };
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    ActionSheet._open = /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    function (props, factory) {
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        /** @type {?} */
        var subject;
        ActionSheet.compRef = ActionSheet.appRef.bootstrap(factory);
        ActionSheet.instance = ActionSheet.compRef.instance;
        subject = ActionSheet.instance.subject;
        Object.assign(ActionSheet.instance, props);
        return subject;
    };
    /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    ActionSheet.createActionSheet = /**
     * @param {?} flag
     * @param {?} config
     * @param {?} callback
     * @return {?}
     */
    function (flag, config, callback) {
        /** @type {?} */
        var options = new ActionSheetOptions();
        /** @type {?} */
        var transitionName = config.transitionName ? config.transitionName : options.transitionName;
        options.transitionName = transitionName + "-enter " + transitionName + "-enter-active";
        /** @type {?} */
        var maskTransitionName = config.maskTransitionName ? config.maskTransitionName : options.maskTransitionName;
        options.maskTransitionName = maskTransitionName + "-enter " + maskTransitionName + "-enter-active";
        /** @type {?} */
        var props = ActionSheet._initConfig(config, options);
        Object.assign(props, { onPress: cb }, { flag: flag });
        /**
         * @param {?} index
         * @param {?=} rowIndex
         * @param {?=} event
         * @return {?}
         */
        function cb(index, rowIndex, event) {
            if (rowIndex === void 0) { rowIndex = 0; }
            event.stopPropagation();
            /** @type {?} */
            var res = callback(index, rowIndex);
            if (res && res.then) {
                res.then(function () {
                    ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
                });
            }
            else {
                ActionSheet.closeWithAnimation(transitionName, maskTransitionName);
            }
        }
        return ActionSheet._open(props, ActionSheet._actionSheetCompFactory);
    };
    /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    ActionSheet.closeWithAnimation = /**
     * @param {?} transitionName
     * @param {?} maskTransitionName
     * @return {?}
     */
    function (transitionName, maskTransitionName) {
        ActionSheet.instance.transitionName = transitionName + "-leave " + transitionName + "-leave-active";
        ActionSheet.instance.maskTransitionName = maskTransitionName + "-leave " + maskTransitionName + "-leave-active";
        setTimeout(function () {
            ActionSheet.close();
        }, 200);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheet.showActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheet.createActionSheet(NORMAL, config, callback);
    };
    /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    ActionSheet.showShareActionSheetWithOptions = /**
     * @param {?} config
     * @param {?=} callback
     * @return {?}
     */
    function (config, callback) {
        if (callback === void 0) { callback = noop; }
        ActionSheet.createActionSheet(SHARE, config, callback);
    };
    /**
     * @return {?}
     */
    ActionSheet.close = /**
     * @return {?}
     */
    function () {
        if (ActionSheet.compRef) {
            ActionSheet.compRef.destroy();
            ActionSheet.compRef = null;
        }
    };
    ActionSheet.compRef = null;
    ActionSheet._actionSheetCompFactory = null;
    ActionSheet.appRef = null;
    ActionSheet.instance = null;
    ActionSheet.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActionSheet.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver }
    ]; };
    return ActionSheet;
}());
export { ActionSheet };
if (false) {
    /** @type {?} */
    ActionSheet.compRef;
    /** @type {?} */
    ActionSheet._actionSheetCompFactory;
    /** @type {?} */
    ActionSheet.appRef;
    /** @type {?} */
    ActionSheet.instance;
    /** @type {?} */
    ActionSheet.prototype._appRef;
    /** @type {?} */
    ActionSheet.prototype._cfr;
}

//# sourceMappingURL=data:application/json;base64,