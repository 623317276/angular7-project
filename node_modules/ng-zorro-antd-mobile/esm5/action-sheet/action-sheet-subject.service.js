/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/** @enum {number} */
var actionSheetEvent = {
    onShow: 0,
    onShown: 1,
    onHide: 2,
    onHidden: 3,
    onOk: 4,
    onCancel: 5,
    onDestroy: 6,
};
var ActionSheetSubject = /** @class */ (function (_super) {
    tslib_1.__extends(ActionSheetSubject, _super);
    function ActionSheetSubject() {
        var _this = _super.call(this) || this;
        _this._eventsQueue = {};
        _this.subscribe(function (value) {
            /** @type {?} */
            var eventQueue = _this._eventsQueue[value] || [];
            eventQueue.forEach(function (cb) {
                if (cb !== null && cb !== undefined) {
                    cb();
                }
            });
        });
        return _this;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    ActionSheetSubject.prototype.destroy = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'onCancel'; }
        if (!this.isStopped && !this.closed) {
            this.next(type);
        }
    };
    /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    ActionSheetSubject.prototype.on = /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    function (eventType, cb) {
        if (this._eventsQueue[eventType]) {
            this._eventsQueue[eventType].push(cb);
        }
        else {
            this._eventsQueue[eventType] = [cb];
        }
    };
    ActionSheetSubject.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActionSheetSubject.ctorParameters = function () { return []; };
    return ActionSheetSubject;
}(Subject));
export { ActionSheetSubject };
if (false) {
    /** @type {?} */
    ActionSheetSubject.prototype.modalId;
    /** @type {?} */
    ActionSheetSubject.prototype._eventsQueue;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LXN1YmplY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC1zdWJqZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7OztJQUk3QixTQUFNO0lBQ04sVUFBTztJQUNQLFNBQU07SUFDTixXQUFRO0lBQ1IsT0FBSTtJQUNKLFdBQVE7SUFDUixZQUFTOzs7SUFJNkIsOENBQVk7SUFJbEQ7UUFBQSxZQUNFLGlCQUFPLFNBU1I7NkJBWnNCLEVBQUU7UUFJdkIsS0FBSSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQWE7O1lBQzNCLElBQU0sVUFBVSxHQUFvQixLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuRSxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTtnQkFDbkIsSUFBSSxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7b0JBQ25DLEVBQUUsRUFBRSxDQUFDO2lCQUNOO2FBQ0YsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDOztLQUNKOzs7OztJQUVELG9DQUFPOzs7O0lBQVAsVUFBUSxJQUFzQjtRQUF0QixxQkFBQSxFQUFBLGlCQUFzQjtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjtLQUNGOzs7Ozs7SUFFRCwrQkFBRTs7Ozs7SUFBRixVQUFHLFNBQWlCLEVBQUUsRUFBWTtRQUNoQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQztLQUNGOztnQkE3QkYsVUFBVTs7Ozs2QkFkWDtFQWV3QyxPQUFPO1NBQWxDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLyog5LqL5Lu25p6a5Li+ICovXG5jb25zdCBlbnVtIGFjdGlvblNoZWV0RXZlbnQge1xuICBvblNob3csXG4gIG9uU2hvd24sXG4gIG9uSGlkZSxcbiAgb25IaWRkZW4sXG4gIG9uT2ssXG4gIG9uQ2FuY2VsLFxuICBvbkRlc3Ryb3lcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvblNoZWV0U3ViamVjdCBleHRlbmRzIFN1YmplY3Q8YW55PiB7XG4gIG1vZGFsSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfZXZlbnRzUXVldWUgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3Vic2NyaWJlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBldmVudFF1ZXVlOiBBcnJheTxGdW5jdGlvbj4gPSB0aGlzLl9ldmVudHNRdWV1ZVt2YWx1ZV0gfHwgW107XG4gICAgICBldmVudFF1ZXVlLmZvckVhY2goY2IgPT4ge1xuICAgICAgICBpZiAoY2IgIT09IG51bGwgJiYgY2IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSh0eXBlOiBhbnkgPSAnb25DYW5jZWwnKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgIHRoaXMubmV4dCh0eXBlKTtcbiAgICB9XG4gIH1cblxuICBvbihldmVudFR5cGU6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0ucHVzaChjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2V2ZW50c1F1ZXVlW2V2ZW50VHlwZV0gPSBbY2JdO1xuICAgIH1cbiAgfVxufVxuIl19