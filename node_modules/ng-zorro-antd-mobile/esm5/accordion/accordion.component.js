/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ContentChildren, Component, QueryList, Input, forwardRef, HostListener, Output, EventEmitter, HostBinding } from '@angular/core';
import { AccordionService } from './accordion.service';
import { AccordionGroupComponent } from './accordion-group/accordion-group.component';
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(_accordionService) {
        this._accordionService = _accordionService;
        this.expandAll = false;
        this.openAnimation = {};
        this.accordion = false;
        this.onChange = new EventEmitter();
        this.amAccordion = true;
        this._accordionService.getComponent(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AccordionComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var result = [];
        this.groups.toArray().forEach(function (group) {
            if (group.isOpened) {
                if (_this.accordion) {
                    result = group.key;
                }
                else {
                    result.push(group.key);
                }
            }
        });
        this.onChange.emit(result);
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.closeAll = /**
     * @return {?}
     */
    function () {
        this.groups.toArray().forEach(function (group) {
            group.isOpened = false;
        });
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expandAll && this.groups && this.groups.length > 0) {
            this._oldGroups = this.groups.toArray();
            this._oldGroups.forEach(function (group, index) {
                group.openOnInitialization();
            });
            this._subscription = this.groups.changes.subscribe(function (change) {
                /** @type {?} */
                var newGroups = _this.groups.toArray().filter(function (group) {
                    return _this._oldGroups.indexOf(group) === -1;
                });
                newGroups.forEach(function (group) {
                    group.openOnInitialization();
                });
                _this._oldGroups = _this.groups.toArray();
            });
        }
        /** @type {?} */
        var currentActiveKey = [];
        if (this.activeKey !== undefined && this.activeKey.length > 0 && !this.accordion && this.groups && this.groups.length > 0) {
            currentActiveKey = this.toArray(this.activeKey);
            this.groups.forEach(function (group, index) {
                currentActiveKey.forEach(function (key) {
                    if (index === parseInt(key, 0)) {
                        setTimeout(function () {
                            group.isOpened = true;
                        }, 0);
                    }
                });
            });
        }
        else if (this.defaultActiveKey !== undefined && !this.expandAll && !this.accordion && this.groups && this.groups.length > 0) {
            this.groups.forEach(function (group, index) {
                if (index === parseInt(_this.defaultActiveKey, 0)) {
                    setTimeout(function () {
                        group.isOpened = true;
                    }, 0);
                }
            });
        }
    };
    /**
     * @param {?} activeKey
     * @return {?}
     */
    AccordionComponent.prototype.toArray = /**
     * @param {?} activeKey
     * @return {?}
     */
    function (activeKey) {
        /** @type {?} */
        var currentActiveKey = activeKey;
        if (!Array.isArray(currentActiveKey)) {
            currentActiveKey = currentActiveKey !== undefined && currentActiveKey !== '' ? [currentActiveKey] : [];
        }
        return currentActiveKey;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AccordionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["accordion"]) {
            this._accordionService.getComponent(this);
        }
        if (changes["expandAll"] || changes["accordion"]) {
            this.init();
        }
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Accordion, nzm-accordion',
                    template: "<ng-content></ng-content>",
                    providers: [AccordionService]
                }] }
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return [
        { type: AccordionService }
    ]; };
    AccordionComponent.propDecorators = {
        groups: [{ type: ContentChildren, args: [forwardRef(function () { return AccordionGroupComponent; }),] }],
        expandAll: [{ type: Input }],
        activeKey: [{ type: Input }],
        defaultActiveKey: [{ type: Input }],
        openAnimation: [{ type: Input }],
        accordion: [{ type: Input }],
        onChange: [{ type: Output }],
        amAccordion: [{ type: HostBinding, args: ['class.am-accordion',] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return AccordionComponent;
}());
export { AccordionComponent };
if (false) {
    /** @type {?} */
    AccordionComponent.prototype._oldGroups;
    /** @type {?} */
    AccordionComponent.prototype._subscription;
    /** @type {?} */
    AccordionComponent.prototype.groups;
    /** @type {?} */
    AccordionComponent.prototype.expandAll;
    /** @type {?} */
    AccordionComponent.prototype.activeKey;
    /** @type {?} */
    AccordionComponent.prototype.defaultActiveKey;
    /** @type {?} */
    AccordionComponent.prototype.openAnimation;
    /** @type {?} */
    AccordionComponent.prototype.accordion;
    /** @type {?} */
    AccordionComponent.prototype.onChange;
    /** @type {?} */
    AccordionComponent.prototype.amAccordion;
    /** @type {?} */
    AccordionComponent.prototype._accordionService;
}

//# sourceMappingURL=data:application/json;base64,