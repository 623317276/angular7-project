/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ViewContainerRef, ViewChild, HostListener, Component, TemplateRef, Input, EventEmitter, Output, ViewEncapsulation, HostBinding } from '@angular/core';
/**
 * @record
 */
export function Indicator() { }
/** @type {?|undefined} */
Indicator.prototype.activate;
/** @type {?|undefined} */
Indicator.prototype.deactivate;
/** @type {?|undefined} */
Indicator.prototype.release;
/** @type {?|undefined} */
Indicator.prototype.finish;
var PullToRefreshComponent = /** @class */ (function () {
    function PullToRefreshComponent() {
        this.transtionCls = {};
        this.style = {
            '-webkit-transform': 'translate3d( 0, 0, 0 )',
            transform: 'translate3d( 0, 0, 0 )'
        };
        this.state = {
            currSt: 'deactivate',
            drag: false
        };
        this._indicator = {
            activate: '松开立即刷新',
            deactivate: '下拉可以刷新',
            release: '刷新中。。。',
            finish: '完成刷新'
        };
        this._direction = 'down';
        this._clientHeight = 0;
        this._currentContentHeight = 0;
        this._footerHeight = 54;
        this._lastcontentOffset = 0;
        this._viewHeight = Math.max(window.innerHeight, window.innerWidth);
        this.scrollRefresh = false;
        this.distanceToRefresh = 25;
        this.damping = 100;
        this.footerRefresh = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.refresh = true;
        this.container = true;
        this.refreshUp = false;
        this.refreshDown = true;
    }
    Object.defineProperty(PullToRefreshComponent.prototype, "direction", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this.refreshUp = this._direction === 'up';
            this.refreshDown = this._direction === 'down';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PullToRefreshComponent.prototype, "indicator", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indicator;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._indicator.activate = value.activate ? value.activate : this._indicator.activate;
            this._indicator.deactivate = value.deactivate ? value.deactivate : this._indicator.deactivate;
            this._indicator.release = value.release ? value.release : this._indicator.release;
            this._indicator.finish = value.finish ? value.finish : this._indicator.finish;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchstart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._direction === 'down') {
            if (document.getElementsByTagName('pulltorefresh')[0].scrollTop > 0) {
                this.startY = undefined;
                return;
            }
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this.state.drag = undefined;
        }
        else {
            this.startY = e && e.changedTouches && e.changedTouches[0] && e.changedTouches[0].clientY;
            this._clientHeight = this._pullToRefresh.element.nativeElement.clientHeight;
            this._currentContentHeight = document.getElementsByTagName('pulltorefresh')[0].clientHeight;
        }
        this.transtionCls = '';
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchmove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._direction === 'down') {
            if (!this.startY) {
                return;
            }
            /** @type {?} */
            var distanceY = e.changedTouches[0].clientY - this.startY;
            if (distanceY < 0) {
                // 滚动
                this.state.drag = false;
            }
            else {
                // 下拉
                this.state.drag = true;
            }
            if (this.state.drag) {
                // 禁止滚动
                e.preventDefault();
            }
            else {
                return;
            }
            if (distanceY > this.damping) {
                //当超过设定阈值是，缓慢增加
                distanceY = (distanceY / (distanceY + this.damping)) * this.damping * 2;
            }
            else if (distanceY < 0) {
                distanceY = 0;
            }
            if (distanceY > this.distanceToRefresh) {
                this.state.currSt = 'activate';
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
        else {
            /** @type {?} */
            var distanceY = e.changedTouches[0].clientY - this.startY;
            //向上拉动的时候，如果当前窗口内容没有滚到最后，则不实现拖动的动作；向下滚动不实现拖动动作
            if (Math.abs(this._lastcontentOffset) <= this._clientHeight - this._currentContentHeight - this.distanceToRefresh ||
                distanceY > 0) {
                // 滚动
                this.state.drag = false;
            }
            else {
                // 上拉
                this.state.drag = true;
            }
            if (this.state.drag) {
                // 禁止滚动
                e.preventDefault();
            }
            else {
                return;
            }
            //如果滑动到底部了，滑动距离随着拉动的距离增加缓慢增加
            distanceY = -(distanceY / (distanceY - this.damping)) * this.damping;
            if (Math.abs(distanceY) > this.distanceToRefresh) {
                this.state.currSt = 'activate';
            }
            this.style = {
                '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
                transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
            };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchend = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (!this.startY || this.state.drag === false) {
            return;
        }
        /** @type {?} */
        var distanceY = e.changedTouches[0].clientY - this.startY;
        if (Math.abs(distanceY) >= this.distanceToRefresh) {
            this.state.currSt = 'release';
            if (this._direction === 'down') {
                this.translateY(this.distanceToRefresh + 1);
            }
            else {
                this.translateY(-this.distanceToRefresh - 1);
            }
            setTimeout(function () {
                _this.state.currSt = 'finish';
                _this.onRefresh.emit();
                setTimeout(function () {
                    _this.state.currSt = 'deactivate';
                    _this.translateY(0);
                }, 0);
            }, 500);
        }
        else {
            this.translateY(0);
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    PullToRefreshComponent.prototype.touchcancel = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        this.translateY(0);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    PullToRefreshComponent.prototype.scroll = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        /** @type {?} */
        var contentOffset = evt.target.scrollTop;
        /** @type {?} */
        var offset = contentOffset - this._lastcontentOffset;
        this._lastcontentOffset = contentOffset;
        if (!this.scrollRefresh) {
            return;
        }
        if (offset > 0 &&
            contentOffset > 0 &&
            evt.target.scrollTop + this._viewHeight > evt.target.scrollHeight - this._footerHeight / 2) {
            setTimeout(function () {
                _this.footerRefresh.emit('finished');
            }, 500);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PullToRefreshComponent.prototype.isTemplateRef = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
    };
    /**
     * @param {?} distanceY
     * @return {?}
     */
    PullToRefreshComponent.prototype.translateY = /**
     * @param {?} distanceY
     * @return {?}
     */
    function (distanceY) {
        this.transtionCls = 'am-pull-to-refresh-transition';
        this.style = {
            '-webkit-transform': 'translate3d( 0, ' + distanceY + 'px, 0 )',
            transform: 'translate3d( 0, ' + distanceY + 'px, 0 )'
        };
    };
    PullToRefreshComponent.decorators = [
        { type: Component, args: [{
                    selector: 'PullToRefresh, nzm-pull-to-refresh',
                    template: "<div class=\"am-pull-to-refresh-content-wrapper\">\n  <div class=\"am-pull-to-refresh-content\" [ngClass]=\"transtionCls\" [ngStyle]=\"style\">\n    <div *ngIf=\"direction === 'down'\" class=\"am-pull-to-refresh-indicator\">\n      <ng-template *ngIf=\"isTemplateRef(indicator[state.currSt])\" [ngTemplateOutlet]=\"indicator[state.currSt]\"></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(indicator[state.currSt])\">{{indicator[state.currSt]}}</ng-container>\n    </div>\n    <div #pullToRefresh>\n      <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"direction === 'up'\" class=\"am-pull-to-refresh-indicator\">\n      <ng-template *ngIf=\"isTemplateRef(indicator[state.currSt])\" [ngTemplateOutlet]=\"indicator[state.currSt]\"></ng-template>\n      <ng-container *ngIf=\"!isTemplateRef(indicator[state.currSt])\">{{indicator[state.currSt]}}</ng-container>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PullToRefreshComponent.ctorParameters = function () { return []; };
    PullToRefreshComponent.propDecorators = {
        _pullToRefresh: [{ type: ViewChild, args: ['pullToRefresh', { read: ViewContainerRef },] }],
        scrollRefresh: [{ type: Input }],
        distanceToRefresh: [{ type: Input }],
        damping: [{ type: Input }],
        direction: [{ type: Input }],
        indicator: [{ type: Input }],
        footerRefresh: [{ type: Output }],
        onRefresh: [{ type: Output }],
        refresh: [{ type: HostBinding, args: ['class.am-pull-to-refresh',] }],
        container: [{ type: HostBinding, args: ['class.super-container',] }],
        refreshUp: [{ type: HostBinding, args: ['class.am-pull-to-refresh-up',] }],
        refreshDown: [{ type: HostBinding, args: ['class.am-pull-to-refresh-down',] }],
        touchstart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        touchmove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        touchend: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        touchcancel: [{ type: HostListener, args: ['touchcancel', ['$event'],] }],
        scroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return PullToRefreshComponent;
}());
export { PullToRefreshComponent };
if (false) {
    /** @type {?} */
    PullToRefreshComponent.prototype.transtionCls;
    /** @type {?} */
    PullToRefreshComponent.prototype.style;
    /** @type {?} */
    PullToRefreshComponent.prototype.startY;
    /** @type {?} */
    PullToRefreshComponent.prototype.state;
    /** @type {?} */
    PullToRefreshComponent.prototype._indicator;
    /** @type {?} */
    PullToRefreshComponent.prototype._direction;
    /** @type {?} */
    PullToRefreshComponent.prototype._clientHeight;
    /** @type {?} */
    PullToRefreshComponent.prototype._currentContentHeight;
    /** @type {?} */
    PullToRefreshComponent.prototype._footerHeight;
    /** @type {?} */
    PullToRefreshComponent.prototype._lastcontentOffset;
    /** @type {?} */
    PullToRefreshComponent.prototype._viewHeight;
    /** @type {?} */
    PullToRefreshComponent.prototype._pullToRefresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.scrollRefresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.distanceToRefresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.damping;
    /** @type {?} */
    PullToRefreshComponent.prototype.footerRefresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.onRefresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.refresh;
    /** @type {?} */
    PullToRefreshComponent.prototype.container;
    /** @type {?} */
    PullToRefreshComponent.prototype.refreshUp;
    /** @type {?} */
    PullToRefreshComponent.prototype.refreshDown;
}

//# sourceMappingURL=data:application/json;base64,