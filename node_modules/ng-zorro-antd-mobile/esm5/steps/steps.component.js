/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { StatusEnum, DirectionEnum } from './step/step.component';
import { Step } from './step/step.component';
var Steps = /** @class */ (function () {
    function Steps(_elf, _render) {
        this._elf = _elf;
        this._render = _render;
        this.prefixCls = 'am-steps';
        this._current = 0;
        this._status = StatusEnum.PROCESS;
        this._direction = DirectionEnum.VERTICAL;
        this.clsSteps = true;
    }
    Object.defineProperty(Steps.prototype, "current", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value >= 0) {
                this._current = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "size", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "status", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = value;
            if (this.stepItems) {
                this.setStepStyle();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Steps.prototype, "direction", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this.setCls();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Steps.prototype.setStepStyle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var itemCount = this.stepItems.length;
        /** @type {?} */
        var itemArr = this.stepItems['_results'];
        for (var index = 0; index < itemCount; index++) {
            /** @type {?} */
            var step = itemArr[index];
            step.stepNumber = index + 1;
            if (index < itemCount - 1 && itemArr[index + 1].status === StatusEnum.ERROR) {
                step.stepItemCls = step.stepItemCls
                    ? Object.assign(step.stepItemCls, { 'error-tail': true })
                    : { 'error-tail': true };
            }
            /** @type {?} */
            var icon = step.icon;
            if (!step.status) {
                if (index === this._current) {
                    step.status = this._status;
                }
                else if (index < this._current) {
                    step.status = StatusEnum.FINISH;
                }
                else {
                    step.status = StatusEnum.WAIT;
                }
            }
            if (!icon) {
                if (index < this._current) {
                    icon = 'check-circle-o';
                }
                else if (index > this._current) {
                    icon = 'ellipsis';
                    step.stepItemCls = step.stepItemCls
                        ? Object.assign(step.stepItemCls, { 'ellipsis-item': true })
                        : { 'ellipsis-item': true };
                }
                if ((this._status === StatusEnum.ERROR && index === this._current) || step.status === StatusEnum.ERROR) {
                    icon = 'cross-circle-o';
                }
            }
            step.icon = icon;
            step.iconSize = this._size === 'small' ? (this._status === StatusEnum.WAIT ? 'xxs' : 'xs') : 'md';
            step.setClass();
        }
    };
    /**
     * @return {?}
     */
    Steps.prototype.setCls = /**
     * @return {?}
     */
    function () {
        if (this._direction === DirectionEnum.HORIZONTAL) {
            this.clsStepsLabelVtl = true;
            this.clsStepsHztl = true;
            this.clsStepsVtl = false;
        }
        else if (this._direction === DirectionEnum.VERTICAL) {
            this.clsStepsVtl = true;
            this.clsStepsHztl = false;
        }
        if (this._size === 'small') {
            this.clsStepsSmall = true;
        }
        else {
            this.clsStepsSmall = false;
        }
    };
    /**
     * @return {?}
     */
    Steps.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setCls();
    };
    /**
     * @return {?}
     */
    Steps.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.setStepStyle();
        }, 0);
    };
    Steps.decorators = [
        { type: Component, args: [{
                    selector: 'Steps,nzm-steps',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    Steps.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    Steps.propDecorators = {
        stepItems: [{ type: ContentChildren, args: [Step,] }],
        current: [{ type: Input }],
        size: [{ type: Input }],
        status: [{ type: Input }],
        direction: [{ type: Input }],
        clsSteps: [{ type: HostBinding, args: ['class.am-steps',] }],
        clsStepsSmall: [{ type: HostBinding, args: ['class.am-steps-small',] }],
        clsStepsLabelVtl: [{ type: HostBinding, args: ['class.am-steps-label-vertical',] }],
        clsStepsVtl: [{ type: HostBinding, args: ['class.am-steps-vertical',] }],
        clsStepsHztl: [{ type: HostBinding, args: ['class.am-steps-horizontal',] }]
    };
    return Steps;
}());
export { Steps };
if (false) {
    /** @type {?} */
    Steps.prototype.prefixCls;
    /** @type {?} */
    Steps.prototype._current;
    /** @type {?} */
    Steps.prototype._size;
    /** @type {?} */
    Steps.prototype._status;
    /** @type {?} */
    Steps.prototype._direction;
    /** @type {?} */
    Steps.prototype._stepsCls;
    /** @type {?} */
    Steps.prototype.stepItems;
    /** @type {?} */
    Steps.prototype.clsSteps;
    /** @type {?} */
    Steps.prototype.clsStepsSmall;
    /** @type {?} */
    Steps.prototype.clsStepsLabelVtl;
    /** @type {?} */
    Steps.prototype.clsStepsVtl;
    /** @type {?} */
    Steps.prototype.clsStepsHztl;
    /** @type {?} */
    Steps.prototype._elf;
    /** @type {?} */
    Steps.prototype._render;
}

//# sourceMappingURL=data:application/json;base64,