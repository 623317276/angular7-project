/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from '@angular/core';
var ActivityIndicator = /** @class */ (function () {
    function ActivityIndicator() {
        this.prefixCls = 'am-activity-indicator';
        this.spinnerClass = {};
        this._size = 'small';
        this._toast = false;
        this._animating = true;
        this.clsActIndicator = true;
    }
    Object.defineProperty(ActivityIndicator.prototype, "animating", {
        get: /**
         * @return {?}
         */
        function () {
            return this._animating;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._animating = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "size", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._size = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "toast", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toast;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._toast = v;
            this.setClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityIndicator.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._text = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivityIndicator.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this._animating) {
            this.clsActIndicator = true;
            this.clsActIndicatorToast = !!this._toast;
            this.clsActIndicatorLg = this._size === 'large';
            this.clsActIndicatorSm = this._size === 'small';
            this.spinnerClass = (_a = {},
                _a[this.prefixCls + "-spinner"] = true,
                _a[this.prefixCls + "-spinner-lg"] = !!this._toast || this._size === 'large',
                _a);
        }
        else {
            this.clsActIndicator = false;
            this.clsActIndicatorLg = false;
            this.clsActIndicatorSm = false;
            this.clsActIndicatorToast = false;
        }
    };
    /**
     * @return {?}
     */
    ActivityIndicator.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClass();
    };
    ActivityIndicator.decorators = [
        { type: Component, args: [{
                    selector: 'ActivityIndicator , nzm-ctivity-indicator',
                    template: "<div *ngIf=\"animating && toast && text && text.length>0\">\n  <div class=\"{{prefixCls}}-content\">\n    <span [ngClass]=\"spinnerClass\" aria-hidden=\"'true'\"></span>\n    <span class=\"{{prefixCls}}-toast\">{{text}}</span>\n  </div>\n</div>\n<div *ngIf=\"animating && toast && !text\">\n  <div class=\"{{prefixCls}}-content\">\n    <span [ngClass]=\"spinnerClass\" aria-label=\"'Loading'\"></span>\n  </div>\n</div>\n<div *ngIf=\"animating && !toast && text && text.length>0\">\n  <span [ngClass]=\"spinnerClass\" aria-hidden=\"true\"></span>\n  <span class=\"{{prefixCls}}-tip\">{{text}}</span>\n</div>\n<div *ngIf=\"animating &&! toast && !text\">\n  <span [ngClass]=\"spinnerClass\" aria-label=\"'loading'\"></span>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ActivityIndicator.ctorParameters = function () { return []; };
    ActivityIndicator.propDecorators = {
        animating: [{ type: Input }],
        size: [{ type: Input }],
        toast: [{ type: Input }],
        text: [{ type: Input }],
        clsActIndicator: [{ type: HostBinding, args: ['class.am-activity-indicator',] }],
        clsActIndicatorToast: [{ type: HostBinding, args: ['class.am-activity-indicator-toast',] }],
        clsActIndicatorLg: [{ type: HostBinding, args: ['class.am-activity-indicator-lg',] }],
        clsActIndicatorSm: [{ type: HostBinding, args: ['class.am-activity-indicator-sm',] }]
    };
    return ActivityIndicator;
}());
export { ActivityIndicator };
if (false) {
    /** @type {?} */
    ActivityIndicator.prototype.prefixCls;
    /** @type {?} */
    ActivityIndicator.prototype.spinnerClass;
    /** @type {?} */
    ActivityIndicator.prototype._text;
    /** @type {?} */
    ActivityIndicator.prototype._size;
    /** @type {?} */
    ActivityIndicator.prototype._toast;
    /** @type {?} */
    ActivityIndicator.prototype._animating;
    /** @type {?} */
    ActivityIndicator.prototype.clsActIndicator;
    /** @type {?} */
    ActivityIndicator.prototype.clsActIndicatorToast;
    /** @type {?} */
    ActivityIndicator.prototype.clsActIndicatorLg;
    /** @type {?} */
    ActivityIndicator.prototype.clsActIndicatorSm;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHktaW5kaWNhdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiYWN0aXZpdHktaW5kaWNhdG9yL2FjdGl2aXR5LWluZGljYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFxRHBFO3lCQTlDb0IsdUJBQXVCOzRCQUNwQixFQUFFO3FCQUdELE9BQU87c0JBQ0wsS0FBSzswQkFDRCxJQUFJOytCQWdDUCxJQUFJO0tBUWY7SUF0Q2hCLHNCQUNJLHdDQUFTOzs7O1FBRGI7WUFFRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDeEI7Ozs7O1FBQ0QsVUFBYyxDQUFVO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjs7O09BSkE7SUFLRCxzQkFDSSxtQ0FBSTs7Ozs7UUFEUixVQUNTLENBQVM7WUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7OztPQUFBO0lBQ0Qsc0JBQ0ksb0NBQUs7Ozs7UUFEVDtZQUVFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjs7Ozs7UUFDRCxVQUFVLENBQVU7WUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCOzs7T0FKQTtJQUtELHNCQUNJLG1DQUFJOzs7O1FBRFI7WUFFRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7Ozs7O1FBQ0QsVUFBUyxDQUFTO1lBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCOzs7T0FIQTs7OztJQWdCRCxvQ0FBUTs7O0lBQVI7O1FBQ0UsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQzVCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMxQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxPQUFPLENBQUM7WUFDaEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZO2dCQUNmLEdBQUksSUFBSSxDQUFDLFNBQVMsYUFBVSxJQUFHLElBQUk7Z0JBQ25DLEdBQUksSUFBSSxDQUFDLFNBQVMsZ0JBQWEsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU87bUJBQzFFLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7WUFDN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztZQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7U0FDbkM7S0FDRjs7OztJQUVELG9DQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNqQjs7Z0JBekVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkNBQTJDO29CQUNyRCx3dUJBQWtEO2lCQUNuRDs7Ozs7NEJBVUUsS0FBSzt1QkFRTCxLQUFLO3dCQUtMLEtBQUs7dUJBUUwsS0FBSztrQ0FRTCxXQUFXLFNBQUMsNkJBQTZCO3VDQUV6QyxXQUFXLFNBQUMsbUNBQW1DO29DQUUvQyxXQUFXLFNBQUMsZ0NBQWdDO29DQUU1QyxXQUFXLFNBQUMsZ0NBQWdDOzs0QkFsRC9DOztTQU1hLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQWN0aXZpdHlJbmRpY2F0b3IgLCBuem0tY3Rpdml0eS1pbmRpY2F0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vYWN0aXZpdHktaW5kaWNhdG9yLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpdml0eUluZGljYXRvciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByZWZpeENsczogc3RyaW5nID0gJ2FtLWFjdGl2aXR5LWluZGljYXRvcic7XG4gIHNwaW5uZXJDbGFzczogb2JqZWN0ID0ge307XG5cbiAgcHJpdmF0ZSBfdGV4dDogc3RyaW5nO1xuICBwcml2YXRlIF9zaXplOiBzdHJpbmcgPSAnc21hbGwnO1xuICBwcml2YXRlIF90b2FzdDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9hbmltYXRpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBhbmltYXRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FuaW1hdGluZztcbiAgfVxuICBzZXQgYW5pbWF0aW5nKHY6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hbmltYXRpbmcgPSB2O1xuICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgc2l6ZSh2OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zaXplID0gdjtcbiAgICB0aGlzLnNldENsYXNzKCk7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHRvYXN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl90b2FzdDtcbiAgfVxuICBzZXQgdG9hc3QodjogYm9vbGVhbikge1xuICAgIHRoaXMuX3RvYXN0ID0gdjtcbiAgICB0aGlzLnNldENsYXNzKCk7XG4gIH1cbiAgQElucHV0KClcbiAgZ2V0IHRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuICBzZXQgdGV4dCh2OiBzdHJpbmcpIHtcbiAgICB0aGlzLl90ZXh0ID0gdjtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0tYWN0aXZpdHktaW5kaWNhdG9yJylcbiAgY2xzQWN0SW5kaWNhdG9yOiBib29sZWFuID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1hY3Rpdml0eS1pbmRpY2F0b3ItdG9hc3QnKVxuICBjbHNBY3RJbmRpY2F0b3JUb2FzdDtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1hY3Rpdml0eS1pbmRpY2F0b3ItbGcnKVxuICBjbHNBY3RJbmRpY2F0b3JMZztcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbS1hY3Rpdml0eS1pbmRpY2F0b3Itc20nKVxuICBjbHNBY3RJbmRpY2F0b3JTbTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc2V0Q2xhc3MoKSB7XG4gICAgaWYgKHRoaXMuX2FuaW1hdGluZykge1xuICAgICAgdGhpcy5jbHNBY3RJbmRpY2F0b3IgPSB0cnVlO1xuICAgICAgdGhpcy5jbHNBY3RJbmRpY2F0b3JUb2FzdCA9ICEhdGhpcy5fdG9hc3Q7XG4gICAgICB0aGlzLmNsc0FjdEluZGljYXRvckxnID0gdGhpcy5fc2l6ZSA9PT0gJ2xhcmdlJztcbiAgICAgIHRoaXMuY2xzQWN0SW5kaWNhdG9yU20gPSB0aGlzLl9zaXplID09PSAnc21hbGwnO1xuICAgICAgdGhpcy5zcGlubmVyQ2xhc3MgPSB7XG4gICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30tc3Bpbm5lcmBdOiB0cnVlLFxuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LXNwaW5uZXItbGdgXTogISF0aGlzLl90b2FzdCB8fCB0aGlzLl9zaXplID09PSAnbGFyZ2UnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsc0FjdEluZGljYXRvciA9IGZhbHNlO1xuICAgICAgdGhpcy5jbHNBY3RJbmRpY2F0b3JMZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jbHNBY3RJbmRpY2F0b3JTbSA9IGZhbHNlO1xuICAgICAgdGhpcy5jbHNBY3RJbmRpY2F0b3JUb2FzdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgfVxufVxuIl19