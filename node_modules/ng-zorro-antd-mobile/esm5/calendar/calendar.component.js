/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, Input, Output, HostBinding, EventEmitter } from '@angular/core';
import zhCN from './locale/zh_CN';
import enUS from './locale/en_US';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { mergeDateTime } from './util/index';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * @record
 */
export function StateType() { }
/** @type {?} */
StateType.prototype.showTimePicker;
/** @type {?|undefined} */
StateType.prototype.timePickerTitle;
/** @type {?|undefined} */
StateType.prototype.startDate;
/** @type {?|undefined} */
StateType.prototype.endDate;
/** @type {?|undefined} */
StateType.prototype.disConfirmBtn;
/** @type {?|undefined} */
StateType.prototype.clientHight;
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(_localeProviderService) {
        var _this = this;
        this._localeProviderService = _localeProviderService;
        this.isShow = false;
        this.showClear = false;
        this.props = /** @type {?} */ ({
            visible: false,
            showHeader: true,
            locale: zhCN,
            pickTime: false,
            showShortcut: false,
            prefixCls: 'rmc-calendar',
            type: 'range',
            defaultTimeValue: new Date(2000, 0, 1, 8)
        });
        this.state = /** @type {?} */ ({
            showTimePicker: false,
            timePickerTitle: '',
            startDate: undefined,
            endDate: undefined,
            disConfirmBtn: true,
            clientHight: 0
        });
        this._unsubscribe$ = new Subject();
        this.onCancel = new EventEmitter();
        this.onConfirm = new EventEmitter();
        this.onSelectHasDisableDate = new EventEmitter();
        this.class = 'am-calendar';
        this.selectDate = function (date, useDateTime, oldState, props) {
            if (useDateTime === void 0) { useDateTime = false; }
            if (oldState === void 0) { oldState = {}; }
            if (props === void 0) { props = _this.props; }
            if (!date) {
                return /** @type {?} */ ({});
            }
            /** @type {?} */
            var newState = /** @type {?} */ ({});
            var type = props.type, pickTime = props.pickTime, defaultTimeValue = props.defaultTimeValue, _a = props.locale, locale = _a === void 0 ? /** @type {?} */ ({}) : _a;
            /** @type {?} */
            var newDate = pickTime && !useDateTime ? mergeDateTime(date, defaultTimeValue) : date;
            var startDate = oldState.startDate, endDate = oldState.endDate;
            switch (type) {
                case 'one':
                    newState = tslib_1.__assign({}, newState, { startDate: newDate, disConfirmBtn: false });
                    if (pickTime) {
                        newState = tslib_1.__assign({}, newState, { timePickerTitle: locale.selectTime, showTimePicker: true });
                    }
                    break;
                case 'range':
                    if (!startDate || endDate) {
                        newState = tslib_1.__assign({}, newState, { startDate: newDate, endDate: undefined, disConfirmBtn: true });
                        if (pickTime) {
                            newState = tslib_1.__assign({}, newState, { timePickerTitle: locale.selectStartTime, showTimePicker: true });
                        }
                    }
                    else {
                        newState = tslib_1.__assign({}, newState, { timePickerTitle: +newDate >= +startDate ? locale.selectEndTime : locale.selectStartTime, disConfirmBtn: false, endDate: pickTime && !useDateTime && +newDate >= +startDate
                                ? new Date(+mergeDateTime(newDate, startDate) + 3600000)
                                : newDate });
                    }
                    break;
            }
            return newState;
        };
        this.onSelectedDate = function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            var onSelect = _this.props.onSelect;
            if (onSelect) {
                /** @type {?} */
                var value = onSelect(date, [startDate, endDate]);
                if (value) {
                    _this.shortcutSelect(value[0], value[1]);
                    return;
                }
            }
            _this.state = tslib_1.__assign({}, _this.state, _this.selectDate(date, false, { startDate: startDate, endDate: endDate }));
            _this.showClear = !!_this.state.startDate;
        };
        this.triggerSelectHasDisableDate = function (date) {
            _this.triggerClear();
            _this.onSelectHasDisableDate && _this.onSelectHasDisableDate.emit(date);
        };
        this.onClose = function () {
            _this.state = /** @type {?} */ ({
                showTimePicker: false,
                timePickerTitle: '',
                startDate: undefined,
                endDate: undefined,
                disConfirmBtn: true,
                clientHight: 0
            });
            _this.showClear = !!_this.state.startDate;
        };
        this.triggerConfirm = function () {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (startDate && endDate && +startDate > +endDate) {
                _this.onClose();
                return _this.onConfirm && _this.onConfirm.emit({ startDate: endDate, endDate: startDate });
            }
            _this.onConfirm && _this.onConfirm.emit({ startDate: startDate, endDate: endDate });
            _this.onClose();
        };
        this.triggerClear = function () {
            // 清除数据做延迟，否则同步刷新数据导致报错
            setTimeout(function () {
                _this.state = tslib_1.__assign({}, _this.state, { startDate: undefined, endDate: undefined, showTimePicker: false });
                _this.props.onClear && _this.props.onClear();
                _this.showClear = !!_this.state.startDate;
            }, 0);
        };
        this.onTimeChange = function (date) {
            var _a = _this.state, startDate = _a.startDate, endDate = _a.endDate;
            if (endDate) {
                _this.state.endDate = date;
            }
            else if (startDate) {
                _this.state.startDate = date;
            }
        };
        this.shortcutSelect = function (startDate, endDate, props) {
            if (props === void 0) { props = _this.props; }
            _this.state = tslib_1.__assign({}, _this.state, { startDate: startDate, showTimePicker: false }, _this.selectDate(endDate, true, { startDate: startDate }, props));
            _this.showClear = !!_this.state.startDate;
        };
        this.setClientHeight = function (height) {
            _this.state.clientHight = height;
        };
    }
    Object.defineProperty(CalendarComponent.prototype, "locale", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'enUS') {
                this.props.locale = enUS;
            }
            else if (value === 'zhCN') {
                this.props.locale = zhCN;
            }
            this._unsubscribe$.next();
            this._unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultTimeValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.defaultTimeValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "prefixCls", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.props.prefixCls = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "enterDirection", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._enterDirection = value;
            if (this._enterDirection === 'horizontal') {
                this.contentAnimateClass = 'slideH-enter slideH-enter-active';
            }
            else {
                this.contentAnimateClass = 'slideV-enter slideV-enter-active';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "visible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.props.visible = value;
            if (value === true || value === 'true') {
                this.showAnimation();
                this.isShow = true;
            }
            else {
                this.hideAnimation();
                setTimeout(function () {
                    _this.isShow = false;
                }, 300);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "getDateExtra", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.getDateExtra = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "minDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.minDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "maxDate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.maxDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "pickTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.pickTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "showShortcut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.showShortcut = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "rowSize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.rowSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "infinite", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.defaultValue = value;
            if (value) {
                this.receiveProps(this.props);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "onSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onSelect = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nextProps
     * @return {?}
     */
    CalendarComponent.prototype.receiveProps = /**
     * @param {?} nextProps
     * @return {?}
     */
    function (nextProps) {
        if (nextProps.visible && nextProps.defaultValue) {
            this.shortcutSelect(nextProps.defaultValue[0], nextProps.defaultValue[1], nextProps);
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-enter slideH-enter-active';
        }
        else {
            this.contentAnimateClass = 'slideV-enter slideV-enter-active';
        }
        this.maskAnimateClass = 'fade-enter fade-enter-active';
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.hideAnimation = /**
     * @return {?}
     */
    function () {
        if (this._enterDirection === 'horizontal') {
            this.contentAnimateClass = 'slideH-leave slideH-leave-active';
        }
        else {
            this.contentAnimateClass = 'slideV-leave slideV-leave-active';
        }
        this.maskAnimateClass = 'fade-leave fade-leave-active';
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.triggerCancel = /**
     * @return {?}
     */
    function () {
        this.props.onCancel && this.props.onCancel();
        this.onClose();
        this.onCancel && this.onCancel.emit();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var defaultValue = this.props.defaultValue;
        if (defaultValue) {
            this.state = tslib_1.__assign({}, this.state, this.selectDate(defaultValue[1], true, { startDate: defaultValue[0] }, this.props));
        }
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            _this.props.locale = /** @type {?} */ (tslib_1.__assign({}, _this._localeProviderService.getLocaleSubObj('Calendar')));
        });
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'Calendar, nzm-calendar',
                    template: "<span *ngIf=\"isShow\">\n  <div class=\"{{'mask ' + maskAnimateClass}}\"></div>\n</span>\n<span *ngIf=\"isShow\">\n  <div class=\"{{'content animate ' + contentAnimateClass}}\">\n    <CalendarHeader [locale]=\"props.locale\"\n                    [closeIcon]=\"closeIconHtml\"\n                    [showClear]=\"showClear\"\n                    (onCancel)=\"triggerCancel()\"\n                    (onClear)=\"triggerClear()\"\n    ></CalendarHeader>\n    <CalendarDatePicker [propsData]=\"props\"\n                        [endDate]=\"state.endDate\"\n                        [startDate]=\"state.startDate\"\n                        [onCellClick]=\"onSelectedDate\"\n                        [onSelectHasDisableDate]=\"triggerSelectHasDisableDate\"\n                        [onLayout]=\"setClientHeight\"\n    ></CalendarDatePicker>\n    <CalendarTimePicker *ngIf=\"state.showTimePicker\"\n                        [propsData]=\"props\"\n                        [title]=\"state.timePickerTitle\"\n                        [clientHeight]=\"state.clientHight\"\n                        [prefixCls]=\"props.timePickerPrefixCls\"\n                        [defaultValue]=\"props.defaultTimeValue\"\n                        [pickerPrefixCls]=\"props.timePickerPickerPrefixCls\"\n                        [value]=\"state.endDate ? state.endDate : state.startDate\"\n                        [onValueChange]=\"onTimeChange\"\n    ></CalendarTimePicker>\n    <CalendarShortcutPanel *ngIf=\"props.showShortcut && !state.showTimePicker\"\n                           [locale]=\"props.locale\"\n                           [onSelect]=\"shortcutSelect\"\n    ></CalendarShortcutPanel>\n    <CalendarConfirmPanel *ngIf=\"state.startDate\"\n                          [startDateTime]=\"state.startDate\"\n                          [endDateTime]=\"state.endDate\"\n                          [propsData]=\"props\"\n                          [disableBtn]=\"state.disConfirmBtn\"\n                          [formatStr]=\"props.pickTime ? props.locale.dateTimeFormat : props.locale.dateFormat\"\n                          [onConfirm]=\"triggerConfirm\"\n    ></CalendarConfirmPanel>\n  </div>\n</span>\n<ng-template #closeIconHtml>\n  <Icon [type]=\"'cross'\"></Icon>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    CalendarComponent.propDecorators = {
        locale: [{ type: Input }],
        defaultTimeValue: [{ type: Input }],
        prefixCls: [{ type: Input }],
        enterDirection: [{ type: Input }],
        visible: [{ type: Input }],
        getDateExtra: [{ type: Input }],
        defaultDate: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        pickTime: [{ type: Input }],
        type: [{ type: Input }],
        showShortcut: [{ type: Input }],
        rowSize: [{ type: Input }],
        infinite: [{ type: Input }],
        defaultValue: [{ type: Input }],
        onSelect: [{ type: Input }],
        onCancel: [{ type: Output }],
        onConfirm: [{ type: Output }],
        onSelectHasDisableDate: [{ type: Output }],
        class: [{ type: HostBinding, args: ['class',] }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /** @type {?} */
    CalendarComponent.prototype.isShow;
    /** @type {?} */
    CalendarComponent.prototype.contentAnimateClass;
    /** @type {?} */
    CalendarComponent.prototype.maskAnimateClass;
    /** @type {?} */
    CalendarComponent.prototype.showClear;
    /** @type {?} */
    CalendarComponent.prototype.props;
    /** @type {?} */
    CalendarComponent.prototype.state;
    /** @type {?} */
    CalendarComponent.prototype._unsubscribe$;
    /** @type {?} */
    CalendarComponent.prototype._enterDirection;
    /** @type {?} */
    CalendarComponent.prototype.onCancel;
    /** @type {?} */
    CalendarComponent.prototype.onConfirm;
    /** @type {?} */
    CalendarComponent.prototype.onSelectHasDisableDate;
    /** @type {?} */
    CalendarComponent.prototype.class;
    /** @type {?} */
    CalendarComponent.prototype.selectDate;
    /** @type {?} */
    CalendarComponent.prototype.onSelectedDate;
    /** @type {?} */
    CalendarComponent.prototype.triggerSelectHasDisableDate;
    /** @type {?} */
    CalendarComponent.prototype.onClose;
    /** @type {?} */
    CalendarComponent.prototype.triggerConfirm;
    /** @type {?} */
    CalendarComponent.prototype.triggerClear;
    /** @type {?} */
    CalendarComponent.prototype.onTimeChange;
    /** @type {?} */
    CalendarComponent.prototype.shortcutSelect;
    /** @type {?} */
    CalendarComponent.prototype.setClientHeight;
    /** @type {?} */
    CalendarComponent.prototype._localeProviderService;
}

//# sourceMappingURL=data:application/json;base64,