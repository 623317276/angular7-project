/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { formatDate } from '../util/index';
/**
 * @record
 */
export function ConfirmPanelPropsType() { }
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.type;
/** @type {?} */
ConfirmPanelPropsType.prototype.locale;
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.onlyConfirm;
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.disableBtn;
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.startDateTime;
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.endDateTime;
/** @type {?|undefined} */
ConfirmPanelPropsType.prototype.formatStr;
/** @type {?} */
ConfirmPanelPropsType.prototype.onConfirm;
var ConfirmPanelComponent = /** @class */ (function () {
    function ConfirmPanelComponent() {
        var _this = this;
        this.props = /** @type {?} */ ({
            formatStr: 'yyyy-MM-dd hh:mm'
        });
        this.confirmPane = true;
        this.triggerConfirm = function () {
            var _a = _this.props, onConfirm = _a.onConfirm, disableBtn = _a.disableBtn;
            !disableBtn && onConfirm();
        };
    }
    Object.defineProperty(ConfirmPanelComponent.prototype, "propsData", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = tslib_1.__assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "disableBtn", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.disableBtn = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "formatStr", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.formatStr = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "startDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.startDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "endDateTime", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.endDateTime = value;
            this.formatTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmPanelComponent.prototype, "onConfirm", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props.onConfirm = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ConfirmPanelComponent.prototype.formatTime = /**
     * @return {?}
     */
    function () {
        var _a = this.props, type = _a.type, locale = _a.locale, disableBtn = _a.disableBtn;
        var _b = this.props, startDateTime = _b.startDateTime, endDateTime = _b.endDateTime;
        if (startDateTime && endDateTime && +startDateTime > +endDateTime) {
            /** @type {?} */
            var tmp = startDateTime;
            startDateTime = endDateTime;
            endDateTime = tmp;
        }
        this.startTimeStr = startDateTime ? this.selfFormatDate(startDateTime) : locale.noChoose;
        this.endTimeStr = endDateTime ? this.selfFormatDate(endDateTime) : locale.noChoose;
        /** @type {?} */
        var btnCls = disableBtn ? 'button button-disable' : 'button';
        if (type === 'one') {
            btnCls += ' button-full';
        }
        this.btnCls = btnCls;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ConfirmPanelComponent.prototype.selfFormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _a = this.props, _b = _a.formatStr, formatStr = _b === void 0 ? '' : _b, locale = _a.locale;
        return formatDate(date, formatStr, locale);
    };
    ConfirmPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'CalendarConfirmPanel, nzm-calendar-confirm-panel',
                    template: "<div *ngIf=\"props.type === 'range'\" class=\"info\">\n  <p>{{props.locale.start}}: <span class=\"{{!props.startDateTime ? 'grey' : ''}}\">{{startTimeStr}}</span></p>\n  <p>{{props.locale.end}}: <span class=\"{{!props.endDateTime ? 'grey' : ''}}\">{{endTimeStr}}</span></p>\n</div>\n<div [ngClass]=\"btnCls\" (click)=\"triggerConfirm()\">\n  {{props.locale.confirm}}\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ConfirmPanelComponent.ctorParameters = function () { return []; };
    ConfirmPanelComponent.propDecorators = {
        propsData: [{ type: Input }],
        disableBtn: [{ type: Input }],
        formatStr: [{ type: Input }],
        startDateTime: [{ type: Input }],
        endDateTime: [{ type: Input }],
        onConfirm: [{ type: Input }],
        confirmPane: [{ type: HostBinding, args: ['class.confirm-panel',] }]
    };
    return ConfirmPanelComponent;
}());
export { ConfirmPanelComponent };
if (false) {
    /** @type {?} */
    ConfirmPanelComponent.prototype.props;
    /** @type {?} */
    ConfirmPanelComponent.prototype.startTimeStr;
    /** @type {?} */
    ConfirmPanelComponent.prototype.endTimeStr;
    /** @type {?} */
    ConfirmPanelComponent.prototype.btnCls;
    /** @type {?} */
    ConfirmPanelComponent.prototype.confirmPane;
    /** @type {?} */
    ConfirmPanelComponent.prototype.triggerConfirm;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNhbGVuZGFyL2NvbmZpcm0tcGFuZWwvY29uZmlybS1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTREekM7UUFBQSxpQkFBZ0I7dUNBdkNSO1lBQ04sU0FBUyxFQUFFLGtCQUFrQjtTQUNMOzJCQW1DaUMsSUFBSTs4QkFzQjlDO1lBQ2Ysc0JBQVEsd0JBQVMsRUFBRSwwQkFBVSxDQUFnQjtZQUM3QyxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQztTQUM1QjtLQXZCZTtJQWhDaEIsc0JBQ0ksNENBQVM7Ozs7O1FBRGIsVUFDYyxLQUFLO1lBQ2pCLElBQUksQ0FBQyxLQUFLLHdCQUNMLElBQUksQ0FBQyxLQUFLLEVBQ1YsS0FBSyxDQUNULENBQUM7U0FDSDs7O09BQUE7SUFDRCxzQkFDSSw2Q0FBVTs7Ozs7UUFEZCxVQUNlLEtBQUs7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQy9COzs7T0FBQTtJQUNELHNCQUNJLDRDQUFTOzs7OztRQURiLFVBQ2MsS0FBSztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDOUI7OztPQUFBO0lBQ0Qsc0JBQ0ksZ0RBQWE7Ozs7O1FBRGpCLFVBQ2tCLEtBQUs7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNuQjs7O09BQUE7SUFDRCxzQkFDSSw4Q0FBVzs7Ozs7UUFEZixVQUNnQixLQUFLO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7OztPQUFBO0lBQ0Qsc0JBQ0ksNENBQVM7Ozs7O1FBRGIsVUFDYyxLQUFLO1lBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUM5Qjs7O09BQUE7Ozs7SUFNRCwwQ0FBVTs7O0lBQVY7UUFDRSxxQkFBUSxjQUFJLEVBQUUsa0JBQU0sRUFBRSwwQkFBVSxDQUFnQjtRQUNoRCxxQkFBTSxnQ0FBYSxFQUFFLDRCQUFXLENBQWdCO1FBQ2hELElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLFdBQVcsRUFBRTs7WUFDakUsSUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDO1lBQzFCLGFBQWEsR0FBRyxXQUFXLENBQUM7WUFDNUIsV0FBVyxHQUFHLEdBQUcsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztRQUNuRixJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDN0QsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxjQUFjLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUN0Qjs7Ozs7SUFPRCw4Q0FBYzs7OztJQUFkLFVBQWUsSUFBVTtRQUN2QixxQkFBUSxpQkFBYyxFQUFkLG1DQUFjLEVBQUUsa0JBQU0sQ0FBZ0I7UUFDOUMsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1Qzs7Z0JBMUVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0RBQWtEO29CQUM1RCxvWUFBNkM7b0JBQzdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN0Qzs7Ozs7NEJBVUUsS0FBSzs2QkFPTCxLQUFLOzRCQUlMLEtBQUs7Z0NBSUwsS0FBSzs4QkFLTCxLQUFLOzRCQUtMLEtBQUs7OEJBS0wsV0FBVyxTQUFDLHFCQUFxQjs7Z0NBM0RwQzs7U0FxQmEscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vdXRpbC9pbmRleCc7XG5pbXBvcnQgeyBNb2RlbHMgfSBmcm9tICcuLi9kYXRlL0RhdGFUeXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlybVBhbmVsUHJvcHNUeXBlIHtcbiAgdHlwZT86ICdvbmUnIHwgJ3JhbmdlJztcbiAgbG9jYWxlOiBNb2RlbHMuTG9jYWxlO1xuICBvbmx5Q29uZmlybT86IGJvb2xlYW47XG4gIGRpc2FibGVCdG4/OiBib29sZWFuO1xuICBzdGFydERhdGVUaW1lPzogRGF0ZTtcbiAgZW5kRGF0ZVRpbWU/OiBEYXRlO1xuICBmb3JtYXRTdHI/OiBzdHJpbmc7XG4gIG9uQ29uZmlybTogKCkgPT4gdm9pZDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQ2FsZW5kYXJDb25maXJtUGFuZWwsIG56bS1jYWxlbmRhci1jb25maXJtLXBhbmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbmZpcm0tcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgQ29uZmlybVBhbmVsQ29tcG9uZW50IHtcbiAgcHJvcHMgPSB7XG4gICAgZm9ybWF0U3RyOiAneXl5eS1NTS1kZCBoaDptbSdcbiAgfSBhcyBDb25maXJtUGFuZWxQcm9wc1R5cGU7XG4gIHN0YXJ0VGltZVN0cjogc3RyaW5nO1xuICBlbmRUaW1lU3RyOiBzdHJpbmc7XG4gIGJ0bkNsczogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBwcm9wc0RhdGEodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIC4uLnZhbHVlXG4gICAgfTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgZGlzYWJsZUJ0bih2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMuZGlzYWJsZUJ0biA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBmb3JtYXRTdHIodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLmZvcm1hdFN0ciA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBzdGFydERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5zdGFydERhdGVUaW1lID0gdmFsdWU7XG4gICAgdGhpcy5mb3JtYXRUaW1lKCk7XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IGVuZERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5lbmREYXRlVGltZSA9IHZhbHVlO1xuICAgIHRoaXMuZm9ybWF0VGltZSgpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBvbkNvbmZpcm0odmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ29uZmlybSA9IHZhbHVlO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb25maXJtLXBhbmVsJykgY29uZmlybVBhbmU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBmb3JtYXRUaW1lKCkge1xuICAgIGNvbnN0IHsgdHlwZSwgbG9jYWxlLCBkaXNhYmxlQnRuIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IHN0YXJ0RGF0ZVRpbWUsIGVuZERhdGVUaW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChzdGFydERhdGVUaW1lICYmIGVuZERhdGVUaW1lICYmICtzdGFydERhdGVUaW1lID4gK2VuZERhdGVUaW1lKSB7XG4gICAgICBjb25zdCB0bXAgPSBzdGFydERhdGVUaW1lO1xuICAgICAgc3RhcnREYXRlVGltZSA9IGVuZERhdGVUaW1lO1xuICAgICAgZW5kRGF0ZVRpbWUgPSB0bXA7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydFRpbWVTdHIgPSBzdGFydERhdGVUaW1lID8gdGhpcy5zZWxmRm9ybWF0RGF0ZShzdGFydERhdGVUaW1lKSA6IGxvY2FsZS5ub0Nob29zZTtcbiAgICB0aGlzLmVuZFRpbWVTdHIgPSBlbmREYXRlVGltZSA/IHRoaXMuc2VsZkZvcm1hdERhdGUoZW5kRGF0ZVRpbWUpIDogbG9jYWxlLm5vQ2hvb3NlO1xuICAgIGxldCBidG5DbHMgPSBkaXNhYmxlQnRuID8gJ2J1dHRvbiBidXR0b24tZGlzYWJsZScgOiAnYnV0dG9uJztcbiAgICBpZiAodHlwZSA9PT0gJ29uZScpIHtcbiAgICAgIGJ0bkNscyArPSAnIGJ1dHRvbi1mdWxsJztcbiAgICB9XG4gICAgdGhpcy5idG5DbHMgPSBidG5DbHM7XG4gIH1cblxuICB0cmlnZ2VyQ29uZmlybSA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uQ29uZmlybSwgZGlzYWJsZUJ0biB9ID0gdGhpcy5wcm9wcztcbiAgICAhZGlzYWJsZUJ0biAmJiBvbkNvbmZpcm0oKTtcbiAgfVxuXG4gIHNlbGZGb3JtYXREYXRlKGRhdGU6IERhdGUpIHtcbiAgICBjb25zdCB7IGZvcm1hdFN0ciA9ICcnLCBsb2NhbGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0U3RyLCBsb2NhbGUpO1xuICB9XG59XG4iXX0=