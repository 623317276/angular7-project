/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, HostBinding, Input, ElementRef } from '@angular/core';
import { Models } from '../date/DataTypes';
/**
 * @record
 */
export function PropsType() { }
/** @type {?} */
PropsType.prototype.locale;
/** @type {?} */
PropsType.prototype.monthData;
/** @type {?|undefined} */
PropsType.prototype.rowSize;
/** @type {?|undefined} */
PropsType.prototype.getDateExtra;
/** @type {?|undefined} */
PropsType.prototype.onCellClick;
/** @type {?} */
PropsType.prototype.ref;
var SingleMonthComponent = /** @class */ (function () {
    function SingleMonthComponent(_elementRef) {
        var _this = this;
        this._elementRef = _elementRef;
        this.props = /** @type {?} */ ({
            rowSize: 'normal'
        });
        this.state = {
            weekComponents: []
        };
        this.singleMonth = true;
        this.genWeek = function (weeksData, index) {
            var _a = _this.props, getDateExtra = _a.getDateExtra, monthData = _a.monthData, onCellClick = _a.onCellClick, locale = _a.locale, rowSize = _a.rowSize;
            /** @type {?} */
            var rowCls = 'row';
            /** @type {?} */
            var weeksDataList = [];
            if (rowSize === 'xl') {
                rowCls += ' row-xl';
            }
            weeksData.forEach(function (day, dayOfWeek) {
                /** @type {?} */
                var extra = (getDateExtra && getDateExtra(new Date(day.tick))) || {};
                /** @type {?} */
                var info = extra.info;
                /** @type {?} */
                var disable = extra.disable || day.outOfDate;
                /** @type {?} */
                var cls = 'date';
                /** @type {?} */
                var lCls = 'left';
                /** @type {?} */
                var rCls = 'right';
                /** @type {?} */
                var infoCls = 'info';
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    cls += ' grey';
                }
                if (disable) {
                    cls += ' disable';
                }
                else if (info) {
                    cls += ' important';
                }
                if (day.selected) {
                    cls += ' date-selected';
                    /** @type {?} */
                    var styleType = day.selected;
                    switch (styleType) {
                        case Models.SelectType.Only:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.All:
                            info = locale.begin_over;
                            infoCls += ' date-selected';
                            break;
                        case Models.SelectType.Start:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                        case Models.SelectType.Middle:
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                if (day.isLastOfMonth || dayOfWeek === 6) {
                                    styleType = Models.SelectType.All;
                                }
                                else {
                                    styleType = Models.SelectType.Start;
                                }
                            }
                            else if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = Models.SelectType.End;
                            }
                            break;
                        case Models.SelectType.End:
                            info = locale.over;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                styleType = Models.SelectType.All;
                            }
                            break;
                    }
                    switch (styleType) {
                        case Models.SelectType.Single:
                        case Models.SelectType.Only:
                        case Models.SelectType.All:
                            cls += ' selected-single';
                            break;
                        case Models.SelectType.Start:
                            cls += ' selected-start';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.Middle:
                            cls += ' selected-middle';
                            lCls += ' date-selected';
                            rCls += ' date-selected';
                            break;
                        case Models.SelectType.End:
                            cls += ' selected-end';
                            lCls += ' date-selected';
                            break;
                    }
                }
                weeksDataList[dayOfWeek] = {
                    lCls: lCls,
                    cls: cls,
                    day: day,
                    rCls: rCls,
                    infoCls: infoCls,
                    info: info,
                    extra: extra,
                    disable: disable,
                    onCellClick: onCellClick,
                    monthData: monthData
                };
            });
            _this.state.weekComponents[index] = {
                index: index,
                rowCls: rowCls,
                weeksDataList: weeksDataList
            };
        };
        this.updateWeeks = function (monthData) {
            (monthData || _this.props.monthData).weeks.forEach(function (week, index) {
                _this.genWeek(week, index);
            });
        };
        this.setWarpper = function (dom) {
            _this.wrapperDivDOM = dom;
        };
    }
    Object.defineProperty(SingleMonthComponent.prototype, "data", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.props = tslib_1.__assign({}, this.props, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    SingleMonthComponent.prototype.onClickCell = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        !item.disable && item.onCellClick && item.onCellClick(item.day, item.monthData);
    };
    /**
     * @return {?}
     */
    SingleMonthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setWarpper(this._elementRef.nativeElement);
        this.props.monthData.weeks.forEach(function (week, index) {
            _this.genWeek(week, index);
        });
    };
    /**
     * @return {?}
     */
    SingleMonthComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.ref = this.props.ref;
        this.ref(this);
    };
    SingleMonthComponent.decorators = [
        { type: Component, args: [{
                    selector: 'SingleMonth, nzm-single-month',
                    template: "<div class=\"month-title\">\n  {{props.monthData.title}}\n</div>\n<div class=\"date\">\n  <div *ngFor=\"let row of state.weekComponents;let i = index;\" [ngClass]=\"row.rowCls\">\n    <div *ngFor=\"let cell of row.weeksDataList;let j = index;\"\n         class=\"{{'cell ' + (row.extra && row.extra.cellCls || '')}}\"\n         (click)=\"onClickCell(cell)\"\n    >\n      <div *ngIf=\"row.extra && row.extra.cellRender\">test</div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" class=\"date-wrapper\">\n        <span [ngClass]=\"cell.lCls\"></span>\n        <div [ngClass]=\"cell.cls\">\n          {{cell.day && cell.day.dayOfMonth || ''}}\n        </div>\n        <span [ngClass]=\"cell.rCls\"></span>\n      </div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" [ngClass]=\"cell.infoCls\">\n        {{cell.info}}\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SingleMonthComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SingleMonthComponent.propDecorators = {
        data: [{ type: Input }],
        singleMonth: [{ type: HostBinding, args: ['class.single-month',] }]
    };
    return SingleMonthComponent;
}());
export { SingleMonthComponent };
if (false) {
    /** @type {?} */
    SingleMonthComponent.prototype.props;
    /** @type {?} */
    SingleMonthComponent.prototype.state;
    /** @type {?} */
    SingleMonthComponent.prototype.ref;
    /** @type {?} */
    SingleMonthComponent.prototype.wrapperDivDOM;
    /** @type {?} */
    SingleMonthComponent.prototype.singleMonth;
    /** @type {?} */
    SingleMonthComponent.prototype.genWeek;
    /** @type {?} */
    SingleMonthComponent.prototype.updateWeeks;
    /** @type {?} */
    SingleMonthComponent.prototype.setWarpper;
    /** @type {?} */
    SingleMonthComponent.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,