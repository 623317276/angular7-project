/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Models } from '../date/DataTypes';
import { formatDate } from '../util';
import defaultLocale from '../locale/zh_CN';
/**
 * @record
 */
export function StateType() { }
/** @type {?} */
StateType.prototype.months;
var DatePicker = /** @class */ (function () {
    function DatePicker() {
        var _this = this;
        this.props = /** @type {?} */ ({
            prefixCls: 'rmc-calendar',
            infinite: false,
            infiniteOpt: false,
            defaultDate: new Date(),
            initalMonths: 6,
            locale: defaultLocale
        });
        this.state = {
            months: []
        };
        this.visibleMonth = [];
        this.getDateWithoutTime = function (date) {
            if (!date)
                return 0;
            return +new Date(date.getFullYear(), date.getMonth(), date.getDate());
        };
        this.genWeekData = function (firstDate) {
            /** @type {?} */
            var minDateTime = _this.getDateWithoutTime(_this.props.minDate);
            /** @type {?} */
            var maxDateTime = _this.getDateWithoutTime(_this.props.maxDate) || Number.POSITIVE_INFINITY;
            /** @type {?} */
            var weeks = [];
            /** @type {?} */
            var nextMonth = _this.getMonthDate(firstDate, 1).firstDate;
            /** @type {?} */
            var currentDay = firstDate;
            /** @type {?} */
            var currentWeek = [];
            weeks.push(currentWeek);
            /** @type {?} */
            var startWeekday = currentDay.getDay();
            if (startWeekday > 0) {
                for (var i = 0; i < startWeekday; i++) {
                    currentWeek.push(/** @type {?} */ ({}));
                }
            }
            while (currentDay < nextMonth) {
                if (currentWeek.length === 7) {
                    currentWeek = [];
                    weeks.push(currentWeek);
                }
                /** @type {?} */
                var dayOfMonth = currentDay.getDate();
                /** @type {?} */
                var tick = +currentDay;
                currentWeek.push({
                    tick: tick,
                    dayOfMonth: dayOfMonth,
                    selected: Models.SelectType.None,
                    isFirstOfMonth: dayOfMonth === 1,
                    isLastOfMonth: false,
                    outOfDate: tick < minDateTime || tick > maxDateTime
                });
                currentDay = new Date(currentDay.getTime() + 3600 * 24 * 1000);
            }
            currentWeek[currentWeek.length - 1].isLastOfMonth = true;
            return weeks;
        };
        this.selectDateRange = function (startDate, endDate, clear) {
            if (clear === void 0) { clear = false; }
            var _a = _this.props, getDateExtra = _a.getDateExtra, type = _a.type, onSelectHasDisableDate = _a.onSelectHasDisableDate;
            if (type === 'one') {
                endDate = undefined;
            }
            /** @type {?} */
            var time1 = _this.getDateWithoutTime(startDate);
            /** @type {?} */
            var time2 = _this.getDateWithoutTime(endDate);
            /** @type {?} */
            var startDateTick = !time2 || time1 < time2 ? time1 : time2;
            /** @type {?} */
            var endDateTick = time2 && time1 > time2 ? time1 : time2;
            /** @type {?} */
            var startMonthDate = _this.getMonthDate(new Date(startDateTick)).firstDate;
            /** @type {?} */
            var endMonthDate = endDateTick ? new Date(endDateTick) : _this.getMonthDate(new Date(startDateTick)).lastDate;
            /** @type {?} */
            var unuseable = [];
            /** @type {?} */
            var needUpdate = false;
            _this.state.months
                .filter(function (m) {
                return m.firstDate >= startMonthDate && m.firstDate <= endMonthDate;
            })
                .forEach(function (m) {
                m.weeks.forEach(function (w) {
                    return w
                        .filter(function (d) {
                        if (!endDateTick) {
                            return d.tick && _this.inDate(startDateTick, d.tick);
                        }
                        else {
                            return d.tick && d.tick >= startDateTick && d.tick <= endDateTick;
                        }
                    })
                        .forEach(function (d) {
                        /** @type {?} */
                        var oldValue = d.selected;
                        if (clear) {
                            d.selected = Models.SelectType.None;
                        }
                        else {
                            /** @type {?} */
                            var info = (getDateExtra && getDateExtra(new Date(d.tick))) || {};
                            if (d.outOfDate || info.disable) {
                                unuseable.push(d.tick);
                            }
                            if (_this.inDate(startDateTick, d.tick)) {
                                if (type === 'one') {
                                    d.selected = Models.SelectType.Single;
                                }
                                else if (!endDateTick) {
                                    d.selected = Models.SelectType.Only;
                                }
                                else if (startDateTick !== endDateTick) {
                                    d.selected = Models.SelectType.Start;
                                }
                                else {
                                    d.selected = Models.SelectType.All;
                                }
                            }
                            else if (_this.inDate(endDateTick, d.tick)) {
                                d.selected = Models.SelectType.End;
                            }
                            else {
                                d.selected = Models.SelectType.Middle;
                            }
                        }
                        needUpdate = needUpdate || d.selected !== oldValue;
                    });
                });
                if (needUpdate && m.componentRef) {
                    m.componentRef.updateWeeks();
                }
            });
            if (unuseable.length > 0) {
                if (onSelectHasDisableDate) {
                    onSelectHasDisableDate(unuseable.map(function (tick) { return new Date(tick); }));
                }
                else {
                    console.warn('Unusable date. You can handle by onSelectHasDisableDate.', unuseable);
                }
            }
        };
        this.computeVisible = function (clientHeight, scrollTop) {
            /** @type {?} */
            var needUpdate = false;
            /** @type {?} */
            var MAX_VIEW_PORT = clientHeight * 2;
            /** @type {?} */
            var MIN_VIEW_PORT = clientHeight;
            /** @type {?} */
            var filterFunc = function (vm) {
                return vm.y &&
                    vm.height &&
                    (vm.y + vm.height > scrollTop - MAX_VIEW_PORT && vm.y < scrollTop + clientHeight + MAX_VIEW_PORT);
            };
            if (_this.props.infiniteOpt && _this.visibleMonth.length > 12) {
                _this.visibleMonth = _this.visibleMonth.filter(filterFunc).sort(function (a, b) { return +a.firstDate - +b.firstDate; });
            }
            // 当小缓冲区不满时填充
            if (_this.visibleMonth.length > 0) {
                /** @type {?} */
                var last = _this.visibleMonth[_this.visibleMonth.length - 1];
                if (last.y !== undefined && last.height && last.y + last.height < scrollTop + clientHeight + MIN_VIEW_PORT) {
                    /** @type {?} */
                    var lastIndex = _this.state.months.indexOf(last);
                    for (var i = 1; i <= 2; i++) {
                        /** @type {?} */
                        var index = lastIndex + i;
                        if (index < _this.state.months.length && _this.visibleMonth.indexOf(_this.state.months[index]) < 0) {
                            _this.visibleMonth.push(_this.state.months[index]);
                        }
                        else {
                            _this.canLoadNext() && _this.genMonthData(undefined, 1);
                        }
                    }
                    needUpdate = true;
                }
                /** @type {?} */
                var first = _this.visibleMonth[0];
                if (first.y !== undefined && first.height && first.y > scrollTop - MIN_VIEW_PORT) {
                    /** @type {?} */
                    var firstIndex = _this.state.months.indexOf(first);
                    for (var i = 1; i <= 2; i++) {
                        /** @type {?} */
                        var index = firstIndex - i;
                        if (index >= 0 && _this.visibleMonth.indexOf(_this.state.months[index]) < 0) {
                            _this.visibleMonth.unshift(_this.state.months[index]);
                            needUpdate = true;
                        }
                    }
                }
            }
            else if (_this.state.months.length > 0) {
                _this.visibleMonth = _this.state.months.filter(filterFunc);
                needUpdate = true;
            }
            return needUpdate;
        };
        this.createOnScroll = function () {
            /** @type {?} */
            var clientHeight = 0;
            /** @type {?} */
            var scrollTop = 0;
            return function (data) {
                var client = data.client, top = data.top;
                clientHeight = client;
                scrollTop = top;
                _this.computeVisible(clientHeight, scrollTop);
                // 以上方法目前无问题，如果后续有性能问题，改用如下方法，但以下方法会导致刷新稍微延迟现象
                // if (timer) {
                //   return;
                // }
                //
                // timer = setTimeout(() => {
                //   timer = undefined;
                //
                //   if (this.computeVisible(clientHeight, scrollTop)) {
                //     console.log('update dom');
                //   }
                // }, 50);
            };
        };
        this.baseOnCellClick = function (day) {
            if (!day.tick)
                return;
            _this.props.onCellClick && _this.props.onCellClick(new Date(day.tick));
        };
    }
    /**
     * @return {?}
     */
    DatePicker.prototype.init = /**
     * @return {?}
     */
    function () {
        var _a = this.props, _b = _a.initalMonths, initalMonths = _b === void 0 ? 6 : _b, defaultDate = _a.defaultDate;
        for (var i = 0; i < initalMonths; i++) {
            this.canLoadNext() && this.genMonthData(defaultDate, i);
        }
        this.visibleMonth = tslib_1.__spread(this.state.months);
    };
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    DatePicker.prototype.receiveProps = /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    function (oldValue, newValue) {
        if (oldValue && newValue) {
            if (oldValue.startDate !== newValue.startDate || oldValue.endDate !== newValue.endDate) {
                if (oldValue.startDate) {
                    this.selectDateRange(oldValue.startDate, oldValue.endDate, true);
                }
                if (newValue.startDate) {
                    this.selectDateRange(newValue.startDate, newValue.endDate);
                }
            }
        }
    };
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    DatePicker.prototype.getMonthDate = /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    function (date, addMonth) {
        if (date === void 0) { date = new Date(); }
        if (addMonth === void 0) { addMonth = 0; }
        /** @type {?} */
        var y = date.getFullYear();
        /** @type {?} */
        var m = date.getMonth();
        return {
            firstDate: new Date(y, m + addMonth, 1),
            lastDate: new Date(y, m + 1 + addMonth, 0)
        };
    };
    /**
     * @return {?}
     */
    DatePicker.prototype.canLoadPrev = /**
     * @return {?}
     */
    function () {
        var minDate = this.props.minDate;
        return (!minDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(minDate).firstDate < +this.state.months[0].firstDate);
    };
    /**
     * @return {?}
     */
    DatePicker.prototype.canLoadNext = /**
     * @return {?}
     */
    function () {
        var maxDate = this.props.maxDate;
        return (!maxDate ||
            this.state.months.length <= 0 ||
            +this.getMonthDate(maxDate).firstDate > +this.state.months[this.state.months.length - 1].firstDate);
    };
    /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    DatePicker.prototype.genMonthData = /**
     * @param {?=} date
     * @param {?=} addMonth
     * @return {?}
     */
    function (date, addMonth) {
        if (addMonth === void 0) { addMonth = 0; }
        if (!date) {
            date = addMonth >= 0 ? this.state.months[this.state.months.length - 1].firstDate : this.state.months[0].firstDate;
        }
        if (!date) {
            date = new Date();
        }
        var locale = this.props.locale;
        var _a = this.getMonthDate(date, addMonth), firstDate = _a.firstDate, lastDate = _a.lastDate;
        /** @type {?} */
        var weeks = this.genWeekData(firstDate);
        /** @type {?} */
        var title = formatDate(firstDate, locale ? locale.monthTitle : 'yyyy/MM', this.props.locale);
        /** @type {?} */
        var data = /** @type {?} */ ({
            title: title,
            firstDate: firstDate,
            lastDate: lastDate,
            weeks: weeks
        });
        data.component = this.genMonthComponent(data);
        if (addMonth >= 0) {
            this.state.months.push(data);
        }
        else {
            this.state.months.unshift(data);
        }
        var _b = this.props, startDate = _b.startDate, endDate = _b.endDate;
        if (startDate) {
            this.selectDateRange(startDate, endDate);
        }
        return data;
    };
    /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    DatePicker.prototype.inDate = /**
     * @param {?} date
     * @param {?} tick
     * @return {?}
     */
    function (date, tick) {
        return date <= tick && tick < date + 24 * 3600000;
    };
    return DatePicker;
}());
export default DatePicker;
if (false) {
    /** @type {?} */
    DatePicker.prototype.props;
    /** @type {?} */
    DatePicker.prototype.state;
    /** @type {?} */
    DatePicker.prototype.visibleMonth;
    /** @type {?} */
    DatePicker.prototype.genMonthComponent;
    /** @type {?} */
    DatePicker.prototype.getDateWithoutTime;
    /** @type {?} */
    DatePicker.prototype.genWeekData;
    /** @type {?} */
    DatePicker.prototype.selectDateRange;
    /** @type {?} */
    DatePicker.prototype.computeVisible;
    /** @type {?} */
    DatePicker.prototype.createOnScroll;
    /** @type {?} */
    DatePicker.prototype.baseOnCellClick;
}

//# sourceMappingURL=data:application/json;base64,