/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from '@angular/core';
/** @typedef {?} */
var sizeType;
export { sizeType };
var WhiteSpace = /** @class */ (function () {
    function WhiteSpace() {
        this.prefixCls = 'am-whitespace';
        this.size = 'md';
        this.amWhiteSpace = true;
    }
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceXs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'xs';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceSm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'sm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceMd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceLg", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'lg';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WhiteSpace.prototype, "amWhitespaceXl", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size === 'xl';
        },
        enumerable: true,
        configurable: true
    });
    WhiteSpace.decorators = [
        { type: Component, args: [{
                    selector: 'WhiteSpace, nzm-whitespace',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    WhiteSpace.ctorParameters = function () { return []; };
    WhiteSpace.propDecorators = {
        size: [{ type: Input }],
        amWhiteSpace: [{ type: HostBinding, args: ['class.am-whitespace',] }],
        amWhitespaceXs: [{ type: HostBinding, args: ['class.am-whitespace-xs',] }],
        amWhitespaceSm: [{ type: HostBinding, args: ['class.am-whitespace-sm',] }],
        amWhitespaceMd: [{ type: HostBinding, args: ['class.am-whitespace-md',] }],
        amWhitespaceLg: [{ type: HostBinding, args: ['class.am-whitespace-lg',] }],
        amWhitespaceXl: [{ type: HostBinding, args: ['class.am-whitespace-xl',] }]
    };
    return WhiteSpace;
}());
export { WhiteSpace };
if (false) {
    /** @type {?} */
    WhiteSpace.prototype.prefixCls;
    /** @type {?} */
    WhiteSpace.prototype.size;
    /** @type {?} */
    WhiteSpace.prototype.amWhiteSpace;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hpdGUtc3BhY2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ3aGl0ZS1zcGFjZS93aGl0ZS1zcGFjZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7SUFxQzVEO3lCQTVCb0IsZUFBZTtvQkFHbEIsSUFBSTs0QkFHRyxJQUFJO0tBc0JaO0lBckJoQixzQkFDSSxzQ0FBYzs7OztRQURsQjtZQUVFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7U0FDM0I7OztPQUFBO0lBQ0Qsc0JBQ0ksc0NBQWM7Ozs7UUFEbEI7WUFFRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO1NBQzNCOzs7T0FBQTtJQUNELHNCQUNJLHNDQUFjOzs7O1FBRGxCO1lBRUUsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztTQUMzQjs7O09BQUE7SUFDRCxzQkFDSSxzQ0FBYzs7OztRQURsQjtZQUVFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7U0FDM0I7OztPQUFBO0lBQ0Qsc0JBQ0ksc0NBQWM7Ozs7UUFEbEI7WUFFRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO1NBQzNCOzs7T0FBQTs7Z0JBL0JGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUUsRUFBRTtpQkFDYjs7Ozs7dUJBSUUsS0FBSzsrQkFHTCxXQUFXLFNBQUMscUJBQXFCO2lDQUVqQyxXQUFXLFNBQUMsd0JBQXdCO2lDQUlwQyxXQUFXLFNBQUMsd0JBQXdCO2lDQUlwQyxXQUFXLFNBQUMsd0JBQXdCO2lDQUlwQyxXQUFXLFNBQUMsd0JBQXdCO2lDQUlwQyxXQUFXLFNBQUMsd0JBQXdCOztxQkFoQ3ZDOztTQVFhLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBzaXplVHlwZSA9ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdXaGl0ZVNwYWNlLCBuem0td2hpdGVzcGFjZScsXG4gIHRlbXBsYXRlOiBgYFxufSlcbmV4cG9ydCBjbGFzcyBXaGl0ZVNwYWNlIHtcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSAnYW0td2hpdGVzcGFjZSc7XG5cbiAgQElucHV0KClcbiAgc2l6ZTogc2l6ZVR5cGUgPSAnbWQnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZScpXG4gIGFtV2hpdGVTcGFjZTogYm9vbGVhbiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZS14cycpXG4gIGdldCBhbVdoaXRlc3BhY2VYcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAneHMnO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZS1zbScpXG4gIGdldCBhbVdoaXRlc3BhY2VTbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAnc20nO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZS1tZCcpXG4gIGdldCBhbVdoaXRlc3BhY2VNZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAnbWQnO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZS1sZycpXG4gIGdldCBhbVdoaXRlc3BhY2VMZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAnbGcnO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYW0td2hpdGVzcGFjZS14bCcpXG4gIGdldCBhbVdoaXRlc3BhY2VYbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID09PSAneGwnO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxufVxuIl19