/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { DatePickerComponent } from './date-picker.component';
import { DatePickerOptions } from './date-picker-options.provider';
var DatePickerDirective = /** @class */ (function () {
    function DatePickerDirective(_viewContainerRef, _elm, _defaultOptions, _cfr) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._eventListeners = [];
        this.value = new Date();
        this.onVisibleChange = new EventEmitter(true);
        this.onValueChange = new EventEmitter();
        this.onOk = new EventEmitter();
        this.onDismiss = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.showPicker = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.picker) {
            setTimeout(function () {
                _this._eventListeners = [];
            });
            /** @type {?} */
            var options_1 = new DatePickerOptions();
            Object.assign(options_1, this._defaultOptions, {
                hidePicker: function (event) {
                    _this.hidePicker();
                }
            });
            /** @type {?} */
            var optionalParams = [
                'mode',
                'minDate',
                'maxDate',
                'value',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'locale',
                'appendToBody',
                'onOk',
                'onDismiss',
                'onValueChange'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    (/** @type {?} */ (options_1))[param] = _this[param];
                }
            });
            /** @type {?} */
            var componentFactory = this._cfr.resolveComponentFactory(DatePickerComponent);
            /** @type {?} */
            var childInjector = Injector.create([
                {
                    provide: DatePickerOptions,
                    useValue: options_1
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.hidePicker = /**
     * @return {?}
     */
    function () {
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onVisibleChange.emit(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["isOpen"]) {
            if (changes["isOpen"].currentValue === true) {
                this.showPicker();
            }
            else {
                this.hidePicker();
            }
        }
    };
    /**
     * @return {?}
     */
    DatePickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hidePicker();
    };
    DatePickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[DatePicker]'
                },] }
    ];
    /** @nocollapse */
    DatePickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: DatePickerOptions },
        { type: ComponentFactoryResolver }
    ]; };
    DatePickerDirective.propDecorators = {
        isOpen: [{ type: Input }],
        mode: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        use12Hours: [{ type: Input }],
        value: [{ type: Input }],
        mask: [{ type: Input }],
        title: [{ type: Input }],
        okText: [{ type: Input }],
        dismissText: [{ type: Input }],
        disabled: [{ type: Input }],
        locale: [{ type: Input }],
        appendToBody: [{ type: Input }],
        onVisibleChange: [{ type: Output }],
        onValueChange: [{ type: Output }],
        onOk: [{ type: Output }],
        onDismiss: [{ type: Output }],
        togglePicker: [{ type: HostListener, args: ['click',] }]
    };
    return DatePickerDirective;
}());
export { DatePickerDirective };
if (false) {
    /** @type {?} */
    DatePickerDirective.prototype.picker;
    /** @type {?} */
    DatePickerDirective.prototype._eventListeners;
    /** @type {?} */
    DatePickerDirective.prototype.isOpen;
    /** @type {?} */
    DatePickerDirective.prototype.mode;
    /** @type {?} */
    DatePickerDirective.prototype.minDate;
    /** @type {?} */
    DatePickerDirective.prototype.maxDate;
    /** @type {?} */
    DatePickerDirective.prototype.use12Hours;
    /** @type {?} */
    DatePickerDirective.prototype.value;
    /** @type {?} */
    DatePickerDirective.prototype.mask;
    /** @type {?} */
    DatePickerDirective.prototype.title;
    /** @type {?} */
    DatePickerDirective.prototype.okText;
    /** @type {?} */
    DatePickerDirective.prototype.dismissText;
    /** @type {?} */
    DatePickerDirective.prototype.disabled;
    /** @type {?} */
    DatePickerDirective.prototype.locale;
    /** @type {?} */
    DatePickerDirective.prototype.appendToBody;
    /** @type {?} */
    DatePickerDirective.prototype.onVisibleChange;
    /** @type {?} */
    DatePickerDirective.prototype.onValueChange;
    /** @type {?} */
    DatePickerDirective.prototype.onOk;
    /** @type {?} */
    DatePickerDirective.prototype.onDismiss;
    /** @type {?} */
    DatePickerDirective.prototype._viewContainerRef;
    /** @type {?} */
    DatePickerDirective.prototype._elm;
    /** @type {?} */
    DatePickerDirective.prototype._defaultOptions;
    /** @type {?} */
    DatePickerDirective.prototype._cfr;
}

//# sourceMappingURL=data:application/json;base64,