/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Renderer2, InjectionToken, } from '@angular/core';
/** @type {?} */
export var INTERFACE_TOKEN = new InjectionToken('InterfaceToken');
var TouchFeedbackDirective = /** @class */ (function () {
    function TouchFeedbackDirective(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.activeStyle = true;
        this.clickStart = new EventEmitter();
        this.clickEnd = new EventEmitter();
    }
    /**
     * @param {?} className
     * @return {?}
     */
    TouchFeedbackDirective.prototype.addClass = /**
     * @param {?} className
     * @return {?}
     */
    function (className) {
        this._renderer.addClass(this._elementRef.nativeElement, className);
    };
    /**
     * @param {?} className
     * @return {?}
     */
    TouchFeedbackDirective.prototype.removeClass = /**
     * @param {?} className
     * @return {?}
     */
    function (className) {
        this._renderer.removeClass(this._elementRef.nativeElement, className);
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._className = this.className;
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.touchStart = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this.addClass(this._className);
            this.clickStart.emit();
        }
    };
    /**
     * @return {?}
     */
    TouchFeedbackDirective.prototype.touchEnd = /**
     * @return {?}
     */
    function () {
        if (this.activeStyle) {
            this.removeClass(this._className);
            this.clickEnd.emit();
        }
    };
    TouchFeedbackDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[TouchFeedback]'
                },] }
    ];
    /** @nocollapse */
    TouchFeedbackDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TouchFeedbackDirective.propDecorators = {
        className: [{ type: Input }],
        activeStyle: [{ type: Input }],
        clickStart: [{ type: Output }],
        clickEnd: [{ type: Output }],
        touchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
        touchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['mouseup', ['$event'],] }]
    };
    return TouchFeedbackDirective;
}());
export { TouchFeedbackDirective };
if (false) {
    /** @type {?} */
    TouchFeedbackDirective.prototype._className;
    /** @type {?} */
    TouchFeedbackDirective.prototype.className;
    /** @type {?} */
    TouchFeedbackDirective.prototype.activeStyle;
    /** @type {?} */
    TouchFeedbackDirective.prototype.clickStart;
    /** @type {?} */
    TouchFeedbackDirective.prototype.clickEnd;
    /** @type {?} */
    TouchFeedbackDirective.prototype._elementRef;
    /** @type {?} */
    TouchFeedbackDirective.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91Y2gtZmVlZGJhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJjb3JlL2RpcmVjdGl2ZS90b3VjaC1mZWVkYmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osWUFBWSxFQUNaLFVBQVUsRUFFVixTQUFTLEVBQ1QsY0FBYyxHQUNmLE1BQU0sZUFBZSxDQUFDOztBQUV2QixXQUFhLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBTSxnQkFBZ0IsQ0FBQyxDQUFDOztJQWF2RSxnQ0FBb0IsV0FBdUIsRUFBVSxTQUFvQjtRQUFyRCxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVc7MkJBSmxELElBQUk7MEJBQ2UsSUFBSSxZQUFZLEVBQUU7d0JBQ3BCLElBQUksWUFBWSxFQUFFO0tBS3pEOzs7OztJQUVPLHlDQUFROzs7O2NBQUMsU0FBaUI7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7Ozs7OztJQUc3RCw0Q0FBVzs7OztjQUFDLFNBQWlCO1FBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDOzs7OztJQUd4RSx5Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDbEM7Ozs7SUFJRCwyQ0FBVTs7O0lBRlY7UUFHRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN4QjtLQUNGOzs7O0lBSUQseUNBQVE7OztJQUZSO1FBR0UsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEI7S0FDRjs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjs7OztnQkFWQyxVQUFVO2dCQUVWLFNBQVM7Ozs0QkFZUixLQUFLOzhCQUNMLEtBQUs7NkJBQ0wsTUFBTTsyQkFDTixNQUFNOzZCQW1CTixZQUFZLFNBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3JDLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7MkJBUXBDLFlBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDbkMsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7aUNBcERyQzs7U0FpQmEsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIEluamVjdGlvblRva2VuLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNvbnN0IElOVEVSRkFDRV9UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxhbnk+KCdJbnRlcmZhY2VUb2tlbicpO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbVG91Y2hGZWVkYmFja10nXG59KVxuZXhwb3J0IGNsYXNzIFRvdWNoRmVlZGJhY2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHByaXZhdGUgX2NsYXNzTmFtZTtcbiAgQElucHV0KCkgY2xhc3NOYW1lOiBBcnJheTxzdHJpbmc+O1xuICBASW5wdXQoKSBhY3RpdmVTdHlsZSA9IHRydWU7XG4gIEBPdXRwdXQoKSBjbGlja1N0YXJ0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGNsaWNrRW5kOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyXG4gICkge1xuXG4gIH1cblxuICBwcml2YXRlIGFkZENsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVDbGFzcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX2NsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigndG91Y2hzdGFydCcsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXG4gIHRvdWNoU3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlU3R5bGUpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3ModGhpcy5fY2xhc3NOYW1lKTtcbiAgICAgIHRoaXMuY2xpY2tTdGFydC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigndG91Y2hlbmQnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdtb3VzZXVwJywgWyckZXZlbnQnXSlcbiAgdG91Y2hFbmQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlU3R5bGUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3ModGhpcy5fY2xhc3NOYW1lKTtcbiAgICAgIHRoaXMuY2xpY2tFbmQuZW1pdCgpO1xuICAgIH1cbiAgfVxufVxuIl19